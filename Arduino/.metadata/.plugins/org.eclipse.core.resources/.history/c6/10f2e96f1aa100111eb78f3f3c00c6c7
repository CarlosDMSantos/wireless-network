/*
 * RF24_init.h
 *
 *  Created on: 18/05/2012
 *      Author: Victor
 */

#ifndef RF24_INIT_H_
#define RF24_INIT_H_

#include "nRF24L01.h"
#include <WProgram.h>

//Bank1 Register Configuartion Operate==============================================
const volatile  uint32_t  Bank1_Reg0_Reg13[] =
{
    0xE2014B40,
    0x00004BC0,
    0x028CFCD0,
    0x41390099,
    0x0B869ED9,
    0xA67F0624,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00127300,
    0x36B48000,
};

const volatile  uint8_t   Bank1_Reg14[11] =
{
    0X41, 0X20, 0X08, 0X04, 0X81,
    0X20, 0XCF, 0XF7,0XFE, 0XFF, 0XFF
};

//Bank0_Register Configuration Operate============================================
const uint8_t Bank0_RegAct[2][2] =
{
	{DYNPD,		0x01},		//Enable pipe 0, Dynamic payload length
	{FEATURE,	0x04}		//EN_DPL= 1, EN_ACK_PAY = 0, EN_DYN_ACK = 0
};

const volatile uint8_t Bank0_Reg_Init[21][2] =
{
	{CONFIG,		0x0F},	//PRX,CRC=2,ENCRC,POWRUP;
	{EN_AA,			0x01},	//data pipe 0 ACK;
	{EN_RXADDR,		0x01},	//RX address data pipe 0;
	{SETUP_AW,		0x03},	//RX/TX address width 5B
	{SETUP_RETR,	0x06},	//auto retrasmit count 6,delay 250us;
	{RF_CH,			0x60},  //2400+0x60;
	{RF_SETUP,		0x1f},  //air rate = 2Mbps,high gain,output power = 5dBm;
	{STATUS,		0x70},	//Clear interrupt flag;
	{OBSERVE_TX,	0x00},
	{CD,			0x00},
	{RX_ADDR_P2,	0xc3},
	{RX_ADDR_P3,	0xc4},
	{RX_ADDR_P4,	0xc5},
	{RX_ADDR_P5,	0xc6},
	{RX_PW_P0,		0x20},	//RX Payload Length = 32
	{RX_PW_P1,		0x20},
	{RX_PW_P2,		0x20},
	{RX_PW_P3,		0x20},
	{RX_PW_P4,		0x20},
	{RX_PW_P5,		0x20},
	{FIFO_STATUS,	0x11}
};

//Write RX0 And TX Address=======================================================
//const UINT8 MRX_Address[5] = { 0x3a, 0x3b, 0x3c, 0x3d, 0x01 };
//const UINT8 UTX_Address[5] = { 0x3a, 0x3b, 0x3c, 0x3d, 0x01 };
//const UINT8 MTX_Address[5] = { 0x2a, 0x2b, 0x2c, 0x2d, 0x02 };
const uint8_t URX_Address[5] = { 0x2a, 0x2b, 0x2c, 0x2d, 0x02 };

/********************************************************************************
Function:              	void BK2421_Init( void )
Parameter:
                        None
Return:
                        None
Description:
                        BK2421 Chip initialize
*********************************************************************************/
void BK2421_Init(int ce, int csn)
{
    uint8_t Temp = 0;
    delay(60);                              //hardware response time > 50ms;
    digitalWrite(ce, LOW);                  //Closed RX mode or TX mode;

//Bank0 initialize==============================================================
    SwitchBANK( 0 );
    BANK0_Init();

    delay( 20 );
//BANK1 initialize==============================================================
    SwitchBANK( 1 );
    BANK1_Init();

    delay( 20 );
    SwitchBANK( 0 );
//Switch to RX mode===============================================================
    SwitchtoRXMode();
//Clear RX FIFO and TX FIFO=====================================================
    SPI_Write_Reg( FLUSH_RX, 0X00 );
    SPI_Write_Reg( FLUSH_TX, 0X00 );
}

/********************************************************************************
Function:               void BANK0_Init( void )
Parameter:
                        None
Return:
                        None
Description:
                        BANK0 register initialize operation
*********************************************************************************/
void BANK0_Init( void )
{
    UINT8  i  = 0;
	UINT8  k  = 0;
	UINT8  Rt = 0;

    //Config Bank0 Register
    for( i = 0; i < 21; i++ )
	{
		SPI_Write_Reg( W_REGISTER | Bank0_Reg_Init[i][0], Bank0_Reg_Init[i][1] );
	    SPI_Read_Reg( Bank0_Reg_Init[i][0] );
	}

    //Write RX/TX Address
	RF_SET_RX_ADDR( &URX_Address[0] );
    RF_SET_TX_ADDR( &URX_Address[0] );

    //Before config DYNPD and FEATURE register, the ACTIVATE command need to be write
 	k = SPI_Read_Reg( FEATURE );
	if( k == 0 )
	{
		SPI_Write_Reg( ACTIVATE,  0X73 );
	}

    //Now Config DYNPD and FEATURE register
	for( i = 0; i < 2; i++  )
	{
		SPI_Write_Reg( W_REGISTER | Bank0_RegAct[i][0], Bank0_RegAct[i][1] );
		SPI_Read_Reg( Bank0_RegAct[i][0] );
	}
}

/*********************************************************************************
Function:              	void BANK1_Init( void )
Parameter:
                        None;
Return:
                        None;
Description:
                        BANK1 regiter initialize operation
*********************************************************************************/
void BANK1_Init( void )
{
    INT8  i = 0;
    UINT8 j = 0;
    UINT8 Buff[4] = {0};
    //Configuration Bank1 Register0 to Register8====================================
    for( i = 0; i < 9; i++ )
    {
        for( j = 0; j < 4; j++ )
        {
            Buff[j] = (UINT8)(( Bank1_Reg0_Reg13[i] >> ( 8 *(j) ) ) & 0xff );
        }
        SPI_Write_Buf( W_REGISTER | i, &(Buff[0]), 4 );
    }
    //Configuration Bank1 Register9 to Register13===================================
    for( i = 9; i < 14; i++ )
    {
        for( j = 0; j < 4; j++ )
        {
            Buff[j] = (UINT8)( Bank1_Reg0_Reg13[i] >> 8 * (3-j) & 0xff );
        }
        SPI_Write_Buf( W_REGISTER | i, &(Buff[0]), 4 );
    }
    //Configuration  Bank1 Register 14==============================================
    SPI_Write_Buf( W_REGISTER | 0x0e,&(Bank1_Reg14[0]),11 );
    //toggle Reg4[25-26]============================================================
    for( i = 0; i < 4; i++ )
    {
        Buff[i] = (UINT8)(( Bank1_Reg0_Reg13[4] >> 8*(i)) & 0xff );
    }
    Buff[0] |= 0x06;
    SPI_Write_Buf( W_REGISTER | 0X04, &(Buff[0]), 4 );

    Buff[0] &= 0XF9;
    SPI_Write_Buf( W_REGISTER | 0X04, &(Buff[0]), 4 );
}




/********************************************************************************
Function:             	void SwitchBANK( UINT8 pB  )
Parameter:
                       	pB	[IN]	Appoint switch to BANK0 or BANK1
Return:
                       	None;                                                                                                     );
Description:
                        Switch to BANK0 or BANK1                                                                                   );
*********************************************************************************/
void SwitchBANK( uint8_t pB )
{
	uint8_t Rt = 0;
    Rt  = SPI_Read_Reg( R_REGISTER | STATUS );     	//Read STATUS_RBANK;
    Rt &= 0x80;
    if( ( Rt && !pB ) ||( !Rt && pB ))
    {
        SPI_Write_Reg( ACTIVATE, 0X53 );
    }
    SPI_Read_Reg( R_REGISTER | STATUS );        	//Detect STATUS_RBANK = 0?

}



#endif /* RF24_INIT_H_ */
