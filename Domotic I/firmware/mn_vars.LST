C51 COMPILER V8.06   MN_VARS                                                               05/02/2008 22:28:52 PAGE 1   


C51 COMPILER V8.06, COMPILATION OF MODULE MN_VARS
OBJECT MODULE PLACED IN mn_vars.OBJ
COMPILER INVOKED BY: C:\Keil8\C51\Bin\C51.exe mn_vars.c DB OE LARGE

line level    source

   1          //-----------------------------------------------------------------------------
   2          // mn_vars.c
   3          //-----------------------------------------------------------------------------
   4          // Copyright 2006 Silicon Laboratories, Inc.
   5          //
   6          // Description:
   7          //      This file contains variables used by the TCP/IP Stack.
   8          //
   9          // Generated by TCP/IP Library Builder Version 3.23.
  10          //
  11          
  12          #include "mn_defs.h"
  13          #include "mn_userconst.h"
  14          
  15          //-----------------------------------------------------------------------------
  16          // IP Address Setup
  17          //-----------------------------------------------------------------------------
  18          //
  19          //   Change the ip_src_addr below to select the IP address of
  20          //   your target. If the IP address of the destination is known
  21          //   replace ip_dest_addr with that address. If you are dialing
  22          //   into an ISP, the source and destination addresses initially
  23          //   specified do not matter as they will be negotiated.
  24          //
  25          
  26          byte ip_dest_addr[IP_ADDR_LEN] = IP_DEST_ADDR;
  27          byte ip_src_addr[IP_ADDR_LEN]  = IP_SRC_ADDR;
  28          
  29          //-----------------------------------------------------------------------------
  30          // MAC Address Setup
  31          //-----------------------------------------------------------------------------
  32          //
  33          //   If using the CP2200, mn_ether_init will overwrite this value with the
  34          //   MAC address stored in the Flash of the CP2200.
  35          //
  36          //   If using another Ethernet controller with EEPROM you may need to write
  37          //   a routine to take the value of the hw_addr in EEPROM and put it into
  38          //   the array below on startup. Otherwise replace eth_src_hw_addr
  39          //   below with the proper ethernet hardware address.
  40          //
  41          
  42          byte eth_src_hw_addr[ETH_ADDR_LEN] = ETH_SRC_HW_ADDR;
  43          
  44          //   ARP is used, so the array below is used as a temporary holder for
  45          //   the destination hardware address. It does not have to be changed.
  46          byte eth_dest_hw_addr[ETH_ADDR_LEN] = ETH_DEST_HW_ADDR;
  47          
  48          //   If a gateway is being used set the gateway IP address and
  49          //   subnet mask below.
  50          //
  51          //   If a gateway is not being used:
  52          //      set the gateway IP address to { 255,255,255,255 }
  53          //      set the subnet mask to        { 255,255,255,  0 }
  54          //
  55          byte gateway_ip_addr[IP_ADDR_LEN] = GATEWAY_IP_ADDR;
C51 COMPILER V8.06   MN_VARS                                                               05/02/2008 22:28:52 PAGE 2   

  56          byte subnet_mask[IP_ADDR_LEN]     = SUBNET_MASK_ADDR;
  57          
  58          //-----------------------------------------------------------------------------
  59          // Stack Variable Declarations
  60          //-----------------------------------------------------------------------------
  61          //
  62          // These arrays are used by the TCP/IP stack. They cannot be removed or edited.
  63          //
  64          SOCKET_INFO_T sock_info[num_sockets];
  65          byte null_addr[IP_ADDR_LEN];
  66          
  67          byte recv_buff[recv_buff_size];
  68          
  69          #if (!c8051f340_usb_fifo)
  70          byte send_buff[xmit_buff_size];
  71          #else
              byte send_buff[1] _at_ 0x400;
              #endif
  74          
  75          byte ping_reply_buff[ping_buff_size + 9];
  76          
  77          VF_PTR http_vf_ptrs[num_sockets];
  78          TEMP_SSI_S temp_ssi_info[num_sockets];
  79          byte HTTPBuffer[http_buffer_len];
  80          byte URIBuffer[uri_buffer_len];
  81          byte * const URIBuffer_max = &URIBuffer[uri_buffer_len-1];
  82          byte BODYBuffer[body_buffer_len];
  83          
  84          VF vf_dir[num_vf_pages];
  85          PAGE_SEND_T page_send_info[num_sockets];
  86          POST_FUNCS pf[num_post_funcs];
  87          
  88          ARP_INFO_T arp_info[arp_cache_size];
  89          
  90          //-----------------------------------------------------------------------------
  91          // FLASH Constants
  92          //-----------------------------------------------------------------------------
  93          //
  94          // These constants define the behavior of the stack. They should not be changed
  95          // or edited here.
  96          //
  97          // To change the value of a FLASH constant, modify its corresponding
  98          // preprocessor-defined constant in mn_userconst.h.
  99          //
 100          
 101          //--------------------------
 102          // Device
 103          //--------------------------
 104          byte     code  DEVICE_ID = device_id;
 105          byte     code  C8051F340_USB_FIFO = c8051f340_usb_fifo;
 106          
 107          //--------------------------
 108          // Sockets
 109          //--------------------------
 110          byte     code   NUM_SOCKETS = num_sockets;
 111          word16  code    XMIT_BUFF_SIZE = xmit_buff_size;
 112          word16  code    RECV_BUFF_SIZE = recv_buff_size;
 113          word16  code    SOCKET_WAIT_TICKS = socket_wait_ticks;
 114          
 115          //--------------------------
 116          // Ethernet
 117          //--------------------------
C51 COMPILER V8.06   MN_VARS                                                               05/02/2008 22:28:52 PAGE 3   

 118          word16  code    ETHER_WAIT_TICKS = ether_wait_ticks;
 119          
 120          //--------------------------
 121          // ARP
 122          //--------------------------
 123          word16   code  ARP_KEEP_TICKS = arp_keep_ticks;
 124          byte     code  ARP_RESEND_TRYS = arp_resend_trys;
 125          word16   code  ARP_WAIT_TICKS = arp_wait_ticks;
 126          byte     code  ARP_CACHE_SIZE = arp_cache_size;
 127          byte     code  ARP_AUTO_UPDATE = arp_auto_update;
 128          
 129          //--------------------------
 130          // HTTP
 131          //--------------------------
 132          unsigned char  code BODY_BUFFER_LEN = body_buffer_len;
 133          word16   code  HTTP_BUFFER_LEN = http_buffer_len;
 134          
 135          //--------------------------
 136          // TFTP
 137          //--------------------------
 138          int   code  TFTP_RESEND_TRYS = tftp_resend_trys;
 139          
 140          //--------------------------
 141          // IP
 142          //--------------------------
 143          byte  code  TIME_TO_LIVE = ip_time_to_live;
 144          byte  code  MULTICAST_TTL = multicast_ttl;
 145          
 146          //--------------------------
 147          // PING
 148          //--------------------------
 149          word16   code  PING_BUFF_SIZE = ping_buff_size;
 150          
 151          //--------------------------
 152          // TCP
 153          //--------------------------
 154          word16   code  TCP_WINDOW = tcp_window;
 155          word16   code  TCP_RESEND_TICKS = tcp_resend_ticks;
 156          byte     code  TCP_RESEND_TRYS = tcp_resend_trys;
 157          
 158          //--------------------------
 159          // Virtual File
 160          //--------------------------
 161          byte  code  NUM_VF_PAGES = num_vf_pages;
 162          byte  code  NUM_POST_FUNCS = num_post_funcs;
 163          
 164          //--------------------------
 165          // Timer
 166          //--------------------------
 167          byte    code    TL0_FLASH = tl0_flash;
 168          byte    code    TH0_FLASH = th0_flash;
 169          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   ----    ----
   CONSTANT SIZE    =     36    ----
   XDATA SIZE       =   2342    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
C51 COMPILER V8.06   MN_VARS                                                               05/02/2008 22:28:52 PAGE 4   

END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
