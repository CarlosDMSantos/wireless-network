C51 COMPILER V8.06   MN_CALLBACK                                                           05/02/2008 22:28:52 PAGE 1   


C51 COMPILER V8.06, COMPILATION OF MODULE MN_CALLBACK
OBJECT MODULE PLACED IN mn_callback.OBJ
COMPILER INVOKED BY: C:\Keil8\C51\Bin\C51.exe mn_callback.c DB OE LARGE

line level    source

   1          //-----------------------------------------------------------------------------
   2          // mn_callback.c
   3          //-----------------------------------------------------------------------------
   4          // Copyright 2006 Silicon Laboratories, Inc.
   5          //
   6          // Description:
   7          //      This file callback functions from the TCP/IP stack.
   8          //  These functions may be edited by the user.
   9          //
  10          //  Callback functions include:
  11          //  1. callback_app_process_packet
  12          //  2. callback_app_server_idle
  13          //  3. callback_app_recv_idle
  14          //  4. callback_app_server_process_packet
  15          //  5. callback_socket_closed (only when TCP is included in the stack)
  16          //  6. callback_socket_empty (only when TCP is included in the stack)
  17          //
  18          // Generated by TCP/IP Configuration Wizard Version 3.23.
  19          //
  20          
  21          #include "mn_userconst.h"                      // TCP/IP Library Constants
  22          #include "mn_stackconst.h"                     // TCP/IP Library Constants
  23          #include "mn_errs.h"                           // Library Error Codes
  24          #include "mn_defs.h"                           // Library Type definitions
  25          #include "mn_funcs.h"                          // Library Function Prototypes
  26          #include "VFILE_DIR\index.h"
  27          #include <c8051F340.h>                         // Device-specific SFR Definitions
  28          
  29          
  30          
  31          //------------------------------------------------------------------------------
  32          // Callback Functions
  33          //------------------------------------------------------------------------------
  34          
  35          //------------------------------------------------------------------------------
  36          // callback_app_process_packet
  37          //------------------------------------------------------------------------------
  38          //
  39          // This function is called after any TCP or UDP packet is received.
  40          //
  41          // Parameters:
  42          //    socket_ptr - pointer to the socket that contains the data.
  43          //// Return Values:
  44          //    NEED_IGNORE_PACKET <-94> - The library will not ACK the TCP packet.
  45          //
  46          //    Any other value - The library will ACK the TCP packet.
  47          //
  48          // Note: The return value is ignored if a UDP packet was received.
  49          //
  50          SCHAR callback_app_process_packet(PSOCKET_INFO socket_ptr)
  51          {
  52   1         socket_ptr = socket_ptr;   // This statment prevents compiler warning.
  53   1         return (1);
  54   1      }
  55          
C51 COMPILER V8.06   MN_CALLBACK                                                           05/02/2008 22:28:52 PAGE 2   

  56          //------------------------------------------------------------------------------
  57          // callback_app_server_idle
  58          //------------------------------------------------------------------------------
  59          //
  60          // This function is called periodically and when both the receive and transmit
  61          // buffers are empty. This function should only be used for low priority tasks.
  62          // Any high priority tasks should be placed in an interrupt service routine.
  63          //
  64          // Parameters:
  65          //    psocket_ptr - pointer to a socket that can be filled with data.
  66          //
  67          // Return Values:
  68          //    NEED_TO_SEND <-114> - The library will immediately send the data stored in
  69          //    the socket.
  70          //
  71          //    NEED_TO_EXIT <-102> - The mn_server() routine will exit immediately, returning
  72          //    control to the main() routine.
  73          //
  74          //    FALSE <0> - The mn_server() routine will continue to function normally.
  75          //
  76          // Note: The socket pointer may be re-assigned to a different socket.
  77          // (e.g. *psocket_ptr = new_socket_ptr; )
  78          //
  79          /*
  80          SCHAR callback_app_server_idle(PSOCKET_INFO *psocket_ptr)
  81          {
  82          
  83             // Put your code here.
  84          
  85             // If the link goes invalid, exit mn_server().
  86             if(link_lost)
  87                return (NEED_TO_EXIT);
  88          
  89             psocket_ptr = psocket_ptr; // This statment prevents compiler warning.
  90             return (0);
  91          }
  92          */
  93          //------------------------------------------------------------------------------
  94          // callback_app_recv_idle
  95          //------------------------------------------------------------------------------
  96          //
  97          // This function is called repeatedly while the server is waiting for data.
  98          // This function should only be used for low priority tasks.  Any high priority
  99          // tasks should be placed in an interrupt service routine.
 100          //
 101          // Parameters:
 102          //    none
 103          //
 104          // Return Values:
 105          //    NEED_TO_EXIT <-102> - The server will immedialtely stop waiting for data and
 106          //    will advance to the next state.
 107          //
 108          //    Any other value - The server will continue to wait for data.
 109          //
 110          SCHAR callback_app_recv_idle(void)
 111          {
 112   1         // Put your code here.
 113   1         return (0);
 114   1      }
 115          
 116          //------------------------------------------------------------------------------
 117          // callback_app_server_process_packet
C51 COMPILER V8.06   MN_CALLBACK                                                           05/02/2008 22:28:52 PAGE 3   

 118          //------------------------------------------------------------------------------
 119          //
 120          // This function is called after any TCP or UDP packet that is not HTTP or FTP
 121          // received.  HTTP and FTP packets are automatically handled by the server.
 122          //
 123          // Parameters:
 124          //    socket_ptr - pointer to the socket that contains the data.
 125          //
 126          // Return Values:
 127          //    NEED_TO_EXIT <-102> - The mn_server() routine will exit immediately, returning
 128          //    control to the main() routine.
 129          //
 130          //    Any other value - The server will discard the packet.
 131          //
 132          SCHAR callback_app_server_process_packet(PSOCKET_INFO socket_ptr)
 133          {
 134   1         socket_ptr = socket_ptr;   // This statment prevents compiler warning.
 135   1      
 136   1         return (0);
 137   1      }
 138          
 139          
 140          //------------------------------------------------------------------------------
 141          // callback_socket_closed
 142          //------------------------------------------------------------------------------
 143          //
 144          // This function is called after a TCP socket is closed.
 145          //
 146          // Parameters:
 147          //    socket_no - number of the socket that was closed.
 148          //
 149          // Return Values:
 150          //
 151          //    N/A
 152          //
 153          void callback_socket_closed(SCHAR socket_no)
 154          {
 155   1              socket_no = socket_no;
 156   1      }
 157          
 158          //------------------------------------------------------------------------------
 159          // callback_socket_empty
 160          //------------------------------------------------------------------------------
 161          //
 162          // This function is called after all data in a TCP socket is sent.
 163          //
 164          // Parameters:
 165          //    socket_ptr - pointer to the socket that is empty.
 166          //
 167          // Return Values:
 168          //
 169          //    N/A
 170          //
 171          void callback_socket_empty(PSOCKET_INFO socket_ptr)
 172          {
 173   1              socket_ptr = socket_ptr;
 174   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     11    ----
   CONSTANT SIZE    =   ----    ----
C51 COMPILER V8.06   MN_CALLBACK                                                           05/02/2008 22:28:52 PAGE 4   

   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
