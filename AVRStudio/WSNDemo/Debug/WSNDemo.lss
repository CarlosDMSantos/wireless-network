
WSNDemo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800200  00001dbe  00001e52  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001dbe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000059b  00800210  00800210  00001e62  2**0
                  ALLOC
  3 .stab         00000750  00000000  00000000  00001e64  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000e7  00000000  00000000  000025b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000540  00000000  00000000  000026a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000049b0  00000000  00000000  00002be0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001955  00000000  00000000  00007590  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003d07  00000000  00000000  00008ee5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000af8  00000000  00000000  0000cbec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000179a  00000000  00000000  0000d6e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001e0c  00000000  00000000  0000ee7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macinfo 00104879  00000000  00000000  00010c8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000470  00000000  00000000  00115503  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 90 00 	jmp	0x120	; 0x120 <__ctors_end>
       4:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
       8:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
       c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      10:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      14:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      18:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      1c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      20:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      24:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      28:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      2c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      30:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      34:	0c 94 a4 01 	jmp	0x348	; 0x348 <__vector_13>
      38:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      3c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__vector_15>
      40:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      44:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      48:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      4c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      50:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      54:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      58:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      5c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      60:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      64:	0c 94 ba 02 	jmp	0x574	; 0x574 <__vector_25>
      68:	0c 94 9e 02 	jmp	0x53c	; 0x53c <__vector_26>
      6c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      70:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      74:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      78:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      7c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      80:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      84:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      88:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      8c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      90:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      94:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      98:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      9c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      a0:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      a4:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      a8:	0c 94 c8 01 	jmp	0x390	; 0x390 <__vector_42>
      ac:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__vector_43>
      b0:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      b4:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      b8:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      bc:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      c0:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      c4:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      c8:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      cc:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      d0:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      d4:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      d8:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      dc:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      e0:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      e4:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      e8:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      ec:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      f0:	0c 94 f1 0a 	jmp	0x15e2	; 0x15e2 <__vector_60>
      f4:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      f8:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      fc:	0c 94 b9 0a 	jmp	0x1572	; 0x1572 <__vector_63>
     100:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
     104:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
     108:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
     10c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
     110:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
     114:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
     118:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
     11c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>

00000120 <__ctors_end>:
     120:	11 24       	eor	r1, r1
     122:	1f be       	out	0x3f, r1	; 63
     124:	cf ef       	ldi	r28, 0xFF	; 255
     126:	d1 e4       	ldi	r29, 0x41	; 65
     128:	de bf       	out	0x3e, r29	; 62
     12a:	cd bf       	out	0x3d, r28	; 61

0000012c <__do_copy_data>:
     12c:	12 e0       	ldi	r17, 0x02	; 2
     12e:	a0 e0       	ldi	r26, 0x00	; 0
     130:	b2 e0       	ldi	r27, 0x02	; 2
     132:	ee eb       	ldi	r30, 0xBE	; 190
     134:	fd e1       	ldi	r31, 0x1D	; 29
     136:	00 e0       	ldi	r16, 0x00	; 0
     138:	0b bf       	out	0x3b, r16	; 59
     13a:	02 c0       	rjmp	.+4      	; 0x140 <__do_copy_data+0x14>
     13c:	07 90       	elpm	r0, Z+
     13e:	0d 92       	st	X+, r0
     140:	a0 31       	cpi	r26, 0x10	; 16
     142:	b1 07       	cpc	r27, r17
     144:	d9 f7       	brne	.-10     	; 0x13c <__do_copy_data+0x10>

00000146 <__do_clear_bss>:
     146:	17 e0       	ldi	r17, 0x07	; 7
     148:	a0 e1       	ldi	r26, 0x10	; 16
     14a:	b2 e0       	ldi	r27, 0x02	; 2
     14c:	01 c0       	rjmp	.+2      	; 0x150 <.do_clear_bss_start>

0000014e <.do_clear_bss_loop>:
     14e:	1d 92       	st	X+, r1

00000150 <.do_clear_bss_start>:
     150:	ab 3a       	cpi	r26, 0xAB	; 171
     152:	b1 07       	cpc	r27, r17
     154:	e1 f7       	brne	.-8      	; 0x14e <.do_clear_bss_loop>
     156:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <main>
     15a:	0c 94 dd 0e 	jmp	0x1dba	; 0x1dba <_exit>

0000015e <__bad_interrupt>:
     15e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000162 <RTC_Init>:

time volatile current_Time;

void RTC_Init()
{
	TIMSK2 &=~((1<<TOIE2)|(1<<OCIE2B));     //Disable TC2 interrupt
     162:	80 91 70 00 	lds	r24, 0x0070
     166:	8a 7f       	andi	r24, 0xFA	; 250
     168:	80 93 70 00 	sts	0x0070, r24
	ASSR  &=~((1<<EXCLKAMR)|(1<<EXCLK));    // set clock source to external crystal AS2=1, EXCLK=0, EXCKLAMR=0
     16c:	80 91 b6 00 	lds	r24, 0x00B6
     170:	8f 73       	andi	r24, 0x3F	; 63
     172:	80 93 b6 00 	sts	0x00B6, r24
	ASSR |= (1<<AS2);              // alternate clock source
     176:	80 91 b6 00 	lds	r24, 0x00B6
     17a:	80 62       	ori	r24, 0x20	; 32
     17c:	80 93 b6 00 	sts	0x00B6, r24
	
	TCNT2 = 0x00;
     180:	10 92 b2 00 	sts	0x00B2, r1
	TCCR2B = 0x05;
     184:	85 e0       	ldi	r24, 0x05	; 5
     186:	80 93 b1 00 	sts	0x00B1, r24
	
	while(ASSR&0x07);           //Wait until TC2 is updated
     18a:	80 91 b6 00 	lds	r24, 0x00B6
     18e:	90 e0       	ldi	r25, 0x00	; 0
     190:	87 70       	andi	r24, 0x07	; 7
     192:	90 70       	andi	r25, 0x00	; 0
     194:	00 97       	sbiw	r24, 0x00	; 0
     196:	c9 f7       	brne	.-14     	; 0x18a <RTC_Init+0x28>
	//TIMSK2 |= (1<<TOIE2);        //set 8-bit Timer/Counter2 Overflow Interrupt Enable
	//sei();                     //set the Global Interrupt Enable Bit
}
     198:	08 95       	ret

0000019a <__vector_15>:
	HAL_UartWriteByte(aux+'0');
	HAL_UartWriteByte((num%10)+'0');
}
volatile char aa;
ISR(TIMER2_OVF_vect)  //overflow interrupt vector
{
     19a:	1f 92       	push	r1
     19c:	0f 92       	push	r0
     19e:	0f b6       	in	r0, 0x3f	; 63
     1a0:	0f 92       	push	r0
     1a2:	0b b6       	in	r0, 0x3b	; 59
     1a4:	0f 92       	push	r0
     1a6:	11 24       	eor	r1, r1
     1a8:	2f 93       	push	r18
     1aa:	3f 93       	push	r19
     1ac:	4f 93       	push	r20
     1ae:	5f 93       	push	r21
     1b0:	6f 93       	push	r22
     1b2:	7f 93       	push	r23
     1b4:	8f 93       	push	r24
     1b6:	9f 93       	push	r25
     1b8:	af 93       	push	r26
     1ba:	bf 93       	push	r27
     1bc:	ef 93       	push	r30
     1be:	ff 93       	push	r31
	if (++current_Time.second==60)        //keep track of time
     1c0:	80 91 9b 07 	lds	r24, 0x079B
     1c4:	8f 5f       	subi	r24, 0xFF	; 255
     1c6:	80 93 9b 07 	sts	0x079B, r24
     1ca:	8c 33       	cpi	r24, 0x3C	; 60
     1cc:	a1 f4       	brne	.+40     	; 0x1f6 <__vector_15+0x5c>
	{
		current_Time.second=0;
     1ce:	10 92 9b 07 	sts	0x079B, r1
		if (++current_Time.minute==60)
     1d2:	80 91 9c 07 	lds	r24, 0x079C
     1d6:	8f 5f       	subi	r24, 0xFF	; 255
     1d8:	80 93 9c 07 	sts	0x079C, r24
     1dc:	8c 33       	cpi	r24, 0x3C	; 60
     1de:	59 f4       	brne	.+22     	; 0x1f6 <__vector_15+0x5c>
		{
			current_Time.minute=0;
     1e0:	10 92 9c 07 	sts	0x079C, r1
			if (++current_Time.hour==24)
     1e4:	80 91 9d 07 	lds	r24, 0x079D
     1e8:	8f 5f       	subi	r24, 0xFF	; 255
     1ea:	80 93 9d 07 	sts	0x079D, r24
     1ee:	88 31       	cpi	r24, 0x18	; 24
     1f0:	11 f4       	brne	.+4      	; 0x1f6 <__vector_15+0x5c>
			{
				current_Time.hour=0;
     1f2:	10 92 9d 07 	sts	0x079D, r1
					//current_Time.year++;
				//}
			}
		}
	}
	HAL_UartWriteByte('0'+(aa++));
     1f6:	80 91 9a 07 	lds	r24, 0x079A
     1fa:	98 2f       	mov	r25, r24
     1fc:	9f 5f       	subi	r25, 0xFF	; 255
     1fe:	90 93 9a 07 	sts	0x079A, r25
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	c0 96       	adiw	r24, 0x30	; 48
     206:	0e 94 46 02 	call	0x48c	; 0x48c <HAL_UartWriteByte>
     20a:	ff 91       	pop	r31
     20c:	ef 91       	pop	r30
     20e:	bf 91       	pop	r27
     210:	af 91       	pop	r26
     212:	9f 91       	pop	r25
     214:	8f 91       	pop	r24
     216:	7f 91       	pop	r23
     218:	6f 91       	pop	r22
     21a:	5f 91       	pop	r21
     21c:	4f 91       	pop	r20
     21e:	3f 91       	pop	r19
     220:	2f 91       	pop	r18
     222:	0f 90       	pop	r0
     224:	0b be       	out	0x3b, r0	; 59
     226:	0f 90       	pop	r0
     228:	0f be       	out	0x3f, r0	; 63
     22a:	0f 90       	pop	r0
     22c:	1f 90       	pop	r1
     22e:	18 95       	reti

00000230 <HAL_Init>:

/*****************************************************************************
*****************************************************************************/
void HAL_Init(void)
{
  MCUSR = 0;
     230:	14 be       	out	0x34, r1	; 52
  wdt_disable();
     232:	88 e1       	ldi	r24, 0x18	; 24
     234:	0f b6       	in	r0, 0x3f	; 63
     236:	f8 94       	cli
     238:	80 93 60 00 	sts	0x0060, r24
     23c:	10 92 60 00 	sts	0x0060, r1
     240:	0f be       	out	0x3f, r0	; 63
  SYS_EnableInterrupts();
     242:	78 94       	sei

  HAL_TimerInit();
     244:	0e 94 b3 01 	call	0x366	; 0x366 <HAL_TimerInit>
}
     248:	08 95       	ret

0000024a <HAL_Sleep>:
}

/*****************************************************************************
*****************************************************************************/
void HAL_Sleep(uint32_t interval)
{
     24a:	0f 93       	push	r16
     24c:	1f 93       	push	r17
  uint32_t ticks;
  uint16_t integer;
  uint8_t fractional;

  ticks = (HAL_SLEEP_TIMER_CLOCK * interval) / (HAL_SLEEP_TIMER_PRESCALER * 1000ul);
     24e:	2f e0       	ldi	r18, 0x0F	; 15
     250:	66 0f       	add	r22, r22
     252:	77 1f       	adc	r23, r23
     254:	88 1f       	adc	r24, r24
     256:	99 1f       	adc	r25, r25
     258:	2a 95       	dec	r18
     25a:	d1 f7       	brne	.-12     	; 0x250 <HAL_Sleep+0x6>
     25c:	20 e0       	ldi	r18, 0x00	; 0
     25e:	30 ea       	ldi	r19, 0xA0	; 160
     260:	4f e0       	ldi	r20, 0x0F	; 15
     262:	50 e0       	ldi	r21, 0x00	; 0
     264:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <__udivmodsi4>
     268:	89 01       	movw	r16, r18
     26a:	9a 01       	movw	r18, r20
  if (0 == ticks)
     26c:	01 15       	cp	r16, r1
     26e:	11 05       	cpc	r17, r1
     270:	21 05       	cpc	r18, r1
     272:	31 05       	cpc	r19, r1
     274:	09 f4       	brne	.+2      	; 0x278 <HAL_Sleep+0x2e>
     276:	65 c0       	rjmp	.+202    	; 0x342 <HAL_Sleep+0xf8>
    return;

  integer = ticks >> 8;
     278:	bb 27       	eor	r27, r27
     27a:	a3 2f       	mov	r26, r19
     27c:	92 2f       	mov	r25, r18
     27e:	81 2f       	mov	r24, r17
  fractional = ticks & 0xff;

  TIMSK2 = 0;
     280:	10 92 70 00 	sts	0x0070, r1
  ASSR |= (1 << AS2);
     284:	20 91 b6 00 	lds	r18, 0x00B6
     288:	20 62       	ori	r18, 0x20	; 32
     28a:	20 93 b6 00 	sts	0x00B6, r18
  TCCR2A = 0;
     28e:	10 92 b0 00 	sts	0x00B0, r1
  TCCR2B = 0;
     292:	10 92 b1 00 	sts	0x00B1, r1
  TCNT2 = 0;
     296:	10 92 b2 00 	sts	0x00B2, r1

/*****************************************************************************
*****************************************************************************/
inline void halSleepSynchronize(void)
{
  while (ASSR & ((1 << TCN2UB) | (1 << OCR2AUB) | (1 << OCR2BUB) | (1 << TCR2AUB) | (1 << TCR2BUB)));
     29a:	20 91 b6 00 	lds	r18, 0x00B6
     29e:	30 e0       	ldi	r19, 0x00	; 0
     2a0:	2f 71       	andi	r18, 0x1F	; 31
     2a2:	30 70       	andi	r19, 0x00	; 0
     2a4:	21 15       	cp	r18, r1
     2a6:	31 05       	cpc	r19, r1
     2a8:	c1 f7       	brne	.-16     	; 0x29a <HAL_Sleep+0x50>
  TCCR2A = 0;
  TCCR2B = 0;
  TCNT2 = 0;
  halSleepSynchronize();

  TIFR2 = (1 << OCF2B) | (1 << OCF2A) | (1 << TOV2);
     2aa:	27 e0       	ldi	r18, 0x07	; 7
     2ac:	27 bb       	out	0x17, r18	; 23
  TCCR2B = ((1 << CS20) | (1 << CS21) | (1 << CS22));   // clk/1024
     2ae:	20 93 b1 00 	sts	0x00B1, r18
  while (1)
  {
    halSleepTimerEvent = false;
    
    if (integer > 0)
      OCR2A = 0xff;
     2b2:	5f ef       	ldi	r21, 0xFF	; 255

    TIMSK2 |= (1 << OCIE2A);

    halSleepSynchronize();

    SMCR = (1 << SM1) | (1 << SM0) | (1 << SE); // power-save
     2b4:	47 e0       	ldi	r20, 0x07	; 7
     2b6:	01 c0       	rjmp	.+2      	; 0x2ba <HAL_Sleep+0x70>
    if (event)
    {
      if (integer > 0)
        integer--;
      else
        fractional = 0;
     2b8:	00 e0       	ldi	r16, 0x00	; 0
  TIFR2 = (1 << OCF2B) | (1 << OCF2A) | (1 << TOV2);
  TCCR2B = ((1 << CS20) | (1 << CS21) | (1 << CS22));   // clk/1024

  while (1)
  {
    halSleepTimerEvent = false;
     2ba:	10 92 10 02 	sts	0x0210, r1
    
    if (integer > 0)
     2be:	00 97       	sbiw	r24, 0x00	; 0
     2c0:	19 f0       	breq	.+6      	; 0x2c8 <HAL_Sleep+0x7e>
      OCR2A = 0xff;
     2c2:	50 93 b3 00 	sts	0x00B3, r21
     2c6:	20 c0       	rjmp	.+64     	; 0x308 <HAL_Sleep+0xbe>
    else if (fractional > 0)
     2c8:	00 23       	and	r16, r16
     2ca:	19 f0       	breq	.+6      	; 0x2d2 <HAL_Sleep+0x88>
      OCR2A = fractional;
     2cc:	00 93 b3 00 	sts	0x00B3, r16
     2d0:	1b c0       	rjmp	.+54     	; 0x308 <HAL_Sleep+0xbe>

/*****************************************************************************
*****************************************************************************/
inline void halSleepSynchronize(void)
{
  while (ASSR & ((1 << TCN2UB) | (1 << OCR2AUB) | (1 << OCR2BUB) | (1 << TCR2AUB) | (1 << TCR2BUB)));
     2d2:	80 91 b6 00 	lds	r24, 0x00B6
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	8f 71       	andi	r24, 0x1F	; 31
     2da:	90 70       	andi	r25, 0x00	; 0
     2dc:	00 97       	sbiw	r24, 0x00	; 0
     2de:	c9 f7       	brne	.-14     	; 0x2d2 <HAL_Sleep+0x88>
    else if (fractional > 0)
      OCR2A = fractional;
    else
    {
      halSleepSynchronize();
      TIMSK2 = 0;
     2e0:	10 92 70 00 	sts	0x0070, r1
      TCCR2B = 0;
     2e4:	10 92 b1 00 	sts	0x00B1, r1
      GTCCR |= (1 << PSRASY);
     2e8:	83 b5       	in	r24, 0x23	; 35
     2ea:	82 60       	ori	r24, 0x02	; 2
     2ec:	83 bd       	out	0x23, r24	; 35

/*****************************************************************************
*****************************************************************************/
inline void halSleepSynchronize(void)
{
  while (ASSR & ((1 << TCN2UB) | (1 << OCR2AUB) | (1 << OCR2BUB) | (1 << TCR2AUB) | (1 << TCR2BUB)));
     2ee:	80 91 b6 00 	lds	r24, 0x00B6
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	8f 71       	andi	r24, 0x1F	; 31
     2f6:	90 70       	andi	r25, 0x00	; 0
     2f8:	00 97       	sbiw	r24, 0x00	; 0
     2fa:	c9 f7       	brne	.-14     	; 0x2ee <HAL_Sleep+0xa4>
      halSleepSynchronize();
      TIMSK2 = 0;
      TCCR2B = 0;
      GTCCR |= (1 << PSRASY);
      halSleepSynchronize();
      ASSR &= ~(1 << AS2);
     2fc:	80 91 b6 00 	lds	r24, 0x00B6
     300:	8f 7d       	andi	r24, 0xDF	; 223
     302:	80 93 b6 00 	sts	0x00B6, r24
      return;
     306:	1d c0       	rjmp	.+58     	; 0x342 <HAL_Sleep+0xf8>
    }

    TIMSK2 |= (1 << OCIE2A);
     308:	20 91 70 00 	lds	r18, 0x0070
     30c:	22 60       	ori	r18, 0x02	; 2
     30e:	20 93 70 00 	sts	0x0070, r18

/*****************************************************************************
*****************************************************************************/
inline void halSleepSynchronize(void)
{
  while (ASSR & ((1 << TCN2UB) | (1 << OCR2AUB) | (1 << OCR2BUB) | (1 << TCR2AUB) | (1 << TCR2BUB)));
     312:	20 91 b6 00 	lds	r18, 0x00B6
     316:	30 e0       	ldi	r19, 0x00	; 0
     318:	2f 71       	andi	r18, 0x1F	; 31
     31a:	30 70       	andi	r19, 0x00	; 0
     31c:	21 15       	cp	r18, r1
     31e:	31 05       	cpc	r19, r1
     320:	c1 f7       	brne	.-16     	; 0x312 <HAL_Sleep+0xc8>

    TIMSK2 |= (1 << OCIE2A);

    halSleepSynchronize();

    SMCR = (1 << SM1) | (1 << SM0) | (1 << SE); // power-save
     322:	43 bf       	out	0x33, r20	; 51
    asm("sleep");
     324:	88 95       	sleep
    SMCR = 0;
     326:	13 be       	out	0x33, r1	; 51

    bool event;

    ATOMIC_SECTION_ENTER
     328:	3f b7       	in	r19, 0x3f	; 63
     32a:	f8 94       	cli
      event = halSleepTimerEvent;
     32c:	20 91 10 02 	lds	r18, 0x0210
    ATOMIC_SECTION_LEAVE
     330:	3f bf       	out	0x3f, r19	; 63

    if (event)
     332:	22 23       	and	r18, r18
     334:	09 f4       	brne	.+2      	; 0x338 <HAL_Sleep+0xee>
     336:	c1 cf       	rjmp	.-126    	; 0x2ba <HAL_Sleep+0x70>
    {
      if (integer > 0)
     338:	00 97       	sbiw	r24, 0x00	; 0
     33a:	09 f4       	brne	.+2      	; 0x33e <HAL_Sleep+0xf4>
     33c:	bd cf       	rjmp	.-134    	; 0x2b8 <HAL_Sleep+0x6e>
        integer--;
     33e:	01 97       	sbiw	r24, 0x01	; 1
     340:	bc cf       	rjmp	.-136    	; 0x2ba <HAL_Sleep+0x70>
    else
    {
      // TODO: wakeup from some other source
    }
  }
}
     342:	1f 91       	pop	r17
     344:	0f 91       	pop	r16
     346:	08 95       	ret

00000348 <__vector_13>:

/*****************************************************************************
*****************************************************************************/
ISR(TIMER2_COMPA_vect)
{
     348:	1f 92       	push	r1
     34a:	0f 92       	push	r0
     34c:	0f b6       	in	r0, 0x3f	; 63
     34e:	0f 92       	push	r0
     350:	11 24       	eor	r1, r1
     352:	8f 93       	push	r24
  halSleepTimerEvent = true;
     354:	81 e0       	ldi	r24, 0x01	; 1
     356:	80 93 10 02 	sts	0x0210, r24
}
     35a:	8f 91       	pop	r24
     35c:	0f 90       	pop	r0
     35e:	0f be       	out	0x3f, r0	; 63
     360:	0f 90       	pop	r0
     362:	1f 90       	pop	r1
     364:	18 95       	reti

00000366 <HAL_TimerInit>:

/*****************************************************************************
*****************************************************************************/
void HAL_TimerInit(void)
{
  halTimerIrqCount = 0;
     366:	10 92 9e 07 	sts	0x079E, r1

  OCR4A = ((F_CPU / 1000ul) / TIMER_PRESCALER) * HAL_TIMER_INTERVAL;
     36a:	80 e1       	ldi	r24, 0x10	; 16
     36c:	97 e2       	ldi	r25, 0x27	; 39
     36e:	90 93 a9 00 	sts	0x00A9, r25
     372:	80 93 a8 00 	sts	0x00A8, r24
  TCCR4B = (1 << WGM12);              // CTC mode
     376:	e1 ea       	ldi	r30, 0xA1	; 161
     378:	f0 e0       	ldi	r31, 0x00	; 0
     37a:	88 e0       	ldi	r24, 0x08	; 8
     37c:	80 83       	st	Z, r24
  TCCR4B |= (1 << CS11);              // Prescaler 8
     37e:	80 81       	ld	r24, Z
     380:	82 60       	ori	r24, 0x02	; 2
     382:	80 83       	st	Z, r24
  TIMSK4 |= (1 << OCIE4A);            // Enable TC4 interrupt
     384:	e2 e7       	ldi	r30, 0x72	; 114
     386:	f0 e0       	ldi	r31, 0x00	; 0
     388:	80 81       	ld	r24, Z
     38a:	82 60       	ori	r24, 0x02	; 2
     38c:	80 83       	st	Z, r24
}
     38e:	08 95       	ret

00000390 <__vector_42>:
}

/*****************************************************************************
*****************************************************************************/
ISR(TIMER4_COMPA_vect)
{
     390:	1f 92       	push	r1
     392:	0f 92       	push	r0
     394:	0f b6       	in	r0, 0x3f	; 63
     396:	0f 92       	push	r0
     398:	11 24       	eor	r1, r1
     39a:	8f 93       	push	r24
  halTimerIrqCount++;
     39c:	80 91 9e 07 	lds	r24, 0x079E
     3a0:	8f 5f       	subi	r24, 0xFF	; 255
     3a2:	80 93 9e 07 	sts	0x079E, r24
}
     3a6:	8f 91       	pop	r24
     3a8:	0f 90       	pop	r0
     3aa:	0f be       	out	0x3f, r0	; 63
     3ac:	0f 90       	pop	r0
     3ae:	1f 90       	pop	r1
     3b0:	18 95       	reti

000003b2 <__vector_43>:

/*****************************************************************************
*****************************************************************************/
ISR(TIMER4_COMPB_vect)
{
     3b2:	1f 92       	push	r1
     3b4:	0f 92       	push	r0
     3b6:	0f b6       	in	r0, 0x3f	; 63
     3b8:	0f 92       	push	r0
     3ba:	11 24       	eor	r1, r1
     3bc:	8f 93       	push	r24
  halTimerDelayInt = 1;
     3be:	81 e0       	ldi	r24, 0x01	; 1
     3c0:	80 93 11 02 	sts	0x0211, r24
}
     3c4:	8f 91       	pop	r24
     3c6:	0f 90       	pop	r0
     3c8:	0f be       	out	0x3f, r0	; 63
     3ca:	0f 90       	pop	r0
     3cc:	1f 90       	pop	r1
     3ce:	18 95       	reti

000003d0 <HAL_UartInit>:
static volatile bool newData;

/*****************************************************************************
*****************************************************************************/
void HAL_UartInit(uint32_t baudrate)
{
     3d0:	0f 93       	push	r16
     3d2:	1f 93       	push	r17
     3d4:	9b 01       	movw	r18, r22
     3d6:	ac 01       	movw	r20, r24
  uint32_t brr = ((uint32_t)F_CPU * 2) / (16 * baudrate) - 1;
     3d8:	e4 e0       	ldi	r30, 0x04	; 4
     3da:	22 0f       	add	r18, r18
     3dc:	33 1f       	adc	r19, r19
     3de:	44 1f       	adc	r20, r20
     3e0:	55 1f       	adc	r21, r21
     3e2:	ea 95       	dec	r30
     3e4:	d1 f7       	brne	.-12     	; 0x3da <HAL_UartInit+0xa>
     3e6:	60 e0       	ldi	r22, 0x00	; 0
     3e8:	74 e2       	ldi	r23, 0x24	; 36
     3ea:	84 ef       	ldi	r24, 0xF4	; 244
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <__udivmodsi4>
     3f2:	89 01       	movw	r16, r18
     3f4:	9a 01       	movw	r18, r20
     3f6:	01 50       	subi	r16, 0x01	; 1
     3f8:	10 40       	sbci	r17, 0x00	; 0
     3fa:	20 40       	sbci	r18, 0x00	; 0
     3fc:	30 40       	sbci	r19, 0x00	; 0

  UBRRxH = (brr >> 8) & 0xff;
     3fe:	bb 27       	eor	r27, r27
     400:	a3 2f       	mov	r26, r19
     402:	92 2f       	mov	r25, r18
     404:	81 2f       	mov	r24, r17
     406:	80 93 c5 00 	sts	0x00C5, r24
  UBRRxL = (brr & 0xff);
     40a:	00 93 c4 00 	sts	0x00C4, r16
  UCSRxA = (1 << U2X1);
     40e:	82 e0       	ldi	r24, 0x02	; 2
     410:	80 93 c0 00 	sts	0x00C0, r24
  UCSRxB = (1 << TXEN1) | (1 << RXEN1) | (1 << RXCIE1);
     414:	88 e9       	ldi	r24, 0x98	; 152
     416:	80 93 c1 00 	sts	0x00C1, r24
  UCSRxC = (3 << UCSZ10);
     41a:	86 e0       	ldi	r24, 0x06	; 6
     41c:	80 93 c2 00 	sts	0x00C2, r24

  txFifo.data = txData;
     420:	88 e2       	ldi	r24, 0x28	; 40
     422:	92 e0       	ldi	r25, 0x02	; 2
     424:	90 93 27 02 	sts	0x0227, r25
     428:	80 93 26 02 	sts	0x0226, r24
  txFifo.size = HAL_UART_TX_FIFO_SIZE;
     42c:	84 e6       	ldi	r24, 0x64	; 100
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	90 93 23 02 	sts	0x0223, r25
     434:	80 93 22 02 	sts	0x0222, r24
  txFifo.bytes = 0;
     438:	10 92 25 02 	sts	0x0225, r1
     43c:	10 92 24 02 	sts	0x0224, r1
  txFifo.head = 0;
     440:	ee e1       	ldi	r30, 0x1E	; 30
     442:	f2 e0       	ldi	r31, 0x02	; 2
     444:	11 82       	std	Z+1, r1	; 0x01
     446:	10 82       	st	Z, r1
  txFifo.tail = 0;
     448:	13 82       	std	Z+3, r1	; 0x03
     44a:	12 82       	std	Z+2, r1	; 0x02

  rxFifo.data = rxData;
     44c:	8c e1       	ldi	r24, 0x1C	; 28
     44e:	92 e0       	ldi	r25, 0x02	; 2
     450:	2d e8       	ldi	r18, 0x8D	; 141
     452:	32 e0       	ldi	r19, 0x02	; 2
     454:	30 93 1d 02 	sts	0x021D, r19
     458:	20 93 1c 02 	sts	0x021C, r18
  rxFifo.size = HAL_UART_RX_FIFO_SIZE;
     45c:	fc 01       	movw	r30, r24
     45e:	34 97       	sbiw	r30, 0x04	; 4
     460:	21 e0       	ldi	r18, 0x01	; 1
     462:	30 e0       	ldi	r19, 0x00	; 0
     464:	31 83       	std	Z+1, r19	; 0x01
     466:	20 83       	st	Z, r18
  rxFifo.bytes = 0;
     468:	fc 01       	movw	r30, r24
     46a:	32 97       	sbiw	r30, 0x02	; 2
     46c:	11 82       	std	Z+1, r1	; 0x01
     46e:	10 82       	st	Z, r1
  rxFifo.head = 0;
     470:	fc 01       	movw	r30, r24
     472:	38 97       	sbiw	r30, 0x08	; 8
     474:	11 82       	std	Z+1, r1	; 0x01
     476:	10 82       	st	Z, r1
  rxFifo.tail = 0;
     478:	13 82       	std	Z+3, r1	; 0x03
     47a:	12 82       	std	Z+2, r1	; 0x02

  udrEmpty = true;
     47c:	81 e0       	ldi	r24, 0x01	; 1
     47e:	80 93 13 02 	sts	0x0213, r24
  newData = false;
     482:	10 92 12 02 	sts	0x0212, r1
}
     486:	1f 91       	pop	r17
     488:	0f 91       	pop	r16
     48a:	08 95       	ret

0000048c <HAL_UartWriteByte>:

/*****************************************************************************
*****************************************************************************/
void HAL_UartWriteByte(uint8_t byte)
{
  if (txFifo.bytes == txFifo.size)
     48c:	60 91 24 02 	lds	r22, 0x0224
     490:	70 91 25 02 	lds	r23, 0x0225
     494:	40 91 22 02 	lds	r20, 0x0222
     498:	50 91 23 02 	lds	r21, 0x0223
     49c:	64 17       	cp	r22, r20
     49e:	75 07       	cpc	r23, r21
     4a0:	f1 f0       	breq	.+60     	; 0x4de <HAL_UartWriteByte+0x52>
    return;

  txFifo.data[txFifo.tail++] = byte;
     4a2:	20 91 20 02 	lds	r18, 0x0220
     4a6:	30 91 21 02 	lds	r19, 0x0221
     4aa:	e0 91 26 02 	lds	r30, 0x0226
     4ae:	f0 91 27 02 	lds	r31, 0x0227
     4b2:	e2 0f       	add	r30, r18
     4b4:	f3 1f       	adc	r31, r19
     4b6:	80 83       	st	Z, r24
     4b8:	2f 5f       	subi	r18, 0xFF	; 255
     4ba:	3f 4f       	sbci	r19, 0xFF	; 255
     4bc:	30 93 21 02 	sts	0x0221, r19
     4c0:	20 93 20 02 	sts	0x0220, r18
  if (txFifo.tail == txFifo.size)
     4c4:	24 17       	cp	r18, r20
     4c6:	35 07       	cpc	r19, r21
     4c8:	21 f4       	brne	.+8      	; 0x4d2 <HAL_UartWriteByte+0x46>
    txFifo.tail = 0;
     4ca:	10 92 21 02 	sts	0x0221, r1
     4ce:	10 92 20 02 	sts	0x0220, r1
  txFifo.bytes++;
     4d2:	6f 5f       	subi	r22, 0xFF	; 255
     4d4:	7f 4f       	sbci	r23, 0xFF	; 255
     4d6:	70 93 25 02 	sts	0x0225, r23
     4da:	60 93 24 02 	sts	0x0224, r22
     4de:	08 95       	ret

000004e0 <HAL_UartReadByte>:
uint8_t HAL_UartReadByte(void)
{
  uint8_t byte;

  PRAGMA(diag_suppress=Pa082);
  ATOMIC_SECTION_ENTER
     4e0:	9f b7       	in	r25, 0x3f	; 63
     4e2:	f8 94       	cli
    byte = rxFifo.data[rxFifo.head++];
     4e4:	e0 91 1c 02 	lds	r30, 0x021C
     4e8:	f0 91 1d 02 	lds	r31, 0x021D
     4ec:	20 91 14 02 	lds	r18, 0x0214
     4f0:	30 91 15 02 	lds	r19, 0x0215
     4f4:	e2 0f       	add	r30, r18
     4f6:	f3 1f       	adc	r31, r19
     4f8:	80 81       	ld	r24, Z
     4fa:	2f 5f       	subi	r18, 0xFF	; 255
     4fc:	3f 4f       	sbci	r19, 0xFF	; 255
     4fe:	30 93 15 02 	sts	0x0215, r19
     502:	20 93 14 02 	sts	0x0214, r18
    if (rxFifo.head == rxFifo.size)
     506:	40 91 14 02 	lds	r20, 0x0214
     50a:	50 91 15 02 	lds	r21, 0x0215
     50e:	20 91 18 02 	lds	r18, 0x0218
     512:	30 91 19 02 	lds	r19, 0x0219
     516:	42 17       	cp	r20, r18
     518:	53 07       	cpc	r21, r19
     51a:	21 f4       	brne	.+8      	; 0x524 <HAL_UartReadByte+0x44>
      rxFifo.head = 0;
     51c:	10 92 15 02 	sts	0x0215, r1
     520:	10 92 14 02 	sts	0x0214, r1
    rxFifo.bytes--;
     524:	20 91 1a 02 	lds	r18, 0x021A
     528:	30 91 1b 02 	lds	r19, 0x021B
     52c:	21 50       	subi	r18, 0x01	; 1
     52e:	30 40       	sbci	r19, 0x00	; 0
     530:	30 93 1b 02 	sts	0x021B, r19
     534:	20 93 1a 02 	sts	0x021A, r18
  ATOMIC_SECTION_LEAVE
     538:	9f bf       	out	0x3f, r25	; 63
  PRAGMA(diag_default=Pa082);

  return byte;
}
     53a:	08 95       	ret

0000053c <__vector_26>:

/*****************************************************************************
*****************************************************************************/
ISR(USARTx_UDRE_vect)
{
     53c:	1f 92       	push	r1
     53e:	0f 92       	push	r0
     540:	0f b6       	in	r0, 0x3f	; 63
     542:	0f 92       	push	r0
     544:	0b b6       	in	r0, 0x3b	; 59
     546:	0f 92       	push	r0
     548:	11 24       	eor	r1, r1
     54a:	8f 93       	push	r24
     54c:	ef 93       	push	r30
     54e:	ff 93       	push	r31
  udrEmpty = true;
     550:	81 e0       	ldi	r24, 0x01	; 1
     552:	80 93 13 02 	sts	0x0213, r24
  UCSRxB &= ~(1 << UDRIE1);
     556:	e1 ec       	ldi	r30, 0xC1	; 193
     558:	f0 e0       	ldi	r31, 0x00	; 0
     55a:	80 81       	ld	r24, Z
     55c:	8f 7d       	andi	r24, 0xDF	; 223
     55e:	80 83       	st	Z, r24
}
     560:	ff 91       	pop	r31
     562:	ef 91       	pop	r30
     564:	8f 91       	pop	r24
     566:	0f 90       	pop	r0
     568:	0b be       	out	0x3b, r0	; 59
     56a:	0f 90       	pop	r0
     56c:	0f be       	out	0x3f, r0	; 63
     56e:	0f 90       	pop	r0
     570:	1f 90       	pop	r1
     572:	18 95       	reti

00000574 <__vector_25>:

/*****************************************************************************
*****************************************************************************/
ISR(USARTx_RX_vect)
{
     574:	1f 92       	push	r1
     576:	0f 92       	push	r0
     578:	0f b6       	in	r0, 0x3f	; 63
     57a:	0f 92       	push	r0
     57c:	0b b6       	in	r0, 0x3b	; 59
     57e:	0f 92       	push	r0
     580:	11 24       	eor	r1, r1
     582:	2f 93       	push	r18
     584:	3f 93       	push	r19
     586:	4f 93       	push	r20
     588:	8f 93       	push	r24
     58a:	9f 93       	push	r25
     58c:	ef 93       	push	r30
     58e:	ff 93       	push	r31
  PRAGMA(diag_suppress=Pa082);

  uint8_t status = UCSRxA;
     590:	80 91 c0 00 	lds	r24, 0x00C0
  uint8_t byte = UDRx;
     594:	40 91 c6 00 	lds	r20, 0x00C6

  if (0 == (status & ((1 << FE1) | (1 << DOR1) | (1 << UPE1))))
     598:	8c 71       	andi	r24, 0x1C	; 28
     59a:	b1 f5       	brne	.+108    	; 0x608 <__vector_25+0x94>
  {
    if (rxFifo.bytes == rxFifo.size)
     59c:	20 91 1a 02 	lds	r18, 0x021A
     5a0:	30 91 1b 02 	lds	r19, 0x021B
     5a4:	80 91 18 02 	lds	r24, 0x0218
     5a8:	90 91 19 02 	lds	r25, 0x0219
     5ac:	28 17       	cp	r18, r24
     5ae:	39 07       	cpc	r19, r25
     5b0:	59 f1       	breq	.+86     	; 0x608 <__vector_25+0x94>
      return;

    rxFifo.data[rxFifo.tail++] = byte;
     5b2:	e0 91 1c 02 	lds	r30, 0x021C
     5b6:	f0 91 1d 02 	lds	r31, 0x021D
     5ba:	80 91 16 02 	lds	r24, 0x0216
     5be:	90 91 17 02 	lds	r25, 0x0217
     5c2:	e8 0f       	add	r30, r24
     5c4:	f9 1f       	adc	r31, r25
     5c6:	40 83       	st	Z, r20
     5c8:	01 96       	adiw	r24, 0x01	; 1
     5ca:	90 93 17 02 	sts	0x0217, r25
     5ce:	80 93 16 02 	sts	0x0216, r24
    if (rxFifo.tail == rxFifo.size)
     5d2:	20 91 16 02 	lds	r18, 0x0216
     5d6:	30 91 17 02 	lds	r19, 0x0217
     5da:	80 91 18 02 	lds	r24, 0x0218
     5de:	90 91 19 02 	lds	r25, 0x0219
     5e2:	28 17       	cp	r18, r24
     5e4:	39 07       	cpc	r19, r25
     5e6:	21 f4       	brne	.+8      	; 0x5f0 <__vector_25+0x7c>
      rxFifo.tail = 0;
     5e8:	10 92 17 02 	sts	0x0217, r1
     5ec:	10 92 16 02 	sts	0x0216, r1
    rxFifo.bytes++;
     5f0:	80 91 1a 02 	lds	r24, 0x021A
     5f4:	90 91 1b 02 	lds	r25, 0x021B
     5f8:	01 96       	adiw	r24, 0x01	; 1
     5fa:	90 93 1b 02 	sts	0x021B, r25
     5fe:	80 93 1a 02 	sts	0x021A, r24

    newData = true;
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	80 93 12 02 	sts	0x0212, r24
  }

  PRAGMA(diag_default=Pa082);
}
     608:	ff 91       	pop	r31
     60a:	ef 91       	pop	r30
     60c:	9f 91       	pop	r25
     60e:	8f 91       	pop	r24
     610:	4f 91       	pop	r20
     612:	3f 91       	pop	r19
     614:	2f 91       	pop	r18
     616:	0f 90       	pop	r0
     618:	0b be       	out	0x3b, r0	; 59
     61a:	0f 90       	pop	r0
     61c:	0f be       	out	0x3f, r0	; 63
     61e:	0f 90       	pop	r0
     620:	1f 90       	pop	r1
     622:	18 95       	reti

00000624 <HAL_UartTaskHandler>:

/*****************************************************************************
*****************************************************************************/
void HAL_UartTaskHandler(void)
{
  if (txFifo.bytes && udrEmpty)
     624:	80 91 24 02 	lds	r24, 0x0224
     628:	90 91 25 02 	lds	r25, 0x0225
     62c:	00 97       	sbiw	r24, 0x00	; 0
     62e:	89 f1       	breq	.+98     	; 0x692 <HAL_UartTaskHandler+0x6e>
     630:	20 91 13 02 	lds	r18, 0x0213
     634:	22 23       	and	r18, r18
     636:	69 f1       	breq	.+90     	; 0x692 <HAL_UartTaskHandler+0x6e>
  {
    uint8_t byte;

    byte = txFifo.data[txFifo.head++];
     638:	20 91 1e 02 	lds	r18, 0x021E
     63c:	30 91 1f 02 	lds	r19, 0x021F
     640:	e0 91 26 02 	lds	r30, 0x0226
     644:	f0 91 27 02 	lds	r31, 0x0227
     648:	e2 0f       	add	r30, r18
     64a:	f3 1f       	adc	r31, r19
     64c:	60 81       	ld	r22, Z
     64e:	2f 5f       	subi	r18, 0xFF	; 255
     650:	3f 4f       	sbci	r19, 0xFF	; 255
     652:	30 93 1f 02 	sts	0x021F, r19
     656:	20 93 1e 02 	sts	0x021E, r18
    if (txFifo.head == txFifo.size)
     65a:	40 91 22 02 	lds	r20, 0x0222
     65e:	50 91 23 02 	lds	r21, 0x0223
     662:	24 17       	cp	r18, r20
     664:	35 07       	cpc	r19, r21
     666:	21 f4       	brne	.+8      	; 0x670 <HAL_UartTaskHandler+0x4c>
      txFifo.head = 0;
     668:	10 92 1f 02 	sts	0x021F, r1
     66c:	10 92 1e 02 	sts	0x021E, r1
    txFifo.bytes--;
     670:	01 97       	sbiw	r24, 0x01	; 1
     672:	90 93 25 02 	sts	0x0225, r25
     676:	80 93 24 02 	sts	0x0224, r24

    ATOMIC_SECTION_ENTER
     67a:	9f b7       	in	r25, 0x3f	; 63
     67c:	f8 94       	cli
      UDRx = byte;
     67e:	60 93 c6 00 	sts	0x00C6, r22
      UCSRxB |= (1 << UDRIE1);
     682:	80 91 c1 00 	lds	r24, 0x00C1
     686:	80 62       	ori	r24, 0x20	; 32
     688:	80 93 c1 00 	sts	0x00C1, r24
      udrEmpty = false;
     68c:	10 92 13 02 	sts	0x0213, r1
    ATOMIC_SECTION_LEAVE
     690:	9f bf       	out	0x3f, r25	; 63

  {
    uint16_t bytes;
    bool new;

    ATOMIC_SECTION_ENTER
     692:	3f b7       	in	r19, 0x3f	; 63
     694:	f8 94       	cli
      new = newData;
     696:	20 91 12 02 	lds	r18, 0x0212
      newData = false;
     69a:	10 92 12 02 	sts	0x0212, r1
      bytes = rxFifo.bytes;
     69e:	80 91 1a 02 	lds	r24, 0x021A
     6a2:	90 91 1b 02 	lds	r25, 0x021B
    ATOMIC_SECTION_LEAVE
     6a6:	3f bf       	out	0x3f, r19	; 63

    if (new)
     6a8:	22 23       	and	r18, r18
     6aa:	11 f0       	breq	.+4      	; 0x6b0 <HAL_UartTaskHandler+0x8c>
      HAL_UartBytesReceived(bytes);
     6ac:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <HAL_UartBytesReceived>
     6b0:	08 95       	ret

000006b2 <NWK_Init>:

/*****************************************************************************
*****************************************************************************/
void NWK_Init(void)
{
  nwkIb.nwkSeqNum = 0;
     6b2:	10 92 a3 07 	sts	0x07A3, r1
  nwkIb.macSeqNum = 0;
     6b6:	10 92 a4 07 	sts	0x07A4, r1
  nwkIb.addr = 0;
     6ba:	ef e9       	ldi	r30, 0x9F	; 159
     6bc:	f7 e0       	ldi	r31, 0x07	; 7
     6be:	11 82       	std	Z+1, r1	; 0x01
     6c0:	10 82       	st	Z, r1

  for (uint8_t i = 0; i < NWK_MAX_ENDPOINTS_AMOUNT; i++)
    nwkIb.endpoint[i] = NULL;
     6c2:	17 82       	std	Z+7, r1	; 0x07
     6c4:	16 82       	std	Z+6, r1	; 0x06
     6c6:	11 86       	std	Z+9, r1	; 0x09
     6c8:	10 86       	std	Z+8, r1	; 0x08
     6ca:	13 86       	std	Z+11, r1	; 0x0b
     6cc:	12 86       	std	Z+10, r1	; 0x0a

  nwkTxInit();
     6ce:	0e 94 b3 08 	call	0x1166	; 0x1166 <nwkTxInit>
  nwkRxInit();
     6d2:	0e 94 4b 06 	call	0xc96	; 0xc96 <nwkRxInit>
  nwkFrameInit();
     6d6:	0e 94 66 04 	call	0x8cc	; 0x8cc <nwkFrameInit>
  nwkDataReqInit();
     6da:	0e 94 ca 03 	call	0x794	; 0x794 <nwkDataReqInit>

#ifdef NWK_ENABLE_ROUTING
  nwkRouteInit();
     6de:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <nwkRouteInit>
#endif

#ifdef NWK_ENABLE_SECURITY
  nwkSecurityInit();
#endif
}
     6e2:	08 95       	ret

000006e4 <NWK_SetAddr>:

/*****************************************************************************
*****************************************************************************/
void NWK_SetAddr(uint16_t addr)
{
  nwkIb.addr = addr;
     6e4:	90 93 a0 07 	sts	0x07A0, r25
     6e8:	80 93 9f 07 	sts	0x079F, r24
  PHY_SetShortAddr(addr);
     6ec:	0e 94 5f 0a 	call	0x14be	; 0x14be <PHY_SetShortAddr>
}
     6f0:	08 95       	ret

000006f2 <NWK_SetPanId>:

/*****************************************************************************
*****************************************************************************/
void NWK_SetPanId(uint16_t panId)
{
  nwkIb.panId = panId;
     6f2:	90 93 a2 07 	sts	0x07A2, r25
     6f6:	80 93 a1 07 	sts	0x07A1, r24
  PHY_SetPanId(panId);
     6fa:	0e 94 55 0a 	call	0x14aa	; 0x14aa <PHY_SetPanId>
}
     6fe:	08 95       	ret

00000700 <NWK_OpenEndpoint>:

/*****************************************************************************
*****************************************************************************/
void NWK_OpenEndpoint(uint8_t id, bool (*handler)(NWK_DataInd_t *ind))
{
  nwkIb.endpoint[id] = handler;
     700:	e8 2f       	mov	r30, r24
     702:	f0 e0       	ldi	r31, 0x00	; 0
     704:	ee 0f       	add	r30, r30
     706:	ff 1f       	adc	r31, r31
     708:	eb 55       	subi	r30, 0x5B	; 91
     70a:	f8 4f       	sbci	r31, 0xF8	; 248
     70c:	71 83       	std	Z+1, r23	; 0x01
     70e:	60 83       	st	Z, r22
}
     710:	08 95       	ret

00000712 <NWK_Busy>:

/*****************************************************************************
*****************************************************************************/
bool NWK_Busy(void)
{
  return nwkRxBusy() || nwkTxBusy() || nwkDataReqBusy() || PHY_Busy();
     712:	0e 94 a0 06 	call	0xd40	; 0xd40 <nwkRxBusy>
     716:	88 23       	and	r24, r24
     718:	59 f4       	brne	.+22     	; 0x730 <NWK_Busy+0x1e>
     71a:	0e 94 77 09 	call	0x12ee	; 0x12ee <nwkTxBusy>
     71e:	88 23       	and	r24, r24
     720:	39 f4       	brne	.+14     	; 0x730 <NWK_Busy+0x1e>
     722:	0e 94 cf 03 	call	0x79e	; 0x79e <nwkDataReqBusy>
     726:	88 23       	and	r24, r24
     728:	31 f4       	brne	.+12     	; 0x736 <NWK_Busy+0x24>
     72a:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <PHY_Busy>
     72e:	08 95       	ret
     730:	81 e0       	ldi	r24, 0x01	; 1
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	08 95       	ret
     736:	81 e0       	ldi	r24, 0x01	; 1
     738:	90 e0       	ldi	r25, 0x00	; 0
}
     73a:	08 95       	ret

0000073c <NWK_SleepReq>:

/*****************************************************************************
*****************************************************************************/
void NWK_SleepReq(void)
{
  PHY_Sleep();
     73c:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <PHY_Sleep>
}
     740:	08 95       	ret

00000742 <NWK_WakeupReq>:

/*****************************************************************************
*****************************************************************************/
void NWK_WakeupReq(void)
{
  PHY_Wakeup();
     742:	0e 94 85 0a 	call	0x150a	; 0x150a <PHY_Wakeup>
}
     746:	08 95       	ret

00000748 <NWK_TaskHandler>:

/*****************************************************************************
*****************************************************************************/
void NWK_TaskHandler(void)
{
  nwkRxTaskHandler();
     748:	0e 94 a7 06 	call	0xd4e	; 0xd4e <nwkRxTaskHandler>
  nwkTxTaskHandler();
     74c:	0e 94 9a 09 	call	0x1334	; 0x1334 <nwkTxTaskHandler>
  nwkDataReqTaskHandler();
     750:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <nwkDataReqTaskHandler>
#ifdef NWK_ENABLE_SECURITY
  nwkSecurityTaskHandler();
#endif
}
     754:	08 95       	ret

00000756 <nwkDataReqTxConf>:

/*****************************************************************************
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     756:	e0 91 8f 02 	lds	r30, 0x028F
     75a:	f0 91 90 02 	lds	r31, 0x0290
     75e:	15 c0       	rjmp	.+42     	; 0x78a <nwkDataReqTxConf+0x34>
  {
    if (req->frame == frame)
     760:	22 81       	ldd	r18, Z+2	; 0x02
     762:	33 81       	ldd	r19, Z+3	; 0x03
     764:	28 17       	cp	r18, r24
     766:	39 07       	cpc	r19, r25
     768:	69 f4       	brne	.+26     	; 0x784 <nwkDataReqTxConf+0x2e>
    {
      req->status = frame->tx.status;
     76a:	dc 01       	movw	r26, r24
     76c:	a1 58       	subi	r26, 0x81	; 129
     76e:	bf 4f       	sbci	r27, 0xFF	; 255
     770:	2c 91       	ld	r18, X
     772:	27 87       	std	Z+15, r18	; 0x0f
      req->control = frame->tx.control;
     774:	dc 01       	movw	r26, r24
     776:	ae 57       	subi	r26, 0x7E	; 126
     778:	bf 4f       	sbci	r27, 0xFF	; 255
     77a:	2c 91       	ld	r18, X
     77c:	20 8b       	std	Z+16, r18	; 0x10
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
     77e:	22 e0       	ldi	r18, 0x02	; 2
     780:	24 83       	std	Z+4, r18	; 0x04
      break;
     782:	05 c0       	rjmp	.+10     	; 0x78e <nwkDataReqTxConf+0x38>

/*****************************************************************************
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     784:	01 90       	ld	r0, Z+
     786:	f0 81       	ld	r31, Z
     788:	e0 2d       	mov	r30, r0
     78a:	30 97       	sbiw	r30, 0x00	; 0
     78c:	49 f7       	brne	.-46     	; 0x760 <nwkDataReqTxConf+0xa>
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
      break;
    }
  }

  nwkFrameFree(frame);
     78e:	0e 94 93 04 	call	0x926	; 0x926 <nwkFrameFree>
}
     792:	08 95       	ret

00000794 <nwkDataReqInit>:

/*****************************************************************************
*****************************************************************************/
void nwkDataReqInit(void)
{
  nwkDataReqQueue = NULL;
     794:	10 92 90 02 	sts	0x0290, r1
     798:	10 92 8f 02 	sts	0x028F, r1
}
     79c:	08 95       	ret

0000079e <nwkDataReqBusy>:

/*****************************************************************************
*****************************************************************************/
bool nwkDataReqBusy(void)
{
  return NULL != nwkDataReqQueue;
     79e:	81 e0       	ldi	r24, 0x01	; 1
     7a0:	20 91 8f 02 	lds	r18, 0x028F
     7a4:	30 91 90 02 	lds	r19, 0x0290
     7a8:	21 15       	cp	r18, r1
     7aa:	31 05       	cpc	r19, r1
     7ac:	09 f4       	brne	.+2      	; 0x7b0 <nwkDataReqBusy+0x12>
     7ae:	80 e0       	ldi	r24, 0x00	; 0
}
     7b0:	08 95       	ret

000007b2 <nwkDataReqTaskHandler>:

/*****************************************************************************
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
     7b2:	0f 93       	push	r16
     7b4:	1f 93       	push	r17
     7b6:	cf 93       	push	r28
     7b8:	df 93       	push	r29
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     7ba:	e0 91 8f 02 	lds	r30, 0x028F
     7be:	f0 91 90 02 	lds	r31, 0x0290
     7c2:	ef 01       	movw	r28, r30
     7c4:	7b c0       	rjmp	.+246    	; 0x8bc <nwkDataReqTaskHandler+0x10a>
  {
    switch (req->state)
     7c6:	8c 81       	ldd	r24, Y+4	; 0x04
     7c8:	88 23       	and	r24, r24
     7ca:	21 f0       	breq	.+8      	; 0x7d4 <nwkDataReqTaskHandler+0x22>
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	09 f0       	breq	.+2      	; 0x7d2 <nwkDataReqTaskHandler+0x20>
     7d0:	72 c0       	rjmp	.+228    	; 0x8b6 <nwkDataReqTaskHandler+0x104>
     7d2:	58 c0       	rjmp	.+176    	; 0x884 <nwkDataReqTaskHandler+0xd2>
#ifdef NWK_ENABLE_SECURITY
  if (req->options & NWK_OPT_ENABLE_SECURITY)
    size += NWK_SECURITY_MIC_SIZE;
#endif

  if (NULL == (frame = nwkFrameAlloc(size)))
     7d4:	8c 85       	ldd	r24, Y+12	; 0x0c
     7d6:	0e 94 6d 04 	call	0x8da	; 0x8da <nwkFrameAlloc>
     7da:	8c 01       	movw	r16, r24
     7dc:	00 97       	sbiw	r24, 0x00	; 0
     7de:	21 f4       	brne	.+8      	; 0x7e8 <nwkDataReqTaskHandler+0x36>
  {
    req->state = NWK_DATA_REQ_STATE_CONFIRM;
     7e0:	82 e0       	ldi	r24, 0x02	; 2
     7e2:	8c 83       	std	Y+4, r24	; 0x04
    req->status = NWK_OUT_OF_MEMORY_STATUS;
     7e4:	8f 87       	std	Y+15, r24	; 0x0f
     7e6:	6d c0       	rjmp	.+218    	; 0x8c2 <nwkDataReqTaskHandler+0x110>
    return;
  }

  req->frame = frame;
     7e8:	9b 83       	std	Y+3, r25	; 0x03
     7ea:	8a 83       	std	Y+2, r24	; 0x02
  req->state = NWK_DATA_REQ_STATE_WAIT_CONF;
     7ec:	81 e0       	ldi	r24, 0x01	; 1
     7ee:	8c 83       	std	Y+4, r24	; 0x04

  frame->tx.confirm = nwkDataReqTxConf;
     7f0:	f8 01       	movw	r30, r16
     7f2:	ed 57       	subi	r30, 0x7D	; 125
     7f4:	ff 4f       	sbci	r31, 0xFF	; 255
     7f6:	8b ea       	ldi	r24, 0xAB	; 171
     7f8:	93 e0       	ldi	r25, 0x03	; 3
     7fa:	91 83       	std	Z+1, r25	; 0x01
     7fc:	80 83       	st	Z, r24
  frame->tx.control = req->options & NWK_OPT_BROADCAST_PAN_ID ? NWK_TX_CONTROL_BROADCAST_PAN_ID : 0;
     7fe:	f8 01       	movw	r30, r16
     800:	ee 57       	subi	r30, 0x7E	; 126
     802:	ff 4f       	sbci	r31, 0xFF	; 255
     804:	99 85       	ldd	r25, Y+9	; 0x09
     806:	81 e0       	ldi	r24, 0x01	; 1
     808:	92 ff       	sbrs	r25, 2
     80a:	80 e0       	ldi	r24, 0x00	; 0
     80c:	80 83       	st	Z, r24

  frame->data.header.nwkFcf.ackRequest = req->options & NWK_OPT_ACK_REQUEST ? 1 : 0;
     80e:	99 85       	ldd	r25, Y+9	; 0x09
     810:	91 70       	andi	r25, 0x01	; 1
     812:	f8 01       	movw	r30, r16
     814:	83 85       	ldd	r24, Z+11	; 0x0b
     816:	8e 7f       	andi	r24, 0xFE	; 254
     818:	89 2b       	or	r24, r25
     81a:	83 87       	std	Z+11, r24	; 0x0b
#ifdef NWK_ENABLE_SECURITY
  frame->data.header.nwkFcf.securityEnabled = req->options & NWK_OPT_ENABLE_SECURITY ? 1 : 0;
#endif
  frame->data.header.nwkFcf.linkLocal = req->options & NWK_OPT_LINK_LOCAL ? 1 : 0;
     81c:	99 85       	ldd	r25, Y+9	; 0x09
     81e:	81 e0       	ldi	r24, 0x01	; 1
     820:	93 ff       	sbrs	r25, 3
     822:	80 e0       	ldi	r24, 0x00	; 0
     824:	98 2f       	mov	r25, r24
     826:	99 0f       	add	r25, r25
     828:	99 0f       	add	r25, r25
     82a:	f8 01       	movw	r30, r16
     82c:	83 85       	ldd	r24, Z+11	; 0x0b
     82e:	83 70       	andi	r24, 0x03	; 3
  frame->data.header.nwkFcf.reserved = 0;
     830:	89 2b       	or	r24, r25
     832:	83 87       	std	Z+11, r24	; 0x0b
  frame->data.header.nwkSeq = ++nwkIb.nwkSeqNum;
     834:	80 91 a3 07 	lds	r24, 0x07A3
     838:	8f 5f       	subi	r24, 0xFF	; 255
     83a:	80 93 a3 07 	sts	0x07A3, r24
     83e:	84 87       	std	Z+12, r24	; 0x0c
  frame->data.header.nwkSrcAddr = nwkIb.addr;
     840:	80 91 9f 07 	lds	r24, 0x079F
     844:	90 91 a0 07 	lds	r25, 0x07A0
     848:	96 87       	std	Z+14, r25	; 0x0e
     84a:	85 87       	std	Z+13, r24	; 0x0d
  frame->data.header.nwkDstAddr = req->dstAddr;
     84c:	8d 81       	ldd	r24, Y+5	; 0x05
     84e:	9e 81       	ldd	r25, Y+6	; 0x06
     850:	90 8b       	std	Z+16, r25	; 0x10
     852:	87 87       	std	Z+15, r24	; 0x0f
  frame->data.header.nwkSrcEndpoint = req->srcEndpoint;
     854:	98 85       	ldd	r25, Y+8	; 0x08
     856:	9f 70       	andi	r25, 0x0F	; 15
     858:	81 89       	ldd	r24, Z+17	; 0x11
     85a:	80 7f       	andi	r24, 0xF0	; 240
     85c:	89 2b       	or	r24, r25
     85e:	81 8b       	std	Z+17, r24	; 0x11
  frame->data.header.nwkDstEndpoint = req->dstEndpoint;
     860:	9f 81       	ldd	r25, Y+7	; 0x07
     862:	92 95       	swap	r25
     864:	90 7f       	andi	r25, 0xF0	; 240
     866:	8f 70       	andi	r24, 0x0F	; 15
     868:	89 2b       	or	r24, r25
     86a:	81 8b       	std	Z+17, r24	; 0x11

  memcpy(frame->data.payload, req->data, req->size);
     86c:	c8 01       	movw	r24, r16
     86e:	42 96       	adiw	r24, 0x12	; 18
     870:	4c 85       	ldd	r20, Y+12	; 0x0c
     872:	6a 85       	ldd	r22, Y+10	; 0x0a
     874:	7b 85       	ldd	r23, Y+11	; 0x0b
     876:	50 e0       	ldi	r21, 0x00	; 0
     878:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <memcpy>

  nwkTxFrame(frame);
     87c:	c8 01       	movw	r24, r16
     87e:	0e 94 ce 08 	call	0x119c	; 0x119c <nwkTxFrame>
     882:	1f c0       	rjmp	.+62     	; 0x8c2 <nwkDataReqTaskHandler+0x110>

/*****************************************************************************
*****************************************************************************/
static void nwkDataReqConfirm(NWK_DataReq_t *req)
{
  if (nwkDataReqQueue == req)
     884:	ec 17       	cp	r30, r28
     886:	fd 07       	cpc	r31, r29
     888:	41 f4       	brne	.+16     	; 0x89a <nwkDataReqTaskHandler+0xe8>
  {
    nwkDataReqQueue = nwkDataReqQueue->next;
     88a:	88 81       	ld	r24, Y
     88c:	99 81       	ldd	r25, Y+1	; 0x01
     88e:	90 93 90 02 	sts	0x0290, r25
     892:	80 93 8f 02 	sts	0x028F, r24
     896:	0a c0       	rjmp	.+20     	; 0x8ac <nwkDataReqTaskHandler+0xfa>
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
     898:	fc 01       	movw	r30, r24
     89a:	80 81       	ld	r24, Z
     89c:	91 81       	ldd	r25, Z+1	; 0x01
     89e:	8c 17       	cp	r24, r28
     8a0:	9d 07       	cpc	r25, r29
     8a2:	d1 f7       	brne	.-12     	; 0x898 <nwkDataReqTaskHandler+0xe6>
      prev = prev->next;
    prev->next = ((NWK_DataReq_t *)prev->next)->next;
     8a4:	88 81       	ld	r24, Y
     8a6:	99 81       	ldd	r25, Y+1	; 0x01
     8a8:	91 83       	std	Z+1, r25	; 0x01
     8aa:	80 83       	st	Z, r24
  }

  req->confirm(req);
     8ac:	ed 85       	ldd	r30, Y+13	; 0x0d
     8ae:	fe 85       	ldd	r31, Y+14	; 0x0e
     8b0:	ce 01       	movw	r24, r28
     8b2:	09 95       	icall
     8b4:	06 c0       	rjmp	.+12     	; 0x8c2 <nwkDataReqTaskHandler+0x110>

/*****************************************************************************
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     8b6:	09 90       	ld	r0, Y+
     8b8:	d8 81       	ld	r29, Y
     8ba:	c0 2d       	mov	r28, r0
     8bc:	20 97       	sbiw	r28, 0x00	; 0
     8be:	09 f0       	breq	.+2      	; 0x8c2 <nwkDataReqTaskHandler+0x110>
     8c0:	82 cf       	rjmp	.-252    	; 0x7c6 <nwkDataReqTaskHandler+0x14>

      default:
        break;
    };
  }
}
     8c2:	df 91       	pop	r29
     8c4:	cf 91       	pop	r28
     8c6:	1f 91       	pop	r17
     8c8:	0f 91       	pop	r16
     8ca:	08 95       	ret

000008cc <nwkFrameInit>:
/*****************************************************************************
*****************************************************************************/
void nwkFrameInit(void)
{
  for (int i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
     8cc:	10 92 91 02 	sts	0x0291, r1
     8d0:	10 92 16 03 	sts	0x0316, r1
     8d4:	10 92 9b 03 	sts	0x039B, r1
}
     8d8:	08 95       	ret

000008da <nwkFrameAlloc>:
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(uint8_t size)
{
  for (int i = 0; i < NWK_BUFFERS_AMOUNT; i++)
  {
    if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state)
     8da:	90 91 91 02 	lds	r25, 0x0291
     8de:	99 23       	and	r25, r25
     8e0:	59 f0       	breq	.+22     	; 0x8f8 <nwkFrameAlloc+0x1e>
     8e2:	90 91 16 03 	lds	r25, 0x0316
     8e6:	99 23       	and	r25, r25
     8e8:	51 f0       	breq	.+20     	; 0x8fe <nwkFrameAlloc+0x24>
     8ea:	90 91 9b 03 	lds	r25, 0x039B
     8ee:	99 23       	and	r25, r25
     8f0:	b9 f4       	brne	.+46     	; 0x920 <nwkFrameAlloc+0x46>

/*****************************************************************************
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(uint8_t size)
{
  for (int i = 0; i < NWK_BUFFERS_AMOUNT; i++)
     8f2:	22 e0       	ldi	r18, 0x02	; 2
     8f4:	30 e0       	ldi	r19, 0x00	; 0
     8f6:	05 c0       	rjmp	.+10     	; 0x902 <nwkFrameAlloc+0x28>
     8f8:	20 e0       	ldi	r18, 0x00	; 0
     8fa:	30 e0       	ldi	r19, 0x00	; 0
     8fc:	02 c0       	rjmp	.+4      	; 0x902 <nwkFrameAlloc+0x28>
     8fe:	21 e0       	ldi	r18, 0x01	; 1
     900:	30 e0       	ldi	r19, 0x00	; 0
  {
    if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state)
    {
      nwkFrameFrames[i].size = sizeof(NwkFrameHeader_t) + size;
     902:	45 e8       	ldi	r20, 0x85	; 133
     904:	50 e0       	ldi	r21, 0x00	; 0
     906:	24 9f       	mul	r18, r20
     908:	f0 01       	movw	r30, r0
     90a:	25 9f       	mul	r18, r21
     90c:	f0 0d       	add	r31, r0
     90e:	34 9f       	mul	r19, r20
     910:	f0 0d       	add	r31, r0
     912:	11 24       	eor	r1, r1
     914:	ef 56       	subi	r30, 0x6F	; 111
     916:	fd 4f       	sbci	r31, 0xFD	; 253
     918:	80 5f       	subi	r24, 0xF0	; 240
     91a:	81 83       	std	Z+1, r24	; 0x01
      return &nwkFrameFrames[i];
     91c:	cf 01       	movw	r24, r30
     91e:	08 95       	ret
    }
  }
  return NULL;
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	90 e0       	ldi	r25, 0x00	; 0
}
     924:	08 95       	ret

00000926 <nwkFrameFree>:

/*****************************************************************************
*****************************************************************************/
void nwkFrameFree(NwkFrame_t *frame)
{
  frame->state = NWK_FRAME_STATE_FREE;
     926:	fc 01       	movw	r30, r24
     928:	10 82       	st	Z, r1
}
     92a:	08 95       	ret

0000092c <nwkFrameByIndex>:

/*****************************************************************************
*****************************************************************************/
NwkFrame_t *nwkFrameByIndex(uint8_t i)
{
  return &nwkFrameFrames[i];
     92c:	48 2f       	mov	r20, r24
     92e:	50 e0       	ldi	r21, 0x00	; 0
     930:	25 e8       	ldi	r18, 0x85	; 133
     932:	30 e0       	ldi	r19, 0x00	; 0
     934:	42 9f       	mul	r20, r18
     936:	c0 01       	movw	r24, r0
     938:	43 9f       	mul	r20, r19
     93a:	90 0d       	add	r25, r0
     93c:	52 9f       	mul	r21, r18
     93e:	90 0d       	add	r25, r0
     940:	11 24       	eor	r1, r1
     942:	8f 56       	subi	r24, 0x6F	; 111
     944:	9d 4f       	sbci	r25, 0xFD	; 253
}
     946:	08 95       	ret

00000948 <nwkFrameCommandInit>:

/*****************************************************************************
*****************************************************************************/
void nwkFrameCommandInit(NwkFrame_t *frame)
{
     948:	fc 01       	movw	r30, r24
  frame->tx.status = NWK_SUCCESS_STATUS;
     94a:	dc 01       	movw	r26, r24
     94c:	a1 58       	subi	r26, 0x81	; 129
     94e:	bf 4f       	sbci	r27, 0xFF	; 255
     950:	1c 92       	st	X, r1
  frame->tx.timeout = 0;
     952:	dc 01       	movw	r26, r24
     954:	a0 58       	subi	r26, 0x80	; 128
     956:	bf 4f       	sbci	r27, 0xFF	; 255
     958:	1d 92       	st	X+, r1
     95a:	1c 92       	st	X, r1
  frame->tx.control = 0;
     95c:	dc 01       	movw	r26, r24
     95e:	ae 57       	subi	r26, 0x7E	; 126
     960:	bf 4f       	sbci	r27, 0xFF	; 255
     962:	1c 92       	st	X, r1
  frame->tx.confirm = NULL;
     964:	dc 01       	movw	r26, r24
     966:	ad 57       	subi	r26, 0x7D	; 125
     968:	bf 4f       	sbci	r27, 0xFF	; 255
     96a:	11 96       	adiw	r26, 0x01	; 1
     96c:	1c 92       	st	X, r1
     96e:	1e 92       	st	-X, r1

  frame->data.header.nwkFcf.ackRequest = 0;
  frame->data.header.nwkFcf.securityEnabled = 0;
  frame->data.header.nwkFcf.linkLocal = 0;
  frame->data.header.nwkFcf.reserved = 0;
     970:	13 86       	std	Z+11, r1	; 0x0b
  frame->data.header.nwkSeq = ++nwkIb.nwkSeqNum;
     972:	80 91 a3 07 	lds	r24, 0x07A3
     976:	8f 5f       	subi	r24, 0xFF	; 255
     978:	80 93 a3 07 	sts	0x07A3, r24
     97c:	84 87       	std	Z+12, r24	; 0x0c
  frame->data.header.nwkSrcAddr = nwkIb.addr;
     97e:	80 91 9f 07 	lds	r24, 0x079F
     982:	90 91 a0 07 	lds	r25, 0x07A0
     986:	96 87       	std	Z+14, r25	; 0x0e
     988:	85 87       	std	Z+13, r24	; 0x0d
  frame->data.header.nwkDstAddr = 0;
     98a:	10 8a       	std	Z+16, r1	; 0x10
     98c:	17 86       	std	Z+15, r1	; 0x0f
  frame->data.header.nwkSrcEndpoint = 0;
  frame->data.header.nwkDstEndpoint = 0;
     98e:	11 8a       	std	Z+17, r1	; 0x11
}
     990:	08 95       	ret

00000992 <nwkRouteFindRecord>:
      return &nwkRouteTable[i];

  if (NWK_ROUTE_UNKNOWN == dst)
    return &nwkRouteTable[NWK_ROUTE_TABLE_SIZE - 1];

  return NULL;
     992:	e0 e2       	ldi	r30, 0x20	; 32
     994:	f4 e0       	ldi	r31, 0x04	; 4

/*****************************************************************************
*****************************************************************************/
static NwkRouteTableRecord_t *nwkRouteFindRecord(uint16_t dst)
{
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
     996:	20 e0       	ldi	r18, 0x00	; 0
    if (nwkRouteTable[i].dst == dst)
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	48 17       	cp	r20, r24
     99e:	59 07       	cpc	r21, r25
     9a0:	59 f4       	brne	.+22     	; 0x9b8 <nwkRouteFindRecord+0x26>
      return &nwkRouteTable[i];
     9a2:	30 e0       	ldi	r19, 0x00	; 0
     9a4:	c9 01       	movw	r24, r18
     9a6:	88 0f       	add	r24, r24
     9a8:	99 1f       	adc	r25, r25
     9aa:	82 0f       	add	r24, r18
     9ac:	93 1f       	adc	r25, r19
     9ae:	88 0f       	add	r24, r24
     9b0:	99 1f       	adc	r25, r25
     9b2:	80 5e       	subi	r24, 0xE0	; 224
     9b4:	9b 4f       	sbci	r25, 0xFB	; 251
     9b6:	08 95       	ret

/*****************************************************************************
*****************************************************************************/
static NwkRouteTableRecord_t *nwkRouteFindRecord(uint16_t dst)
{
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
     9b8:	2f 5f       	subi	r18, 0xFF	; 255
     9ba:	36 96       	adiw	r30, 0x06	; 6
     9bc:	24 36       	cpi	r18, 0x64	; 100
     9be:	61 f7       	brne	.-40     	; 0x998 <nwkRouteFindRecord+0x6>
    if (nwkRouteTable[i].dst == dst)
      return &nwkRouteTable[i];

  if (NWK_ROUTE_UNKNOWN == dst)
     9c0:	2f ef       	ldi	r18, 0xFF	; 255
     9c2:	8f 3f       	cpi	r24, 0xFF	; 255
     9c4:	92 07       	cpc	r25, r18
     9c6:	19 f4       	brne	.+6      	; 0x9ce <nwkRouteFindRecord+0x3c>
    return &nwkRouteTable[NWK_ROUTE_TABLE_SIZE - 1];
     9c8:	82 e7       	ldi	r24, 0x72	; 114
     9ca:	96 e0       	ldi	r25, 0x06	; 6
     9cc:	08 95       	ret

  return NULL;
     9ce:	80 e0       	ldi	r24, 0x00	; 0
     9d0:	90 e0       	ldi	r25, 0x00	; 0
}
     9d2:	08 95       	ret

000009d4 <nwkRouteErrorConf>:

/*****************************************************************************
*****************************************************************************/
static void nwkRouteErrorConf(NwkFrame_t *frame)
{
  nwkFrameFree(frame);
     9d4:	0e 94 93 04 	call	0x926	; 0x926 <nwkFrameFree>
}
     9d8:	08 95       	ret

000009da <nwkRouteTxFrameConf>:

/*****************************************************************************
*****************************************************************************/
static void nwkRouteTxFrameConf(NwkFrame_t *frame)
{
  nwkFrameFree(frame);
     9da:	0e 94 93 04 	call	0x926	; 0x926 <nwkFrameFree>
}
     9de:	08 95       	ret

000009e0 <nwkRouteInit>:
static NwkRouteTableRecord_t nwkRouteTable[NWK_ROUTE_TABLE_SIZE];

/*****************************************************************************
*****************************************************************************/
void nwkRouteInit(void)
{
     9e0:	e0 e2       	ldi	r30, 0x20	; 32
     9e2:	f4 e0       	ldi	r31, 0x04	; 4
     9e4:	24 e6       	ldi	r18, 0x64	; 100
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
    nwkRouteTable[i].dst = NWK_ROUTE_UNKNOWN;
     9e6:	8f ef       	ldi	r24, 0xFF	; 255
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	91 83       	std	Z+1, r25	; 0x01
     9ec:	80 83       	st	Z, r24
     9ee:	21 50       	subi	r18, 0x01	; 1
     9f0:	36 96       	adiw	r30, 0x06	; 6

/*****************************************************************************
*****************************************************************************/
void nwkRouteInit(void)
{
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
     9f2:	22 23       	and	r18, r18
     9f4:	d1 f7       	brne	.-12     	; 0x9ea <nwkRouteInit+0xa>
    nwkRouteTable[i].dst = NWK_ROUTE_UNKNOWN;
}
     9f6:	08 95       	ret

000009f8 <nwkRouteRemove>:
*****************************************************************************/
void nwkRouteRemove(uint16_t dst)
{
  NwkRouteTableRecord_t *rec;

  rec = nwkRouteFindRecord(dst);
     9f8:	0e 94 c9 04 	call	0x992	; 0x992 <nwkRouteFindRecord>
  if (rec)
     9fc:	00 97       	sbiw	r24, 0x00	; 0
     9fe:	29 f0       	breq	.+10     	; 0xa0a <nwkRouteRemove+0x12>
    rec->dst = NWK_ROUTE_UNKNOWN;
     a00:	2f ef       	ldi	r18, 0xFF	; 255
     a02:	3f ef       	ldi	r19, 0xFF	; 255
     a04:	fc 01       	movw	r30, r24
     a06:	31 83       	std	Z+1, r19	; 0x01
     a08:	20 83       	st	Z, r18
     a0a:	08 95       	ret

00000a0c <nwkRouteFrameReceived>:
}

/*****************************************************************************
*****************************************************************************/
void nwkRouteFrameReceived(NwkFrame_t *frame)
{
     a0c:	ef 92       	push	r14
     a0e:	ff 92       	push	r15
     a10:	0f 93       	push	r16
     a12:	1f 93       	push	r17
     a14:	cf 93       	push	r28
     a16:	df 93       	push	r29
     a18:	ec 01       	movw	r28, r24
  NwkRouteTableRecord_t *rec;
  NwkFrameHeader_t *header = &frame->data.header;

  if ((header->macSrcAddr & NWK_ROUTE_TRANSIT_MASK) &&
     a1a:	09 85       	ldd	r16, Y+9	; 0x09
     a1c:	1a 85       	ldd	r17, Y+10	; 0x0a
     a1e:	17 ff       	sbrs	r17, 7
     a20:	05 c0       	rjmp	.+10     	; 0xa2c <nwkRouteFrameReceived+0x20>
     a22:	8d 85       	ldd	r24, Y+13	; 0x0d
     a24:	9e 85       	ldd	r25, Y+14	; 0x0e
     a26:	08 17       	cp	r16, r24
     a28:	19 07       	cpc	r17, r25
     a2a:	51 f5       	brne	.+84     	; 0xa80 <nwkRouteFrameReceived+0x74>
      (header->macSrcAddr != header->nwkSrcAddr))
    return;

  if (0xffff == header->macDstPanId)
     a2c:	8d 81       	ldd	r24, Y+5	; 0x05
     a2e:	9e 81       	ldd	r25, Y+6	; 0x06
     a30:	2f ef       	ldi	r18, 0xFF	; 255
     a32:	8f 3f       	cpi	r24, 0xFF	; 255
     a34:	92 07       	cpc	r25, r18
     a36:	21 f1       	breq	.+72     	; 0xa80 <nwkRouteFrameReceived+0x74>
    return;

  rec = nwkRouteFindRecord(header->nwkSrcAddr);
     a38:	ed 84       	ldd	r14, Y+13	; 0x0d
     a3a:	fe 84       	ldd	r15, Y+14	; 0x0e
     a3c:	c7 01       	movw	r24, r14
     a3e:	0e 94 c9 04 	call	0x992	; 0x992 <nwkRouteFindRecord>
     a42:	fc 01       	movw	r30, r24
  if (rec)
     a44:	00 97       	sbiw	r24, 0x00	; 0
     a46:	69 f0       	breq	.+26     	; 0xa62 <nwkRouteFrameReceived+0x56>
  {
    if (rec->nextHop != header->macSrcAddr && frame->rx.lqi > rec->lqi)
     a48:	82 81       	ldd	r24, Z+2	; 0x02
     a4a:	93 81       	ldd	r25, Z+3	; 0x03
     a4c:	80 17       	cp	r24, r16
     a4e:	91 07       	cpc	r25, r17
     a50:	99 f0       	breq	.+38     	; 0xa78 <nwkRouteFrameReceived+0x6c>
     a52:	de 01       	movw	r26, r28
     a54:	a1 58       	subi	r26, 0x81	; 129
     a56:	bf 4f       	sbci	r27, 0xFF	; 255
     a58:	9c 91       	ld	r25, X
     a5a:	85 81       	ldd	r24, Z+5	; 0x05
     a5c:	89 17       	cp	r24, r25
     a5e:	60 f4       	brcc	.+24     	; 0xa78 <nwkRouteFrameReceived+0x6c>
     a60:	07 c0       	rjmp	.+14     	; 0xa70 <nwkRouteFrameReceived+0x64>
      rec->score = NWK_ROUTE_DEFAULT_SCORE;
    }
  }
  else
  {
    rec = nwkRouteFindRecord(NWK_ROUTE_UNKNOWN);
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	9f ef       	ldi	r25, 0xFF	; 255
     a66:	0e 94 c9 04 	call	0x992	; 0x992 <nwkRouteFindRecord>
     a6a:	fc 01       	movw	r30, r24

    rec->dst = header->nwkSrcAddr;
     a6c:	f1 82       	std	Z+1, r15	; 0x01
     a6e:	e0 82       	st	Z, r14
    rec->nextHop = header->macSrcAddr;
     a70:	13 83       	std	Z+3, r17	; 0x03
     a72:	02 83       	std	Z+2, r16	; 0x02
    rec->score = NWK_ROUTE_DEFAULT_SCORE;
     a74:	83 e0       	ldi	r24, 0x03	; 3
     a76:	84 83       	std	Z+4, r24	; 0x04
  }

  rec->lqi = frame->rx.lqi;
     a78:	c1 58       	subi	r28, 0x81	; 129
     a7a:	df 4f       	sbci	r29, 0xFF	; 255
     a7c:	88 81       	ld	r24, Y
     a7e:	85 83       	std	Z+5, r24	; 0x05
}
     a80:	df 91       	pop	r29
     a82:	cf 91       	pop	r28
     a84:	1f 91       	pop	r17
     a86:	0f 91       	pop	r16
     a88:	ff 90       	pop	r15
     a8a:	ef 90       	pop	r14
     a8c:	08 95       	ret

00000a8e <nwkRouteFrameSent>:

/*****************************************************************************
*****************************************************************************/
void nwkRouteFrameSent(NwkFrame_t *frame)
{
     a8e:	0f 93       	push	r16
     a90:	1f 93       	push	r17
     a92:	cf 93       	push	r28
     a94:	df 93       	push	r29
     a96:	00 d0       	rcall	.+0      	; 0xa98 <nwkRouteFrameSent+0xa>
     a98:	00 d0       	rcall	.+0      	; 0xa9a <nwkRouteFrameSent+0xc>
     a9a:	00 d0       	rcall	.+0      	; 0xa9c <nwkRouteFrameSent+0xe>
     a9c:	cd b7       	in	r28, 0x3d	; 61
     a9e:	de b7       	in	r29, 0x3e	; 62
     aa0:	8c 01       	movw	r16, r24
  NwkRouteTableRecord_t *rec;

  rec = nwkRouteFindRecord(frame->data.header.nwkDstAddr);
     aa2:	dc 01       	movw	r26, r24
     aa4:	1f 96       	adiw	r26, 0x0f	; 15
     aa6:	8d 91       	ld	r24, X+
     aa8:	9c 91       	ld	r25, X
     aaa:	50 97       	sbiw	r26, 0x10	; 16
     aac:	0e 94 c9 04 	call	0x992	; 0x992 <nwkRouteFindRecord>
     ab0:	fc 01       	movw	r30, r24
  if (NULL == rec)
     ab2:	00 97       	sbiw	r24, 0x00	; 0
     ab4:	d1 f1       	breq	.+116    	; 0xb2a <nwkRouteFrameSent+0x9c>
    return;

  if (NWK_SUCCESS_STATUS == frame->tx.status)
     ab6:	d8 01       	movw	r26, r16
     ab8:	a1 58       	subi	r26, 0x81	; 129
     aba:	bf 4f       	sbci	r27, 0xFF	; 255
     abc:	8c 91       	ld	r24, X
     abe:	88 23       	and	r24, r24
     ac0:	19 f4       	brne	.+6      	; 0xac8 <nwkRouteFrameSent+0x3a>
  {
    rec->score = NWK_ROUTE_DEFAULT_SCORE;
     ac2:	83 e0       	ldi	r24, 0x03	; 3
     ac4:	84 83       	std	Z+4, r24	; 0x04
     ac6:	0a c0       	rjmp	.+20     	; 0xadc <nwkRouteFrameSent+0x4e>
  }
  else
  {
    rec->score--;
     ac8:	84 81       	ldd	r24, Z+4	; 0x04
     aca:	81 50       	subi	r24, 0x01	; 1
     acc:	84 83       	std	Z+4, r24	; 0x04
    if (0 == rec->score)
     ace:	88 23       	and	r24, r24
     ad0:	29 f4       	brne	.+10     	; 0xadc <nwkRouteFrameSent+0x4e>
    {
      rec->dst = NWK_ROUTE_UNKNOWN;
     ad2:	8f ef       	ldi	r24, 0xFF	; 255
     ad4:	9f ef       	ldi	r25, 0xFF	; 255
     ad6:	91 83       	std	Z+1, r25	; 0x01
     ad8:	80 83       	st	Z, r24
      return;
     ada:	27 c0       	rjmp	.+78     	; 0xb2a <nwkRouteFrameSent+0x9c>
    }
  }

  if ((rec - &nwkRouteTable[0]) > 0)
     adc:	cf 01       	movw	r24, r30
     ade:	80 52       	subi	r24, 0x20	; 32
     ae0:	94 40       	sbci	r25, 0x04	; 4
     ae2:	86 30       	cpi	r24, 0x06	; 6
     ae4:	91 05       	cpc	r25, r1
     ae6:	0c f1       	brlt	.+66     	; 0xb2a <nwkRouteFrameSent+0x9c>
  {
    NwkRouteTableRecord_t *prev = rec - 1;
    NwkRouteTableRecord_t tmp;

    tmp = *prev;
     ae8:	ce 01       	movw	r24, r28
     aea:	01 96       	adiw	r24, 0x01	; 1
     aec:	af 01       	movw	r20, r30
     aee:	46 50       	subi	r20, 0x06	; 6
     af0:	50 40       	sbci	r21, 0x00	; 0
     af2:	26 e0       	ldi	r18, 0x06	; 6
     af4:	da 01       	movw	r26, r20
     af6:	0d 90       	ld	r0, X+
     af8:	ad 01       	movw	r20, r26
     afa:	dc 01       	movw	r26, r24
     afc:	0d 92       	st	X+, r0
     afe:	cd 01       	movw	r24, r26
     b00:	21 50       	subi	r18, 0x01	; 1
     b02:	c1 f7       	brne	.-16     	; 0xaf4 <nwkRouteFrameSent+0x66>
    *prev = *rec;
     b04:	cf 01       	movw	r24, r30
     b06:	06 97       	sbiw	r24, 0x06	; 6
     b08:	af 01       	movw	r20, r30
     b0a:	26 e0       	ldi	r18, 0x06	; 6
     b0c:	da 01       	movw	r26, r20
     b0e:	0d 90       	ld	r0, X+
     b10:	ad 01       	movw	r20, r26
     b12:	dc 01       	movw	r26, r24
     b14:	0d 92       	st	X+, r0
     b16:	cd 01       	movw	r24, r26
     b18:	21 50       	subi	r18, 0x01	; 1
     b1a:	c1 f7       	brne	.-16     	; 0xb0c <nwkRouteFrameSent+0x7e>
    *rec = tmp;
     b1c:	de 01       	movw	r26, r28
     b1e:	11 96       	adiw	r26, 0x01	; 1
     b20:	86 e0       	ldi	r24, 0x06	; 6
     b22:	0d 90       	ld	r0, X+
     b24:	01 92       	st	Z+, r0
     b26:	81 50       	subi	r24, 0x01	; 1
     b28:	e1 f7       	brne	.-8      	; 0xb22 <nwkRouteFrameSent+0x94>
  }
}
     b2a:	26 96       	adiw	r28, 0x06	; 6
     b2c:	0f b6       	in	r0, 0x3f	; 63
     b2e:	f8 94       	cli
     b30:	de bf       	out	0x3e, r29	; 62
     b32:	0f be       	out	0x3f, r0	; 63
     b34:	cd bf       	out	0x3d, r28	; 61
     b36:	df 91       	pop	r29
     b38:	cf 91       	pop	r28
     b3a:	1f 91       	pop	r17
     b3c:	0f 91       	pop	r16
     b3e:	08 95       	ret

00000b40 <nwkRouteNextHop>:

/*****************************************************************************
*****************************************************************************/
uint16_t nwkRouteNextHop(uint16_t dst)
{
  if (0xffff == dst)
     b40:	2f ef       	ldi	r18, 0xFF	; 255
     b42:	8f 3f       	cpi	r24, 0xFF	; 255
     b44:	92 07       	cpc	r25, r18
     b46:	f1 f0       	breq	.+60     	; 0xb84 <nwkRouteNextHop+0x44>
     b48:	e0 e2       	ldi	r30, 0x20	; 32
     b4a:	f4 e0       	ldi	r31, 0x04	; 4
     b4c:	40 e0       	ldi	r20, 0x00	; 0
     b4e:	50 e0       	ldi	r21, 0x00	; 0
    return NWK_ROUTE_UNKNOWN;

  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
    if (nwkRouteTable[i].dst == dst)
     b50:	20 81       	ld	r18, Z
     b52:	31 81       	ldd	r19, Z+1	; 0x01
     b54:	28 17       	cp	r18, r24
     b56:	39 07       	cpc	r19, r25
     b58:	61 f4       	brne	.+24     	; 0xb72 <nwkRouteNextHop+0x32>
      return nwkRouteTable[i].nextHop;
     b5a:	fa 01       	movw	r30, r20
     b5c:	ee 0f       	add	r30, r30
     b5e:	ff 1f       	adc	r31, r31
     b60:	e4 0f       	add	r30, r20
     b62:	f5 1f       	adc	r31, r21
     b64:	ee 0f       	add	r30, r30
     b66:	ff 1f       	adc	r31, r31
     b68:	e0 5e       	subi	r30, 0xE0	; 224
     b6a:	fb 4f       	sbci	r31, 0xFB	; 251
     b6c:	82 81       	ldd	r24, Z+2	; 0x02
     b6e:	93 81       	ldd	r25, Z+3	; 0x03
     b70:	08 95       	ret
     b72:	4f 5f       	subi	r20, 0xFF	; 255
     b74:	5f 4f       	sbci	r21, 0xFF	; 255
     b76:	36 96       	adiw	r30, 0x06	; 6
uint16_t nwkRouteNextHop(uint16_t dst)
{
  if (0xffff == dst)
    return NWK_ROUTE_UNKNOWN;

  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
     b78:	44 36       	cpi	r20, 0x64	; 100
     b7a:	51 05       	cpc	r21, r1
     b7c:	49 f7       	brne	.-46     	; 0xb50 <nwkRouteNextHop+0x10>
    if (nwkRouteTable[i].dst == dst)
      return nwkRouteTable[i].nextHop;

  return NWK_ROUTE_UNKNOWN;
     b7e:	8f ef       	ldi	r24, 0xFF	; 255
     b80:	9f ef       	ldi	r25, 0xFF	; 255
     b82:	08 95       	ret
/*****************************************************************************
*****************************************************************************/
uint16_t nwkRouteNextHop(uint16_t dst)
{
  if (0xffff == dst)
    return NWK_ROUTE_UNKNOWN;
     b84:	8f ef       	ldi	r24, 0xFF	; 255
     b86:	9f ef       	ldi	r25, 0xFF	; 255
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
    if (nwkRouteTable[i].dst == dst)
      return nwkRouteTable[i].nextHop;

  return NWK_ROUTE_UNKNOWN;
}
     b88:	08 95       	ret

00000b8a <nwkRouteFrame>:

/*****************************************************************************
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
     b8a:	cf 92       	push	r12
     b8c:	df 92       	push	r13
     b8e:	ef 92       	push	r14
     b90:	ff 92       	push	r15
     b92:	0f 93       	push	r16
     b94:	1f 93       	push	r17
     b96:	cf 93       	push	r28
     b98:	df 93       	push	r29
     b9a:	8c 01       	movw	r16, r24
  if (NWK_ROUTE_UNKNOWN != nwkRouteNextHop(frame->data.header.nwkDstAddr))
     b9c:	fc 01       	movw	r30, r24
     b9e:	c7 84       	ldd	r12, Z+15	; 0x0f
     ba0:	d0 88       	ldd	r13, Z+16	; 0x10
     ba2:	c6 01       	movw	r24, r12
     ba4:	0e 94 a0 05 	call	0xb40	; 0xb40 <nwkRouteNextHop>
     ba8:	ff ef       	ldi	r31, 0xFF	; 255
     baa:	8f 3f       	cpi	r24, 0xFF	; 255
     bac:	9f 07       	cpc	r25, r31
     bae:	81 f0       	breq	.+32     	; 0xbd0 <nwkRouteFrame+0x46>
  {
    frame->tx.confirm = nwkRouteTxFrameConf;
     bb0:	f8 01       	movw	r30, r16
     bb2:	ed 57       	subi	r30, 0x7D	; 125
     bb4:	ff 4f       	sbci	r31, 0xFF	; 255
     bb6:	8d ee       	ldi	r24, 0xED	; 237
     bb8:	94 e0       	ldi	r25, 0x04	; 4
     bba:	91 83       	std	Z+1, r25	; 0x01
     bbc:	80 83       	st	Z, r24
    frame->tx.control = NWK_TX_CONTROL_ROUTING;
     bbe:	f8 01       	movw	r30, r16
     bc0:	ee 57       	subi	r30, 0x7E	; 126
     bc2:	ff 4f       	sbci	r31, 0xFF	; 255
     bc4:	82 e0       	ldi	r24, 0x02	; 2
     bc6:	80 83       	st	Z, r24
    nwkTxFrame(frame);
     bc8:	c8 01       	movw	r24, r16
     bca:	0e 94 ce 08 	call	0x119c	; 0x119c <nwkTxFrame>
     bce:	20 c0       	rjmp	.+64     	; 0xc10 <nwkRouteFrame+0x86>
  }
  else
  {
    nwkRouteSendRouteError(frame->data.header.nwkSrcAddr, frame->data.header.nwkDstAddr);
     bd0:	f8 01       	movw	r30, r16
     bd2:	e5 84       	ldd	r14, Z+13	; 0x0d
     bd4:	f6 84       	ldd	r15, Z+14	; 0x0e
static void nwkRouteSendRouteError(uint16_t src, uint16_t dst)
{
  NwkFrame_t *frame;
  NwkRouteErrorCommand_t *command;

  if (NULL == (frame = nwkFrameAlloc(sizeof(NwkRouteErrorCommand_t))))
     bd6:	85 e0       	ldi	r24, 0x05	; 5
     bd8:	0e 94 6d 04 	call	0x8da	; 0x8da <nwkFrameAlloc>
     bdc:	ec 01       	movw	r28, r24
     bde:	00 97       	sbiw	r24, 0x00	; 0
     be0:	a1 f0       	breq	.+40     	; 0xc0a <nwkRouteFrame+0x80>
    return;

  nwkFrameCommandInit(frame);
     be2:	0e 94 a4 04 	call	0x948	; 0x948 <nwkFrameCommandInit>

  frame->tx.confirm = nwkRouteErrorConf;
     be6:	fe 01       	movw	r30, r28
     be8:	ed 57       	subi	r30, 0x7D	; 125
     bea:	ff 4f       	sbci	r31, 0xFF	; 255
     bec:	8a ee       	ldi	r24, 0xEA	; 234
     bee:	94 e0       	ldi	r25, 0x04	; 4
     bf0:	91 83       	std	Z+1, r25	; 0x01
     bf2:	80 83       	st	Z, r24

  frame->data.header.nwkDstAddr = src;
     bf4:	f8 8a       	std	Y+16, r15	; 0x10
     bf6:	ef 86       	std	Y+15, r14	; 0x0f

  command = (NwkRouteErrorCommand_t *)frame->data.payload;

  command->id = NWK_COMMAND_ROUTE_ERROR;
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	8a 8b       	std	Y+18, r24	; 0x12
  command->srcAddr = src;
     bfc:	fc 8a       	std	Y+20, r15	; 0x14
     bfe:	eb 8a       	std	Y+19, r14	; 0x13
  command->dstAddr = dst;
     c00:	de 8a       	std	Y+22, r13	; 0x16
     c02:	cd 8a       	std	Y+21, r12	; 0x15

  nwkTxFrame(frame);
     c04:	ce 01       	movw	r24, r28
     c06:	0e 94 ce 08 	call	0x119c	; 0x119c <nwkTxFrame>
    nwkTxFrame(frame);
  }
  else
  {
    nwkRouteSendRouteError(frame->data.header.nwkSrcAddr, frame->data.header.nwkDstAddr);
    nwkFrameFree(frame);
     c0a:	c8 01       	movw	r24, r16
     c0c:	0e 94 93 04 	call	0x926	; 0x926 <nwkFrameFree>
  }
}
     c10:	df 91       	pop	r29
     c12:	cf 91       	pop	r28
     c14:	1f 91       	pop	r17
     c16:	0f 91       	pop	r16
     c18:	ff 90       	pop	r15
     c1a:	ef 90       	pop	r14
     c1c:	df 90       	pop	r13
     c1e:	cf 90       	pop	r12
     c20:	08 95       	ret

00000c22 <nwkRouteErrorReceived>:
*****************************************************************************/
void nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkRouteErrorCommand_t *command = (NwkRouteErrorCommand_t *)ind->data;

  nwkRouteRemove(command->dstAddr);
     c22:	dc 01       	movw	r26, r24
     c24:	15 96       	adiw	r26, 0x05	; 5
     c26:	ed 91       	ld	r30, X+
     c28:	fc 91       	ld	r31, X
     c2a:	16 97       	sbiw	r26, 0x06	; 6
     c2c:	83 81       	ldd	r24, Z+3	; 0x03
     c2e:	94 81       	ldd	r25, Z+4	; 0x04
     c30:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <nwkRouteRemove>
}
     c34:	08 95       	ret

00000c36 <NWK_RouteNextHop>:

/*****************************************************************************
*****************************************************************************/
uint16_t NWK_RouteNextHop(uint16_t dst)
{
  return nwkRouteNextHop(dst);
     c36:	0e 94 a0 05 	call	0xb40	; 0xb40 <nwkRouteNextHop>
}
     c3a:	08 95       	ret

00000c3c <nwkRxSendAckConf>:

/*****************************************************************************
*****************************************************************************/
static void nwkRxSendAckConf(NwkFrame_t *frame)
{
  nwkFrameFree(frame);
     c3c:	0e 94 93 04 	call	0x926	; 0x926 <nwkFrameFree>
}
     c40:	08 95       	ret

00000c42 <nwkRxDuplicateRejectionTimerHandler>:
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    if (nwkRxDuplicateRejectionTable[i].ttl)
    {
      nwkRxDuplicateRejectionTable[i].ttl--;
      restart = true;
     c42:	ec e7       	ldi	r30, 0x7C	; 124
     c44:	f6 e0       	ldi	r31, 0x06	; 6
#endif

/*****************************************************************************
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
     c46:	4a e0       	ldi	r20, 0x0A	; 10
  bool restart = false;
     c48:	50 e0       	ldi	r21, 0x00	; 0

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    if (nwkRxDuplicateRejectionTable[i].ttl)
     c4a:	20 81       	ld	r18, Z
     c4c:	31 81       	ldd	r19, Z+1	; 0x01
     c4e:	21 15       	cp	r18, r1
     c50:	31 05       	cpc	r19, r1
     c52:	29 f0       	breq	.+10     	; 0xc5e <nwkRxDuplicateRejectionTimerHandler+0x1c>
    {
      nwkRxDuplicateRejectionTable[i].ttl--;
     c54:	21 50       	subi	r18, 0x01	; 1
     c56:	30 40       	sbci	r19, 0x00	; 0
     c58:	31 83       	std	Z+1, r19	; 0x01
     c5a:	20 83       	st	Z, r18
      restart = true;
     c5c:	51 e0       	ldi	r21, 0x01	; 1

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    if (nwkRxDuplicateRejectionTable[i].ttl)
    {
      nwkRxDuplicateRejectionTable[i].ttl--;
     c5e:	41 50       	subi	r20, 0x01	; 1
     c60:	35 96       	adiw	r30, 0x05	; 5
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
  bool restart = false;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
     c62:	44 23       	and	r20, r20
     c64:	91 f7       	brne	.-28     	; 0xc4a <nwkRxDuplicateRejectionTimerHandler+0x8>
      nwkRxDuplicateRejectionTable[i].ttl--;
      restart = true;
    }
  }

  if (restart)
     c66:	55 23       	and	r21, r21
     c68:	11 f0       	breq	.+4      	; 0xc6e <nwkRxDuplicateRejectionTimerHandler+0x2c>
    SYS_TimerStart(timer);
     c6a:	0e 94 11 0c 	call	0x1822	; 0x1822 <SYS_TimerStart>
     c6e:	08 95       	ret

00000c70 <nwkRxSeriveDataInd>:

/*****************************************************************************
*****************************************************************************/
static bool nwkRxSeriveDataInd(NWK_DataInd_t *ind)
{
  uint8_t cmd = ind->data[0];
     c70:	dc 01       	movw	r26, r24
     c72:	15 96       	adiw	r26, 0x05	; 5
     c74:	ed 91       	ld	r30, X+
     c76:	fc 91       	ld	r31, X
     c78:	16 97       	sbiw	r26, 0x06	; 6
     c7a:	20 81       	ld	r18, Z

  if (NWK_COMMAND_ACK == cmd)
     c7c:	22 23       	and	r18, r18
     c7e:	19 f4       	brne	.+6      	; 0xc86 <nwkRxSeriveDataInd+0x16>
    nwkTxAckReceived(ind);
     c80:	0e 94 53 09 	call	0x12a6	; 0x12a6 <nwkTxAckReceived>
     c84:	04 c0       	rjmp	.+8      	; 0xc8e <nwkRxSeriveDataInd+0x1e>
#ifdef NWK_ENABLE_ROUTING
  else if (NWK_COMMAND_ROUTE_ERROR == cmd)
     c86:	21 30       	cpi	r18, 0x01	; 1
     c88:	21 f4       	brne	.+8      	; 0xc92 <nwkRxSeriveDataInd+0x22>
    nwkRouteErrorReceived(ind);
     c8a:	0e 94 11 06 	call	0xc22	; 0xc22 <nwkRouteErrorReceived>
#endif
  else
    return false;

  return true;
     c8e:	81 e0       	ldi	r24, 0x01	; 1
     c90:	08 95       	ret
#ifdef NWK_ENABLE_ROUTING
  else if (NWK_COMMAND_ROUTE_ERROR == cmd)
    nwkRouteErrorReceived(ind);
#endif
  else
    return false;
     c92:	80 e0       	ldi	r24, 0x00	; 0

  return true;
}
     c94:	08 95       	ret

00000c96 <nwkRxInit>:
}

/*****************************************************************************
*****************************************************************************/
void nwkRxInit(void)
{
     c96:	ec e7       	ldi	r30, 0x7C	; 124
     c98:	f6 e0       	ldi	r31, 0x06	; 6
     c9a:	8a e0       	ldi	r24, 0x0A	; 10
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    nwkRxDuplicateRejectionTable[i].ttl = 0;
     c9c:	11 82       	std	Z+1, r1	; 0x01
     c9e:	10 82       	st	Z, r1
     ca0:	81 50       	subi	r24, 0x01	; 1
     ca2:	35 96       	adiw	r30, 0x05	; 5

/*****************************************************************************
*****************************************************************************/
void nwkRxInit(void)
{
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
     ca4:	88 23       	and	r24, r24
     ca6:	d1 f7       	brne	.-12     	; 0xc9c <nwkRxInit+0x6>
    nwkRxDuplicateRejectionTable[i].ttl = 0;

  nwkRxActiveFrames = 0;
     ca8:	10 92 ab 06 	sts	0x06AB, r1

  nwkRxDuplicateRejectionTimer.interval = NWK_RX_DUPLICATE_REJECTION_TIMER_INTERVAL;
     cac:	84 e1       	ldi	r24, 0x14	; 20
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	a0 e0       	ldi	r26, 0x00	; 0
     cb2:	b0 e0       	ldi	r27, 0x00	; 0
     cb4:	80 93 b2 06 	sts	0x06B2, r24
     cb8:	90 93 b3 06 	sts	0x06B3, r25
     cbc:	a0 93 b4 06 	sts	0x06B4, r26
     cc0:	b0 93 b5 06 	sts	0x06B5, r27
  nwkRxDuplicateRejectionTimer.mode = SYS_TIMER_INTERVAL_MODE;
     cc4:	10 92 b6 06 	sts	0x06B6, r1
  nwkRxDuplicateRejectionTimer.handler = nwkRxDuplicateRejectionTimerHandler;
     cc8:	81 e2       	ldi	r24, 0x21	; 33
     cca:	96 e0       	ldi	r25, 0x06	; 6
     ccc:	90 93 b8 06 	sts	0x06B8, r25
     cd0:	80 93 b7 06 	sts	0x06B7, r24

  NWK_OpenEndpoint(NWK_SERVICE_ENDPOINT_ID, nwkRxSeriveDataInd);
     cd4:	80 e0       	ldi	r24, 0x00	; 0
     cd6:	68 e3       	ldi	r22, 0x38	; 56
     cd8:	76 e0       	ldi	r23, 0x06	; 6
     cda:	0e 94 80 03 	call	0x700	; 0x700 <NWK_OpenEndpoint>
}
     cde:	08 95       	ret

00000ce0 <PHY_DataInd>:

/*****************************************************************************
*****************************************************************************/
void PHY_DataInd(PHY_DataInd_t *ind)
{
     ce0:	cf 93       	push	r28
     ce2:	df 93       	push	r29
     ce4:	ec 01       	movw	r28, r24
  NwkFrame_t *frame;

  if (0x88 != ind->data[1] || (0x61 != ind->data[0] && 0x41 != ind->data[0]) ||
     ce6:	e8 81       	ld	r30, Y
     ce8:	f9 81       	ldd	r31, Y+1	; 0x01
     cea:	81 81       	ldd	r24, Z+1	; 0x01
     cec:	88 38       	cpi	r24, 0x88	; 136
     cee:	29 f5       	brne	.+74     	; 0xd3a <PHY_DataInd+0x5a>
     cf0:	80 81       	ld	r24, Z
     cf2:	81 36       	cpi	r24, 0x61	; 97
     cf4:	11 f0       	breq	.+4      	; 0xcfa <PHY_DataInd+0x1a>
     cf6:	81 34       	cpi	r24, 0x41	; 65
     cf8:	01 f5       	brne	.+64     	; 0xd3a <PHY_DataInd+0x5a>
      ind->size < sizeof(NwkFrameHeader_t))
     cfa:	8a 81       	ldd	r24, Y+2	; 0x02
*****************************************************************************/
void PHY_DataInd(PHY_DataInd_t *ind)
{
  NwkFrame_t *frame;

  if (0x88 != ind->data[1] || (0x61 != ind->data[0] && 0x41 != ind->data[0]) ||
     cfc:	80 31       	cpi	r24, 0x10	; 16
     cfe:	e8 f0       	brcs	.+58     	; 0xd3a <PHY_DataInd+0x5a>
      ind->size < sizeof(NwkFrameHeader_t))
    return;

  if (NULL == (frame = nwkFrameAlloc(ind->size - sizeof(NwkFrameHeader_t))))
     d00:	80 51       	subi	r24, 0x10	; 16
     d02:	0e 94 6d 04 	call	0x8da	; 0x8da <nwkFrameAlloc>
     d06:	00 97       	sbiw	r24, 0x00	; 0
     d08:	c1 f0       	breq	.+48     	; 0xd3a <PHY_DataInd+0x5a>
    return;

  frame->state = NWK_RX_STATE_RECEIVED;
     d0a:	20 e2       	ldi	r18, 0x20	; 32
     d0c:	fc 01       	movw	r30, r24
     d0e:	20 83       	st	Z, r18
  frame->rx.lqi = ind->lqi;
     d10:	2b 81       	ldd	r18, Y+3	; 0x03
     d12:	e1 58       	subi	r30, 0x81	; 129
     d14:	ff 4f       	sbci	r31, 0xFF	; 255
     d16:	20 83       	st	Z, r18
  frame->rx.rssi = ind->rssi;
     d18:	2c 81       	ldd	r18, Y+4	; 0x04
     d1a:	fc 01       	movw	r30, r24
     d1c:	e0 58       	subi	r30, 0x80	; 128
     d1e:	ff 4f       	sbci	r31, 0xFF	; 255
     d20:	20 83       	st	Z, r18

  memcpy((uint8_t *)&frame->data, ind->data, ind->size);
     d22:	02 96       	adiw	r24, 0x02	; 2
     d24:	4a 81       	ldd	r20, Y+2	; 0x02
     d26:	68 81       	ld	r22, Y
     d28:	79 81       	ldd	r23, Y+1	; 0x01
     d2a:	50 e0       	ldi	r21, 0x00	; 0
     d2c:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <memcpy>

  ++nwkRxActiveFrames;
     d30:	80 91 ab 06 	lds	r24, 0x06AB
     d34:	8f 5f       	subi	r24, 0xFF	; 255
     d36:	80 93 ab 06 	sts	0x06AB, r24
}
     d3a:	df 91       	pop	r29
     d3c:	cf 91       	pop	r28
     d3e:	08 95       	ret

00000d40 <nwkRxBusy>:

/*****************************************************************************
*****************************************************************************/
bool nwkRxBusy(void)
{
  return nwkRxActiveFrames > 0;
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	90 91 ab 06 	lds	r25, 0x06AB
     d46:	99 23       	and	r25, r25
     d48:	09 f4       	brne	.+2      	; 0xd4c <nwkRxBusy+0xc>
     d4a:	80 e0       	ldi	r24, 0x00	; 0
}
     d4c:	08 95       	ret

00000d4e <nwkRxTaskHandler>:
}

/*****************************************************************************
*****************************************************************************/
void nwkRxTaskHandler(void)
{
     d4e:	8f 92       	push	r8
     d50:	9f 92       	push	r9
     d52:	af 92       	push	r10
     d54:	bf 92       	push	r11
     d56:	cf 92       	push	r12
     d58:	df 92       	push	r13
     d5a:	ef 92       	push	r14
     d5c:	ff 92       	push	r15
     d5e:	0f 93       	push	r16
     d60:	1f 93       	push	r17
     d62:	cf 93       	push	r28
     d64:	df 93       	push	r29
     d66:	cd b7       	in	r28, 0x3d	; 61
     d68:	de b7       	in	r29, 0x3e	; 62
     d6a:	2a 97       	sbiw	r28, 0x0a	; 10
     d6c:	0f b6       	in	r0, 0x3f	; 63
     d6e:	f8 94       	cli
     d70:	de bf       	out	0x3e, r29	; 62
     d72:	0f be       	out	0x3f, r0	; 63
     d74:	cd bf       	out	0x3d, r28	; 61
  if (0 == nwkRxActiveFrames)
     d76:	80 91 ab 06 	lds	r24, 0x06AB
     d7a:	88 23       	and	r24, r24
     d7c:	09 f4       	brne	.+2      	; 0xd80 <nwkRxTaskHandler+0x32>
     d7e:	ad c1       	rjmp	.+858    	; 0x10da <nwkRxTaskHandler+0x38c>
     d80:	dd 24       	eor	r13, r13
        forceAck = (0xffff == header->macDstAddr && nwkIb.addr == header->nwkDstAddr);

        if ((header->nwkFcf.ackRequest && ack) || forceAck)
          nwkRxSendAck(frame);

        frame->state = NWK_RX_STATE_FINISH;
     d82:	44 e2       	ldi	r20, 0x24	; 36
     d84:	c4 2e       	mov	r12, r20
  if (NULL == (ack = nwkFrameAlloc(sizeof(NwkAckCommand_t))))
    return;

  nwkFrameCommandInit(ack);

  ack->tx.confirm = nwkRxSendAckConf;
     d86:	5e e1       	ldi	r21, 0x1E	; 30
     d88:	85 2e       	mov	r8, r21
     d8a:	56 e0       	ldi	r21, 0x06	; 6
     d8c:	95 2e       	mov	r9, r21
#ifdef NWK_ENABLE_SECURITY
    if (header->nwkFcf.securityEnabled)
      frame->state = NWK_RX_STATE_DECRYPT;
    else
#endif
      frame->state = NWK_RX_STATE_INDICATE;
     d8e:	62 e2       	ldi	r22, 0x22	; 34
     d90:	b6 2e       	mov	r11, r22
  }
#ifdef NWK_ENABLE_ROUTING
  else if (nwkIb.addr == header->macDstAddr && 0xffff != header->macDstPanId)
  {
    frame->state = NWK_RX_STATE_ROUTE;
     d92:	73 e2       	ldi	r23, 0x23	; 35
     d94:	a7 2e       	mov	r10, r23
  if (0 == nwkRxActiveFrames)
    return;

  for (int i = 0; i < NWK_BUFFERS_AMOUNT; i++)
  {
    NwkFrame_t *frame = nwkFrameByIndex(i);
     d96:	8d 2d       	mov	r24, r13
     d98:	0e 94 96 04 	call	0x92c	; 0x92c <nwkFrameByIndex>
     d9c:	7c 01       	movw	r14, r24

    switch (frame->state)
     d9e:	dc 01       	movw	r26, r24
     da0:	8c 91       	ld	r24, X
     da2:	82 32       	cpi	r24, 0x22	; 34
     da4:	09 f4       	brne	.+2      	; 0xda8 <nwkRxTaskHandler+0x5a>
     da6:	d9 c0       	rjmp	.+434    	; 0xf5a <nwkRxTaskHandler+0x20c>
     da8:	83 32       	cpi	r24, 0x23	; 35
     daa:	20 f4       	brcc	.+8      	; 0xdb4 <nwkRxTaskHandler+0x66>
     dac:	80 32       	cpi	r24, 0x20	; 32
     dae:	09 f0       	breq	.+2      	; 0xdb2 <nwkRxTaskHandler+0x64>
     db0:	8f c1       	rjmp	.+798    	; 0x10d0 <nwkRxTaskHandler+0x382>
     db2:	07 c0       	rjmp	.+14     	; 0xdc2 <nwkRxTaskHandler+0x74>
     db4:	83 32       	cpi	r24, 0x23	; 35
     db6:	09 f4       	brne	.+2      	; 0xdba <nwkRxTaskHandler+0x6c>
     db8:	7f c1       	rjmp	.+766    	; 0x10b8 <nwkRxTaskHandler+0x36a>
     dba:	84 32       	cpi	r24, 0x24	; 36
     dbc:	09 f0       	breq	.+2      	; 0xdc0 <nwkRxTaskHandler+0x72>
     dbe:	88 c1       	rjmp	.+784    	; 0x10d0 <nwkRxTaskHandler+0x382>
     dc0:	7f c1       	rjmp	.+766    	; 0x10c0 <nwkRxTaskHandler+0x372>
*****************************************************************************/
static void nwkRxHandleReceivedFrame(NwkFrame_t *frame)
{
  NwkFrameHeader_t *header = &frame->data.header;

  frame->state = NWK_RX_STATE_FINISH;
     dc2:	f7 01       	movw	r30, r14
     dc4:	c0 82       	st	Z, r12

  if ((0xffff == header->nwkDstAddr && header->nwkFcf.ackRequest) ||
     dc6:	87 85       	ldd	r24, Z+15	; 0x0f
     dc8:	90 89       	ldd	r25, Z+16	; 0x10
     dca:	ff ef       	ldi	r31, 0xFF	; 255
     dcc:	8f 3f       	cpi	r24, 0xFF	; 255
     dce:	9f 07       	cpc	r25, r31
     dd0:	31 f4       	brne	.+12     	; 0xdde <nwkRxTaskHandler+0x90>
     dd2:	d7 01       	movw	r26, r14
     dd4:	1b 96       	adiw	r26, 0x0b	; 11
     dd6:	8c 91       	ld	r24, X
     dd8:	1b 97       	sbiw	r26, 0x0b	; 11
     dda:	80 fd       	sbrc	r24, 0
     ddc:	79 c1       	rjmp	.+754    	; 0x10d0 <nwkRxTaskHandler+0x382>
     dde:	20 91 9f 07 	lds	r18, 0x079F
     de2:	30 91 a0 07 	lds	r19, 0x07A0
     de6:	f7 01       	movw	r30, r14
     de8:	85 85       	ldd	r24, Z+13	; 0x0d
     dea:	96 85       	ldd	r25, Z+14	; 0x0e
     dec:	28 17       	cp	r18, r24
     dee:	39 07       	cpc	r19, r25
     df0:	09 f4       	brne	.+2      	; 0xdf4 <nwkRxTaskHandler+0xa6>
     df2:	6e c1       	rjmp	.+732    	; 0x10d0 <nwkRxTaskHandler+0x382>
      (nwkIb.addr == header->nwkSrcAddr))
    return;

#ifndef NWK_ENABLE_SECURITY
  if (header->nwkFcf.securityEnabled)
     df4:	83 85       	ldd	r24, Z+11	; 0x0b
     df6:	81 fd       	sbrc	r24, 1
     df8:	6b c1       	rjmp	.+726    	; 0x10d0 <nwkRxTaskHandler+0x382>
    return;
#endif

#ifdef NWK_ENABLE_ROUTING
  nwkRouteFrameReceived(frame);
     dfa:	c7 01       	movw	r24, r14
     dfc:	0e 94 06 05 	call	0xa0c	; 0xa0c <nwkRouteFrameReceived>
     e00:	e9 e7       	ldi	r30, 0x79	; 121
     e02:	f6 e0       	ldi	r31, 0x06	; 6
     e04:	40 e0       	ldi	r20, 0x00	; 0
     e06:	50 e0       	ldi	r21, 0x00	; 0

/*****************************************************************************
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  int8_t free = -1;
     e08:	6f ef       	ldi	r22, 0xFF	; 255

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    if (nwkRxDuplicateRejectionTable[i].ttl)
     e0a:	23 81       	ldd	r18, Z+3	; 0x03
     e0c:	34 81       	ldd	r19, Z+4	; 0x04
     e0e:	21 15       	cp	r18, r1
     e10:	31 05       	cpc	r19, r1
     e12:	81 f1       	breq	.+96     	; 0xe74 <nwkRxTaskHandler+0x126>
    {
      if (header->nwkSrcAddr == nwkRxDuplicateRejectionTable[i].src)
     e14:	d7 01       	movw	r26, r14
     e16:	1d 96       	adiw	r26, 0x0d	; 13
     e18:	8d 91       	ld	r24, X+
     e1a:	9c 91       	ld	r25, X
     e1c:	1e 97       	sbiw	r26, 0x0e	; 14
     e1e:	20 81       	ld	r18, Z
     e20:	31 81       	ldd	r19, Z+1	; 0x01
     e22:	82 17       	cp	r24, r18
     e24:	93 07       	cpc	r25, r19
     e26:	39 f5       	brne	.+78     	; 0xe76 <nwkRxTaskHandler+0x128>
      {
        int8_t diff = (int8_t)header->nwkSeq - nwkRxDuplicateRejectionTable[i].seq;
     e28:	1c 96       	adiw	r26, 0x0c	; 12
     e2a:	8c 91       	ld	r24, X
     e2c:	fa 01       	movw	r30, r20
     e2e:	ee 0f       	add	r30, r30
     e30:	ff 1f       	adc	r31, r31
     e32:	ee 0f       	add	r30, r30
     e34:	ff 1f       	adc	r31, r31
     e36:	e4 0f       	add	r30, r20
     e38:	f5 1f       	adc	r31, r21
     e3a:	e7 58       	subi	r30, 0x87	; 135
     e3c:	f9 4f       	sbci	r31, 0xF9	; 249
     e3e:	92 81       	ldd	r25, Z+2	; 0x02
     e40:	b8 2f       	mov	r27, r24
     e42:	b9 1b       	sub	r27, r25

        if (diff > 0)
     e44:	1b 16       	cp	r1, r27
     e46:	34 f4       	brge	.+12     	; 0xe54 <nwkRxTaskHandler+0x106>
        {
          nwkRxDuplicateRejectionTable[i].seq = header->nwkSeq;
     e48:	82 83       	std	Z+2, r24	; 0x02
          nwkRxDuplicateRejectionTable[i].ttl = DUPLICATE_REJECTION_TTL;
     e4a:	87 e9       	ldi	r24, 0x97	; 151
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	94 83       	std	Z+4, r25	; 0x04
     e50:	83 83       	std	Z+3, r24	; 0x03
     e52:	39 c0       	rjmp	.+114    	; 0xec6 <nwkRxTaskHandler+0x178>
          return false;
        }
        else
        {
#ifdef NWK_ENABLE_ROUTING
          if (nwkIb.addr == header->macDstAddr)
     e54:	20 91 9f 07 	lds	r18, 0x079F
     e58:	30 91 a0 07 	lds	r19, 0x07A0
     e5c:	f7 01       	movw	r30, r14
     e5e:	87 81       	ldd	r24, Z+7	; 0x07
     e60:	90 85       	ldd	r25, Z+8	; 0x08
     e62:	28 17       	cp	r18, r24
     e64:	39 07       	cpc	r19, r25
     e66:	09 f0       	breq	.+2      	; 0xe6a <nwkRxTaskHandler+0x11c>
     e68:	33 c1       	rjmp	.+614    	; 0x10d0 <nwkRxTaskHandler+0x382>
            nwkRouteRemove(header->nwkDstAddr);
     e6a:	87 85       	ldd	r24, Z+15	; 0x0f
     e6c:	90 89       	ldd	r25, Z+16	; 0x10
     e6e:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <nwkRouteRemove>
     e72:	2e c1       	rjmp	.+604    	; 0x10d0 <nwkRxTaskHandler+0x382>
        }
      }
    }
    else // ttl == 0
    {
      free = i;
     e74:	64 2f       	mov	r22, r20
     e76:	4f 5f       	subi	r20, 0xFF	; 255
     e78:	5f 4f       	sbci	r21, 0xFF	; 255
     e7a:	35 96       	adiw	r30, 0x05	; 5
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  int8_t free = -1;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
     e7c:	4a 30       	cpi	r20, 0x0A	; 10
     e7e:	51 05       	cpc	r21, r1
     e80:	21 f6       	brne	.-120    	; 0xe0a <nwkRxTaskHandler+0xbc>
    {
      free = i;
    }
  }

  if (-1 == free)
     e82:	6f 3f       	cpi	r22, 0xFF	; 255
     e84:	09 f4       	brne	.+2      	; 0xe88 <nwkRxTaskHandler+0x13a>
     e86:	24 c1       	rjmp	.+584    	; 0x10d0 <nwkRxTaskHandler+0x382>
    return true;

  nwkRxDuplicateRejectionTable[free].src = header->nwkSrcAddr;
     e88:	86 2f       	mov	r24, r22
     e8a:	99 27       	eor	r25, r25
     e8c:	87 fd       	sbrc	r24, 7
     e8e:	90 95       	com	r25
     e90:	fc 01       	movw	r30, r24
     e92:	ee 0f       	add	r30, r30
     e94:	ff 1f       	adc	r31, r31
     e96:	ee 0f       	add	r30, r30
     e98:	ff 1f       	adc	r31, r31
     e9a:	e8 0f       	add	r30, r24
     e9c:	f9 1f       	adc	r31, r25
     e9e:	e7 58       	subi	r30, 0x87	; 135
     ea0:	f9 4f       	sbci	r31, 0xF9	; 249
     ea2:	d7 01       	movw	r26, r14
     ea4:	1d 96       	adiw	r26, 0x0d	; 13
     ea6:	8d 91       	ld	r24, X+
     ea8:	9c 91       	ld	r25, X
     eaa:	1e 97       	sbiw	r26, 0x0e	; 14
     eac:	91 83       	std	Z+1, r25	; 0x01
     eae:	80 83       	st	Z, r24
  nwkRxDuplicateRejectionTable[free].seq = header->nwkSeq;
     eb0:	1c 96       	adiw	r26, 0x0c	; 12
     eb2:	8c 91       	ld	r24, X
     eb4:	82 83       	std	Z+2, r24	; 0x02
  nwkRxDuplicateRejectionTable[free].ttl = DUPLICATE_REJECTION_TTL;
     eb6:	87 e9       	ldi	r24, 0x97	; 151
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	94 83       	std	Z+4, r25	; 0x04
     ebc:	83 83       	std	Z+3, r24	; 0x03

  SYS_TimerStart(&nwkRxDuplicateRejectionTimer);
     ebe:	8c ea       	ldi	r24, 0xAC	; 172
     ec0:	96 e0       	ldi	r25, 0x06	; 6
     ec2:	0e 94 11 0c 	call	0x1822	; 0x1822 <SYS_TimerStart>
#endif

  if (nwkRxRejectDuplicate(header))
    return;

  if (0xffff == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
     ec6:	f7 01       	movw	r30, r14
     ec8:	87 81       	ldd	r24, Z+7	; 0x07
     eca:	90 85       	ldd	r25, Z+8	; 0x08
     ecc:	ff ef       	ldi	r31, 0xFF	; 255
     ece:	8f 3f       	cpi	r24, 0xFF	; 255
     ed0:	9f 07       	cpc	r25, r31
     ed2:	d9 f4       	brne	.+54     	; 0xf0a <nwkRxTaskHandler+0x1bc>
     ed4:	20 91 9f 07 	lds	r18, 0x079F
     ed8:	30 91 a0 07 	lds	r19, 0x07A0
     edc:	d7 01       	movw	r26, r14
     ede:	1f 96       	adiw	r26, 0x0f	; 15
     ee0:	8d 91       	ld	r24, X+
     ee2:	9c 91       	ld	r25, X
     ee4:	50 97       	sbiw	r26, 0x10	; 16
     ee6:	28 17       	cp	r18, r24
     ee8:	39 07       	cpc	r19, r25
     eea:	79 f0       	breq	.+30     	; 0xf0a <nwkRxTaskHandler+0x1bc>
     eec:	15 96       	adiw	r26, 0x05	; 5
     eee:	8d 91       	ld	r24, X+
     ef0:	9c 91       	ld	r25, X
     ef2:	16 97       	sbiw	r26, 0x06	; 6
     ef4:	bf ef       	ldi	r27, 0xFF	; 255
     ef6:	8f 3f       	cpi	r24, 0xFF	; 255
     ef8:	9b 07       	cpc	r25, r27
     efa:	39 f0       	breq	.+14     	; 0xf0a <nwkRxTaskHandler+0x1bc>
      0xffff != header->macDstPanId && 0 == header->nwkFcf.linkLocal)
     efc:	f7 01       	movw	r30, r14
     efe:	83 85       	ldd	r24, Z+11	; 0x0b
     f00:	82 fd       	sbrc	r24, 2
     f02:	03 c0       	rjmp	.+6      	; 0xf0a <nwkRxTaskHandler+0x1bc>
    nwkTxBroadcastFrame(frame);
     f04:	c7 01       	movw	r24, r14
     f06:	0e 94 0b 09 	call	0x1216	; 0x1216 <nwkTxBroadcastFrame>

  if (nwkIb.addr == header->nwkDstAddr || 0xffff == header->nwkDstAddr)
     f0a:	80 91 9f 07 	lds	r24, 0x079F
     f0e:	90 91 a0 07 	lds	r25, 0x07A0
     f12:	d7 01       	movw	r26, r14
     f14:	1f 96       	adiw	r26, 0x0f	; 15
     f16:	2d 91       	ld	r18, X+
     f18:	3c 91       	ld	r19, X
     f1a:	50 97       	sbiw	r26, 0x10	; 16
     f1c:	82 17       	cp	r24, r18
     f1e:	93 07       	cpc	r25, r19
     f20:	21 f0       	breq	.+8      	; 0xf2a <nwkRxTaskHandler+0x1dc>
     f22:	bf ef       	ldi	r27, 0xFF	; 255
     f24:	2f 3f       	cpi	r18, 0xFF	; 255
     f26:	3b 07       	cpc	r19, r27
     f28:	19 f4       	brne	.+6      	; 0xf30 <nwkRxTaskHandler+0x1e2>
#ifdef NWK_ENABLE_SECURITY
    if (header->nwkFcf.securityEnabled)
      frame->state = NWK_RX_STATE_DECRYPT;
    else
#endif
      frame->state = NWK_RX_STATE_INDICATE;
     f2a:	f7 01       	movw	r30, r14
     f2c:	b0 82       	st	Z, r11
     f2e:	d0 c0       	rjmp	.+416    	; 0x10d0 <nwkRxTaskHandler+0x382>
  }
#ifdef NWK_ENABLE_ROUTING
  else if (nwkIb.addr == header->macDstAddr && 0xffff != header->macDstPanId)
     f30:	d7 01       	movw	r26, r14
     f32:	17 96       	adiw	r26, 0x07	; 7
     f34:	2d 91       	ld	r18, X+
     f36:	3c 91       	ld	r19, X
     f38:	18 97       	sbiw	r26, 0x08	; 8
     f3a:	82 17       	cp	r24, r18
     f3c:	93 07       	cpc	r25, r19
     f3e:	09 f0       	breq	.+2      	; 0xf42 <nwkRxTaskHandler+0x1f4>
     f40:	c7 c0       	rjmp	.+398    	; 0x10d0 <nwkRxTaskHandler+0x382>
     f42:	15 96       	adiw	r26, 0x05	; 5
     f44:	8d 91       	ld	r24, X+
     f46:	9c 91       	ld	r25, X
     f48:	16 97       	sbiw	r26, 0x06	; 6
     f4a:	bf ef       	ldi	r27, 0xFF	; 255
     f4c:	8f 3f       	cpi	r24, 0xFF	; 255
     f4e:	9b 07       	cpc	r25, r27
     f50:	09 f4       	brne	.+2      	; 0xf54 <nwkRxTaskHandler+0x206>
     f52:	be c0       	rjmp	.+380    	; 0x10d0 <nwkRxTaskHandler+0x382>
  {
    frame->state = NWK_RX_STATE_ROUTE;
     f54:	f7 01       	movw	r30, r14
     f56:	a0 82       	st	Z, r10
     f58:	bb c0       	rjmp	.+374    	; 0x10d0 <nwkRxTaskHandler+0x382>
      case NWK_RX_STATE_INDICATE:
      {
        NwkFrameHeader_t *header = &frame->data.header;
        bool ack, forceAck;

        nwkRxAckControl = NWK_ACK_CONTROL_NONE;
     f5a:	10 92 78 06 	sts	0x0678, r1
static bool nwkRxIndicateFrame(NwkFrame_t *frame)
{
  NwkFrameHeader_t *header = &frame->data.header;
  NWK_DataInd_t ind;

  if (header->nwkDstEndpoint > NWK_MAX_ENDPOINTS_AMOUNT || 
     f5e:	d7 01       	movw	r26, r14
     f60:	51 96       	adiw	r26, 0x11	; 17
     f62:	8c 91       	ld	r24, X
     f64:	51 97       	sbiw	r26, 0x11	; 17
     f66:	82 95       	swap	r24
     f68:	8f 70       	andi	r24, 0x0F	; 15
     f6a:	e8 2f       	mov	r30, r24
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	e4 30       	cpi	r30, 0x04	; 4
     f70:	f1 05       	cpc	r31, r1
     f72:	0c f0       	brlt	.+2      	; 0xf76 <nwkRxTaskHandler+0x228>
     f74:	5e c0       	rjmp	.+188    	; 0x1032 <nwkRxTaskHandler+0x2e4>
      NULL == nwkIb.endpoint[header->nwkDstEndpoint])
     f76:	ee 0f       	add	r30, r30
     f78:	ff 1f       	adc	r31, r31
     f7a:	eb 55       	subi	r30, 0x5B	; 91
     f7c:	f8 4f       	sbci	r31, 0xF8	; 248
     f7e:	40 81       	ld	r20, Z
     f80:	51 81       	ldd	r21, Z+1	; 0x01
static bool nwkRxIndicateFrame(NwkFrame_t *frame)
{
  NwkFrameHeader_t *header = &frame->data.header;
  NWK_DataInd_t ind;

  if (header->nwkDstEndpoint > NWK_MAX_ENDPOINTS_AMOUNT || 
     f82:	41 15       	cp	r20, r1
     f84:	51 05       	cpc	r21, r1
     f86:	09 f4       	brne	.+2      	; 0xf8a <nwkRxTaskHandler+0x23c>
     f88:	54 c0       	rjmp	.+168    	; 0x1032 <nwkRxTaskHandler+0x2e4>
      NULL == nwkIb.endpoint[header->nwkDstEndpoint])
    return false;

  ind.srcAddr = header->nwkSrcAddr;
     f8a:	1d 96       	adiw	r26, 0x0d	; 13
     f8c:	2d 91       	ld	r18, X+
     f8e:	3c 91       	ld	r19, X
     f90:	1e 97       	sbiw	r26, 0x0e	; 14
     f92:	3a 83       	std	Y+2, r19	; 0x02
     f94:	29 83       	std	Y+1, r18	; 0x01
  ind.srcEndpoint = header->nwkSrcEndpoint;
     f96:	51 96       	adiw	r26, 0x11	; 17
     f98:	9c 91       	ld	r25, X
     f9a:	51 97       	sbiw	r26, 0x11	; 17
     f9c:	9f 70       	andi	r25, 0x0F	; 15
     f9e:	9b 83       	std	Y+3, r25	; 0x03
  ind.dstEndpoint = header->nwkDstEndpoint;
     fa0:	8c 83       	std	Y+4, r24	; 0x04
  ind.data = frame->data.payload;
     fa2:	c7 01       	movw	r24, r14
     fa4:	42 96       	adiw	r24, 0x12	; 18
     fa6:	9f 83       	std	Y+7, r25	; 0x07
     fa8:	8e 83       	std	Y+6, r24	; 0x06
  ind.size = frame->size - sizeof(NwkFrameHeader_t);
     faa:	11 96       	adiw	r26, 0x01	; 1
     fac:	8c 91       	ld	r24, X
     fae:	11 97       	sbiw	r26, 0x01	; 1
     fb0:	80 51       	subi	r24, 0x10	; 16
     fb2:	88 87       	std	Y+8, r24	; 0x08
  ind.lqi = frame->rx.lqi;
     fb4:	f7 01       	movw	r30, r14
     fb6:	e1 58       	subi	r30, 0x81	; 129
     fb8:	ff 4f       	sbci	r31, 0xFF	; 255
     fba:	80 81       	ld	r24, Z
     fbc:	89 87       	std	Y+9, r24	; 0x09
  ind.rssi = frame->rx.rssi;
     fbe:	f7 01       	movw	r30, r14
     fc0:	e0 58       	subi	r30, 0x80	; 128
     fc2:	ff 4f       	sbci	r31, 0xFF	; 255
     fc4:	80 81       	ld	r24, Z
     fc6:	8a 87       	std	Y+10, r24	; 0x0a

  ind.options  = (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
     fc8:	f7 01       	movw	r30, r14
     fca:	73 85       	ldd	r23, Z+11	; 0x0b
  ind.options |= (header->nwkFcf.securityEnabled) ? NWK_IND_OPT_SECURED : 0;
     fcc:	67 2f       	mov	r22, r23
     fce:	63 70       	andi	r22, 0x03	; 3
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
     fd0:	72 ff       	sbrs	r23, 2
     fd2:	02 c0       	rjmp	.+4      	; 0xfd8 <nwkRxTaskHandler+0x28a>
     fd4:	80 e2       	ldi	r24, 0x20	; 32
     fd6:	01 c0       	rjmp	.+2      	; 0xfda <nwkRxTaskHandler+0x28c>
     fd8:	80 e0       	ldi	r24, 0x00	; 0
     fda:	76 2f       	mov	r23, r22
     fdc:	78 2b       	or	r23, r24
  ind.options |= (0xffff == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
     fde:	d7 01       	movw	r26, r14
     fe0:	1f 96       	adiw	r26, 0x0f	; 15
     fe2:	8d 91       	ld	r24, X+
     fe4:	9c 91       	ld	r25, X
     fe6:	50 97       	sbiw	r26, 0x10	; 16
     fe8:	bf ef       	ldi	r27, 0xFF	; 255
     fea:	8f 3f       	cpi	r24, 0xFF	; 255
     fec:	9b 07       	cpc	r25, r27
     fee:	11 f4       	brne	.+4      	; 0xff4 <nwkRxTaskHandler+0x2a6>
     ff0:	64 e0       	ldi	r22, 0x04	; 4
     ff2:	01 c0       	rjmp	.+2      	; 0xff6 <nwkRxTaskHandler+0x2a8>
     ff4:	60 e0       	ldi	r22, 0x00	; 0
     ff6:	67 2b       	or	r22, r23
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
     ff8:	f7 01       	movw	r30, r14
     ffa:	81 85       	ldd	r24, Z+9	; 0x09
     ffc:	92 85       	ldd	r25, Z+10	; 0x0a
     ffe:	28 17       	cp	r18, r24
    1000:	39 07       	cpc	r19, r25
    1002:	11 f4       	brne	.+4      	; 0x1008 <nwkRxTaskHandler+0x2ba>
    1004:	98 e0       	ldi	r25, 0x08	; 8
    1006:	01 c0       	rjmp	.+2      	; 0x100a <nwkRxTaskHandler+0x2bc>
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	69 2b       	or	r22, r25
  ind.options |= (0xffff == header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
    100c:	d7 01       	movw	r26, r14
    100e:	15 96       	adiw	r26, 0x05	; 5
    1010:	8d 91       	ld	r24, X+
    1012:	9c 91       	ld	r25, X
    1014:	16 97       	sbiw	r26, 0x06	; 6
    1016:	bf ef       	ldi	r27, 0xFF	; 255
    1018:	8f 3f       	cpi	r24, 0xFF	; 255
    101a:	9b 07       	cpc	r25, r27
    101c:	11 f4       	brne	.+4      	; 0x1022 <nwkRxTaskHandler+0x2d4>
    101e:	80 e1       	ldi	r24, 0x10	; 16
    1020:	01 c0       	rjmp	.+2      	; 0x1024 <nwkRxTaskHandler+0x2d6>
    1022:	80 e0       	ldi	r24, 0x00	; 0
    1024:	86 2b       	or	r24, r22
    1026:	8d 83       	std	Y+5, r24	; 0x05

  return nwkIb.endpoint[header->nwkDstEndpoint](&ind);
    1028:	ce 01       	movw	r24, r28
    102a:	01 96       	adiw	r24, 0x01	; 1
    102c:	fa 01       	movw	r30, r20
    102e:	09 95       	icall
    1030:	01 c0       	rjmp	.+2      	; 0x1034 <nwkRxTaskHandler+0x2e6>
  NwkFrameHeader_t *header = &frame->data.header;
  NWK_DataInd_t ind;

  if (header->nwkDstEndpoint > NWK_MAX_ENDPOINTS_AMOUNT || 
      NULL == nwkIb.endpoint[header->nwkDstEndpoint])
    return false;
    1032:	80 e0       	ldi	r24, 0x00	; 0
        NwkFrameHeader_t *header = &frame->data.header;
        bool ack, forceAck;

        nwkRxAckControl = NWK_ACK_CONTROL_NONE;
        ack = nwkRxIndicateFrame(frame);
        forceAck = (0xffff == header->macDstAddr && nwkIb.addr == header->nwkDstAddr);
    1034:	f7 01       	movw	r30, r14
    1036:	27 81       	ldd	r18, Z+7	; 0x07
    1038:	30 85       	ldd	r19, Z+8	; 0x08
    103a:	ff ef       	ldi	r31, 0xFF	; 255
    103c:	2f 3f       	cpi	r18, 0xFF	; 255
    103e:	3f 07       	cpc	r19, r31
    1040:	71 f4       	brne	.+28     	; 0x105e <nwkRxTaskHandler+0x310>
#endif
}

/*****************************************************************************
*****************************************************************************/
void nwkRxTaskHandler(void)
    1042:	61 e0       	ldi	r22, 0x01	; 1
    1044:	70 e0       	ldi	r23, 0x00	; 0
    1046:	20 91 9f 07 	lds	r18, 0x079F
    104a:	30 91 a0 07 	lds	r19, 0x07A0
    104e:	d7 01       	movw	r26, r14
    1050:	1f 96       	adiw	r26, 0x0f	; 15
    1052:	4d 91       	ld	r20, X+
    1054:	5c 91       	ld	r21, X
    1056:	50 97       	sbiw	r26, 0x10	; 16
    1058:	24 17       	cp	r18, r20
    105a:	35 07       	cpc	r19, r21
    105c:	11 f0       	breq	.+4      	; 0x1062 <nwkRxTaskHandler+0x314>
        NwkFrameHeader_t *header = &frame->data.header;
        bool ack, forceAck;

        nwkRxAckControl = NWK_ACK_CONTROL_NONE;
        ack = nwkRxIndicateFrame(frame);
        forceAck = (0xffff == header->macDstAddr && nwkIb.addr == header->nwkDstAddr);
    105e:	60 e0       	ldi	r22, 0x00	; 0
    1060:	70 e0       	ldi	r23, 0x00	; 0

        if ((header->nwkFcf.ackRequest && ack) || forceAck)
    1062:	f7 01       	movw	r30, r14
    1064:	93 85       	ldd	r25, Z+11	; 0x0b
    1066:	90 ff       	sbrs	r25, 0
    1068:	02 c0       	rjmp	.+4      	; 0x106e <nwkRxTaskHandler+0x320>
    106a:	88 23       	and	r24, r24
    106c:	19 f4       	brne	.+6      	; 0x1074 <nwkRxTaskHandler+0x326>
    106e:	61 15       	cp	r22, r1
    1070:	71 05       	cpc	r23, r1
    1072:	f9 f0       	breq	.+62     	; 0x10b2 <nwkRxTaskHandler+0x364>
static void nwkRxSendAck(NwkFrame_t *frame)
{
  NwkFrame_t *ack;
  NwkAckCommand_t *command;

  if (NULL == (ack = nwkFrameAlloc(sizeof(NwkAckCommand_t))))
    1074:	83 e0       	ldi	r24, 0x03	; 3
    1076:	0e 94 6d 04 	call	0x8da	; 0x8da <nwkFrameAlloc>
    107a:	8c 01       	movw	r16, r24
    107c:	00 97       	sbiw	r24, 0x00	; 0
    107e:	c9 f0       	breq	.+50     	; 0x10b2 <nwkRxTaskHandler+0x364>
    return;

  nwkFrameCommandInit(ack);
    1080:	0e 94 a4 04 	call	0x948	; 0x948 <nwkFrameCommandInit>

  ack->tx.confirm = nwkRxSendAckConf;
    1084:	f8 01       	movw	r30, r16
    1086:	ed 57       	subi	r30, 0x7D	; 125
    1088:	ff 4f       	sbci	r31, 0xFF	; 255
    108a:	91 82       	std	Z+1, r9	; 0x01
    108c:	80 82       	st	Z, r8

  ack->data.header.nwkDstAddr = frame->data.header.nwkSrcAddr;
    108e:	d7 01       	movw	r26, r14
    1090:	1d 96       	adiw	r26, 0x0d	; 13
    1092:	8d 91       	ld	r24, X+
    1094:	9c 91       	ld	r25, X
    1096:	1e 97       	sbiw	r26, 0x0e	; 14
    1098:	f8 01       	movw	r30, r16
    109a:	90 8b       	std	Z+16, r25	; 0x10
    109c:	87 87       	std	Z+15, r24	; 0x0f

  command = (NwkAckCommand_t *)ack->data.payload;

  command->id = NWK_COMMAND_ACK;
    109e:	12 8a       	std	Z+18, r1	; 0x12
  command->control = nwkRxAckControl;
    10a0:	80 91 78 06 	lds	r24, 0x0678
    10a4:	84 8b       	std	Z+20, r24	; 0x14
  command->seq = frame->data.header.nwkSeq;
    10a6:	1c 96       	adiw	r26, 0x0c	; 12
    10a8:	8c 91       	ld	r24, X
    10aa:	83 8b       	std	Z+19, r24	; 0x13

  nwkTxFrame(ack);
    10ac:	c8 01       	movw	r24, r16
    10ae:	0e 94 ce 08 	call	0x119c	; 0x119c <nwkTxFrame>
        forceAck = (0xffff == header->macDstAddr && nwkIb.addr == header->nwkDstAddr);

        if ((header->nwkFcf.ackRequest && ack) || forceAck)
          nwkRxSendAck(frame);

        frame->state = NWK_RX_STATE_FINISH;
    10b2:	d7 01       	movw	r26, r14
    10b4:	cc 92       	st	X, r12
      } break;
    10b6:	0c c0       	rjmp	.+24     	; 0x10d0 <nwkRxTaskHandler+0x382>

#ifdef NWK_ENABLE_ROUTING
      case NWK_RX_STATE_ROUTE:
      {
        nwkRouteFrame(frame);
    10b8:	c7 01       	movw	r24, r14
    10ba:	0e 94 c5 05 	call	0xb8a	; 0xb8a <nwkRouteFrame>
    10be:	03 c0       	rjmp	.+6      	; 0x10c6 <nwkRxTaskHandler+0x378>
      } break;
#endif

      case NWK_RX_STATE_FINISH:
      {
        nwkFrameFree(frame);
    10c0:	c7 01       	movw	r24, r14
    10c2:	0e 94 93 04 	call	0x926	; 0x926 <nwkFrameFree>
        --nwkRxActiveFrames;
    10c6:	80 91 ab 06 	lds	r24, 0x06AB
    10ca:	81 50       	subi	r24, 0x01	; 1
    10cc:	80 93 ab 06 	sts	0x06AB, r24
      } break;
    10d0:	d3 94       	inc	r13
void nwkRxTaskHandler(void)
{
  if (0 == nwkRxActiveFrames)
    return;

  for (int i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    10d2:	b3 e0       	ldi	r27, 0x03	; 3
    10d4:	db 16       	cp	r13, r27
    10d6:	09 f0       	breq	.+2      	; 0x10da <nwkRxTaskHandler+0x38c>
    10d8:	5e ce       	rjmp	.-836    	; 0xd96 <nwkRxTaskHandler+0x48>
        nwkFrameFree(frame);
        --nwkRxActiveFrames;
      } break;
    }
  }
}
    10da:	2a 96       	adiw	r28, 0x0a	; 10
    10dc:	0f b6       	in	r0, 0x3f	; 63
    10de:	f8 94       	cli
    10e0:	de bf       	out	0x3e, r29	; 62
    10e2:	0f be       	out	0x3f, r0	; 63
    10e4:	cd bf       	out	0x3d, r28	; 61
    10e6:	df 91       	pop	r29
    10e8:	cf 91       	pop	r28
    10ea:	1f 91       	pop	r17
    10ec:	0f 91       	pop	r16
    10ee:	ff 90       	pop	r15
    10f0:	ef 90       	pop	r14
    10f2:	df 90       	pop	r13
    10f4:	cf 90       	pop	r12
    10f6:	bf 90       	pop	r11
    10f8:	af 90       	pop	r10
    10fa:	9f 90       	pop	r9
    10fc:	8f 90       	pop	r8
    10fe:	08 95       	ret

00001100 <nwkTxBroadcastConf>:

/*****************************************************************************
*****************************************************************************/
static void nwkTxBroadcastConf(NwkFrame_t *frame)
{
  nwkFrameFree(frame);
    1100:	0e 94 93 04 	call	0x926	; 0x926 <nwkFrameFree>
}
    1104:	08 95       	ret

00001106 <nwkTxAckWaitTimerHandler>:
}

/*****************************************************************************
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
    1106:	ef 92       	push	r14
    1108:	ff 92       	push	r15
    110a:	1f 93       	push	r17
    110c:	cf 93       	push	r28
    110e:	df 93       	push	r29
    1110:	7c 01       	movw	r14, r24
  if (0 == nwkTxActiveFrames)
    1112:	80 91 bb 06 	lds	r24, 0x06BB
    1116:	88 23       	and	r24, r24
    1118:	01 f1       	breq	.+64     	; 0x115a <nwkTxAckWaitTimerHandler+0x54>
    111a:	c0 e0       	ldi	r28, 0x00	; 0
  {
    NwkFrame_t *frame = nwkFrameByIndex(i);

    if (NWK_TX_STATE_WAIT_ACK == frame->state && 0 == --frame->tx.timeout)
    {
      frame->state = NWK_TX_STATE_CONFIRM;
    111c:	d5 e1       	ldi	r29, 0x15	; 21
      frame->tx.status = NWK_NO_ACK_STATUS;
    111e:	10 e1       	ldi	r17, 0x10	; 16
  if (0 == nwkTxActiveFrames)
    return;

  for (int i = 0; i < NWK_BUFFERS_AMOUNT; i++)
  {
    NwkFrame_t *frame = nwkFrameByIndex(i);
    1120:	8c 2f       	mov	r24, r28
    1122:	0e 94 96 04 	call	0x92c	; 0x92c <nwkFrameByIndex>
    1126:	dc 01       	movw	r26, r24

    if (NWK_TX_STATE_WAIT_ACK == frame->state && 0 == --frame->tx.timeout)
    1128:	8c 91       	ld	r24, X
    112a:	84 31       	cpi	r24, 0x14	; 20
    112c:	81 f4       	brne	.+32     	; 0x114e <nwkTxAckWaitTimerHandler+0x48>
    112e:	fd 01       	movw	r30, r26
    1130:	e0 58       	subi	r30, 0x80	; 128
    1132:	ff 4f       	sbci	r31, 0xFF	; 255
    1134:	20 81       	ld	r18, Z
    1136:	31 81       	ldd	r19, Z+1	; 0x01
    1138:	21 50       	subi	r18, 0x01	; 1
    113a:	30 40       	sbci	r19, 0x00	; 0
    113c:	31 83       	std	Z+1, r19	; 0x01
    113e:	20 83       	st	Z, r18
    1140:	21 15       	cp	r18, r1
    1142:	31 05       	cpc	r19, r1
    1144:	21 f4       	brne	.+8      	; 0x114e <nwkTxAckWaitTimerHandler+0x48>
    {
      frame->state = NWK_TX_STATE_CONFIRM;
    1146:	dc 93       	st	X, r29
      frame->tx.status = NWK_NO_ACK_STATUS;
    1148:	a1 58       	subi	r26, 0x81	; 129
    114a:	bf 4f       	sbci	r27, 0xFF	; 255
    114c:	1c 93       	st	X, r17
    114e:	cf 5f       	subi	r28, 0xFF	; 255
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
  if (0 == nwkTxActiveFrames)
    return;

  for (int i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    1150:	c3 30       	cpi	r28, 0x03	; 3
    1152:	31 f7       	brne	.-52     	; 0x1120 <nwkTxAckWaitTimerHandler+0x1a>
      frame->state = NWK_TX_STATE_CONFIRM;
      frame->tx.status = NWK_NO_ACK_STATUS;
    }
  }

  SYS_TimerStart(timer);
    1154:	c7 01       	movw	r24, r14
    1156:	0e 94 11 0c 	call	0x1822	; 0x1822 <SYS_TimerStart>
}
    115a:	df 91       	pop	r29
    115c:	cf 91       	pop	r28
    115e:	1f 91       	pop	r17
    1160:	ff 90       	pop	r15
    1162:	ef 90       	pop	r14
    1164:	08 95       	ret

00001166 <nwkTxInit>:

/*****************************************************************************
*****************************************************************************/
void nwkTxInit(void)
{
  nwkTxPhyActiveFrame = NULL;
    1166:	10 92 ba 06 	sts	0x06BA, r1
    116a:	10 92 b9 06 	sts	0x06B9, r1
  nwkTxActiveFrames = 0;
    116e:	10 92 bb 06 	sts	0x06BB, r1

  nwkTxAckWaitTimer.interval = NWK_TX_ACK_WAIT_TIMER_INTERVAL;
    1172:	82 e3       	ldi	r24, 0x32	; 50
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	a0 e0       	ldi	r26, 0x00	; 0
    1178:	b0 e0       	ldi	r27, 0x00	; 0
    117a:	80 93 c2 06 	sts	0x06C2, r24
    117e:	90 93 c3 06 	sts	0x06C3, r25
    1182:	a0 93 c4 06 	sts	0x06C4, r26
    1186:	b0 93 c5 06 	sts	0x06C5, r27
  nwkTxAckWaitTimer.mode = SYS_TIMER_INTERVAL_MODE;
    118a:	10 92 c6 06 	sts	0x06C6, r1
  nwkTxAckWaitTimer.handler = nwkTxAckWaitTimerHandler;
    118e:	83 e8       	ldi	r24, 0x83	; 131
    1190:	98 e0       	ldi	r25, 0x08	; 8
    1192:	90 93 c8 06 	sts	0x06C8, r25
    1196:	80 93 c7 06 	sts	0x06C7, r24
}
    119a:	08 95       	ret

0000119c <nwkTxFrame>:

/*****************************************************************************
*****************************************************************************/
void nwkTxFrame(NwkFrame_t *frame)
{
    119c:	cf 93       	push	r28
    119e:	df 93       	push	r29
    11a0:	ec 01       	movw	r28, r24
  NwkFrameHeader_t *header = &frame->data.header;

  if (frame->tx.control & NWK_TX_CONTROL_ROUTING)
    11a2:	fc 01       	movw	r30, r24
    11a4:	ee 57       	subi	r30, 0x7E	; 126
    11a6:	ff 4f       	sbci	r31, 0xFF	; 255
    11a8:	80 81       	ld	r24, Z
  {
    frame->state = NWK_TX_STATE_SEND;
    11aa:	91 e1       	ldi	r25, 0x11	; 17
    11ac:	98 83       	st	Y, r25
    else
#endif
      frame->state = NWK_TX_STATE_SEND;
  }

  frame->tx.status = NWK_SUCCESS_STATUS;
    11ae:	fe 01       	movw	r30, r28
    11b0:	e1 58       	subi	r30, 0x81	; 129
    11b2:	ff 4f       	sbci	r31, 0xFF	; 255
    11b4:	10 82       	st	Z, r1

  if (frame->tx.control & NWK_TX_CONTROL_BROADCAST_PAN_ID)
    11b6:	80 ff       	sbrs	r24, 0
    11b8:	03 c0       	rjmp	.+6      	; 0x11c0 <nwkTxFrame+0x24>
    frame->data.header.macDstPanId = 0xffff;
    11ba:	8f ef       	ldi	r24, 0xFF	; 255
    11bc:	9f ef       	ldi	r25, 0xFF	; 255
    11be:	04 c0       	rjmp	.+8      	; 0x11c8 <nwkTxFrame+0x2c>
  else
    frame->data.header.macDstPanId = nwkIb.panId;
    11c0:	80 91 a1 07 	lds	r24, 0x07A1
    11c4:	90 91 a2 07 	lds	r25, 0x07A2
    11c8:	9e 83       	std	Y+6, r25	; 0x06
    11ca:	8d 83       	std	Y+5, r24	; 0x05

#ifdef NWK_ENABLE_ROUTING
  header->macDstAddr = nwkRouteNextHop(header->nwkDstAddr);
    11cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    11ce:	98 89       	ldd	r25, Y+16	; 0x10
    11d0:	0e 94 a0 05 	call	0xb40	; 0xb40 <nwkRouteNextHop>
    11d4:	98 87       	std	Y+8, r25	; 0x08
    11d6:	8f 83       	std	Y+7, r24	; 0x07
#else
  header->macDstAddr = header->nwkDstAddr;
#endif
  header->macSrcAddr = nwkIb.addr;
    11d8:	20 91 9f 07 	lds	r18, 0x079F
    11dc:	30 91 a0 07 	lds	r19, 0x07A0
    11e0:	3a 87       	std	Y+10, r19	; 0x0a
    11e2:	29 87       	std	Y+9, r18	; 0x09
  header->macSeq = ++nwkIb.macSeqNum;
    11e4:	20 91 a4 07 	lds	r18, 0x07A4
    11e8:	2f 5f       	subi	r18, 0xFF	; 255
    11ea:	20 93 a4 07 	sts	0x07A4, r18
    11ee:	2c 83       	std	Y+4, r18	; 0x04

  if (0xffff == header->macDstAddr)
    11f0:	2f ef       	ldi	r18, 0xFF	; 255
    11f2:	8f 3f       	cpi	r24, 0xFF	; 255
    11f4:	92 07       	cpc	r25, r18
    11f6:	19 f4       	brne	.+6      	; 0x11fe <nwkTxFrame+0x62>
    header->macFcf = 0x8841;
    11f8:	81 e4       	ldi	r24, 0x41	; 65
    11fa:	98 e8       	ldi	r25, 0x88	; 136
    11fc:	02 c0       	rjmp	.+4      	; 0x1202 <nwkTxFrame+0x66>
  else
    header->macFcf = 0x8861;
    11fe:	81 e6       	ldi	r24, 0x61	; 97
    1200:	98 e8       	ldi	r25, 0x88	; 136
    1202:	9b 83       	std	Y+3, r25	; 0x03
    1204:	8a 83       	std	Y+2, r24	; 0x02

  ++nwkTxActiveFrames;
    1206:	80 91 bb 06 	lds	r24, 0x06BB
    120a:	8f 5f       	subi	r24, 0xFF	; 255
    120c:	80 93 bb 06 	sts	0x06BB, r24
}
    1210:	df 91       	pop	r29
    1212:	cf 91       	pop	r28
    1214:	08 95       	ret

00001216 <nwkTxBroadcastFrame>:

/*****************************************************************************
*****************************************************************************/
void nwkTxBroadcastFrame(NwkFrame_t *frame)
{
    1216:	0f 93       	push	r16
    1218:	1f 93       	push	r17
    121a:	cf 93       	push	r28
    121c:	df 93       	push	r29
    121e:	8c 01       	movw	r16, r24
  NwkFrame_t *newFrame;

  if (NULL == (newFrame = nwkFrameAlloc(frame->size - sizeof(NwkFrameHeader_t))))
    1220:	fc 01       	movw	r30, r24
    1222:	81 81       	ldd	r24, Z+1	; 0x01
    1224:	80 51       	subi	r24, 0x10	; 16
    1226:	0e 94 6d 04 	call	0x8da	; 0x8da <nwkFrameAlloc>
    122a:	ec 01       	movw	r28, r24
    122c:	00 97       	sbiw	r24, 0x00	; 0
    122e:	b1 f1       	breq	.+108    	; 0x129c <nwkTxBroadcastFrame+0x86>
    return;

  newFrame->tx.confirm = nwkTxBroadcastConf;
    1230:	fc 01       	movw	r30, r24
    1232:	ed 57       	subi	r30, 0x7D	; 125
    1234:	ff 4f       	sbci	r31, 0xFF	; 255
    1236:	80 e8       	ldi	r24, 0x80	; 128
    1238:	98 e0       	ldi	r25, 0x08	; 8
    123a:	91 83       	std	Z+1, r25	; 0x01
    123c:	80 83       	st	Z, r24
  memcpy((uint8_t *)&newFrame->data, (uint8_t *)&frame->data, frame->size);
    123e:	ce 01       	movw	r24, r28
    1240:	02 96       	adiw	r24, 0x02	; 2
    1242:	f8 01       	movw	r30, r16
    1244:	41 81       	ldd	r20, Z+1	; 0x01
    1246:	b8 01       	movw	r22, r16
    1248:	6e 5f       	subi	r22, 0xFE	; 254
    124a:	7f 4f       	sbci	r23, 0xFF	; 255
    124c:	50 e0       	ldi	r21, 0x00	; 0
    124e:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <memcpy>

  newFrame->state = NWK_TX_STATE_SEND;
    1252:	81 e1       	ldi	r24, 0x11	; 17
    1254:	88 83       	st	Y, r24
  newFrame->tx.status = NWK_SUCCESS_STATUS;
    1256:	fe 01       	movw	r30, r28
    1258:	e1 58       	subi	r30, 0x81	; 129
    125a:	ff 4f       	sbci	r31, 0xFF	; 255
    125c:	10 82       	st	Z, r1

  newFrame->data.header.macFcf = 0x8841;
    125e:	81 e4       	ldi	r24, 0x41	; 65
    1260:	98 e8       	ldi	r25, 0x88	; 136
    1262:	9b 83       	std	Y+3, r25	; 0x03
    1264:	8a 83       	std	Y+2, r24	; 0x02
  newFrame->data.header.macDstAddr = 0xffff;
    1266:	8f ef       	ldi	r24, 0xFF	; 255
    1268:	9f ef       	ldi	r25, 0xFF	; 255
    126a:	98 87       	std	Y+8, r25	; 0x08
    126c:	8f 83       	std	Y+7, r24	; 0x07
  newFrame->data.header.macDstPanId = nwkIb.panId;
    126e:	80 91 a1 07 	lds	r24, 0x07A1
    1272:	90 91 a2 07 	lds	r25, 0x07A2
    1276:	9e 83       	std	Y+6, r25	; 0x06
    1278:	8d 83       	std	Y+5, r24	; 0x05
  newFrame->data.header.macSrcAddr = nwkIb.addr;
    127a:	80 91 9f 07 	lds	r24, 0x079F
    127e:	90 91 a0 07 	lds	r25, 0x07A0
    1282:	9a 87       	std	Y+10, r25	; 0x0a
    1284:	89 87       	std	Y+9, r24	; 0x09
  newFrame->data.header.macSeq = ++nwkIb.macSeqNum;
    1286:	80 91 a4 07 	lds	r24, 0x07A4
    128a:	8f 5f       	subi	r24, 0xFF	; 255
    128c:	80 93 a4 07 	sts	0x07A4, r24
    1290:	8c 83       	std	Y+4, r24	; 0x04

  ++nwkTxActiveFrames;
    1292:	80 91 bb 06 	lds	r24, 0x06BB
    1296:	8f 5f       	subi	r24, 0xFF	; 255
    1298:	80 93 bb 06 	sts	0x06BB, r24
}
    129c:	df 91       	pop	r29
    129e:	cf 91       	pop	r28
    12a0:	1f 91       	pop	r17
    12a2:	0f 91       	pop	r16
    12a4:	08 95       	ret

000012a6 <nwkTxAckReceived>:
}

/*****************************************************************************
*****************************************************************************/
void nwkTxAckReceived(NWK_DataInd_t *ind)
{
    12a6:	1f 93       	push	r17
    12a8:	cf 93       	push	r28
    12aa:	df 93       	push	r29
  NwkAckCommand_t *command = (NwkAckCommand_t *)ind->data;
    12ac:	fc 01       	movw	r30, r24
    12ae:	c5 81       	ldd	r28, Z+5	; 0x05
    12b0:	d6 81       	ldd	r29, Z+6	; 0x06

  if (0 == nwkTxActiveFrames)
    12b2:	80 91 bb 06 	lds	r24, 0x06BB
    12b6:	88 23       	and	r24, r24
    12b8:	b1 f0       	breq	.+44     	; 0x12e6 <nwkTxAckReceived+0x40>
    12ba:	10 e0       	ldi	r17, 0x00	; 0
    return;

  for (int i = 0; i < NWK_BUFFERS_AMOUNT; i++)
  {
    NwkFrame_t *frame = nwkFrameByIndex(i);
    12bc:	81 2f       	mov	r24, r17
    12be:	0e 94 96 04 	call	0x92c	; 0x92c <nwkFrameByIndex>
    12c2:	fc 01       	movw	r30, r24

    if (NWK_TX_STATE_WAIT_ACK == frame->state && frame->data.header.nwkSeq == command->seq)
    12c4:	80 81       	ld	r24, Z
    12c6:	84 31       	cpi	r24, 0x14	; 20
    12c8:	59 f4       	brne	.+22     	; 0x12e0 <nwkTxAckReceived+0x3a>
    12ca:	94 85       	ldd	r25, Z+12	; 0x0c
    12cc:	89 81       	ldd	r24, Y+1	; 0x01
    12ce:	98 17       	cp	r25, r24
    12d0:	39 f4       	brne	.+14     	; 0x12e0 <nwkTxAckReceived+0x3a>
    {
      frame->state = NWK_TX_STATE_CONFIRM;
    12d2:	85 e1       	ldi	r24, 0x15	; 21
    12d4:	80 83       	st	Z, r24
      frame->tx.control = command->control;
    12d6:	8a 81       	ldd	r24, Y+2	; 0x02
    12d8:	ee 57       	subi	r30, 0x7E	; 126
    12da:	ff 4f       	sbci	r31, 0xFF	; 255
    12dc:	80 83       	st	Z, r24
      return;
    12de:	03 c0       	rjmp	.+6      	; 0x12e6 <nwkTxAckReceived+0x40>
    12e0:	1f 5f       	subi	r17, 0xFF	; 255
  NwkAckCommand_t *command = (NwkAckCommand_t *)ind->data;

  if (0 == nwkTxActiveFrames)
    return;

  for (int i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    12e2:	13 30       	cpi	r17, 0x03	; 3
    12e4:	59 f7       	brne	.-42     	; 0x12bc <nwkTxAckReceived+0x16>
      frame->state = NWK_TX_STATE_CONFIRM;
      frame->tx.control = command->control;
      return;
    }
  }
}
    12e6:	df 91       	pop	r29
    12e8:	cf 91       	pop	r28
    12ea:	1f 91       	pop	r17
    12ec:	08 95       	ret

000012ee <nwkTxBusy>:

/*****************************************************************************
*****************************************************************************/
bool nwkTxBusy(void)
{
  return nwkTxActiveFrames > 0;
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	90 91 bb 06 	lds	r25, 0x06BB
    12f4:	99 23       	and	r25, r25
    12f6:	09 f4       	brne	.+2      	; 0x12fa <nwkTxBusy+0xc>
    12f8:	80 e0       	ldi	r24, 0x00	; 0
}
    12fa:	08 95       	ret

000012fc <PHY_DataConf>:

/*****************************************************************************
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
  nwkTxPhyActiveFrame->tx.status = convertPhyStatus(status);
    12fc:	e0 91 b9 06 	lds	r30, 0x06B9
    1300:	f0 91 ba 06 	lds	r31, 0x06BA

/*****************************************************************************
*****************************************************************************/
static uint8_t convertPhyStatus(uint8_t status)
{
  if (TRAC_STATUS_SUCCESS == status ||
    1304:	83 30       	cpi	r24, 0x03	; 3
    1306:	30 f0       	brcs	.+12     	; 0x1314 <PHY_DataConf+0x18>
      TRAC_STATUS_SUCCESS_DATA_PENDING == status ||
      TRAC_STATUS_SUCCESS_WAIT_FOR_ACK == status)
    return NWK_SUCCESS_STATUS;

  else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
    1308:	83 30       	cpi	r24, 0x03	; 3
    130a:	31 f0       	breq	.+12     	; 0x1318 <PHY_DataConf+0x1c>
    return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;

  else if (TRAC_STATUS_NO_ACK == status)
    130c:	85 30       	cpi	r24, 0x05	; 5
    130e:	31 f4       	brne	.+12     	; 0x131c <PHY_DataConf+0x20>
    return NWK_PHY_NO_ACK_STATUS;
    1310:	81 e2       	ldi	r24, 0x21	; 33
    1312:	05 c0       	rjmp	.+10     	; 0x131e <PHY_DataConf+0x22>
static uint8_t convertPhyStatus(uint8_t status)
{
  if (TRAC_STATUS_SUCCESS == status ||
      TRAC_STATUS_SUCCESS_DATA_PENDING == status ||
      TRAC_STATUS_SUCCESS_WAIT_FOR_ACK == status)
    return NWK_SUCCESS_STATUS;
    1314:	80 e0       	ldi	r24, 0x00	; 0
    1316:	03 c0       	rjmp	.+6      	; 0x131e <PHY_DataConf+0x22>

  else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
    return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;
    1318:	80 e2       	ldi	r24, 0x20	; 32
    131a:	01 c0       	rjmp	.+2      	; 0x131e <PHY_DataConf+0x22>

  else if (TRAC_STATUS_NO_ACK == status)
    return NWK_PHY_NO_ACK_STATUS;

  else
    return NWK_ERROR_STATUS;
    131c:	81 e0       	ldi	r24, 0x01	; 1

/*****************************************************************************
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
  nwkTxPhyActiveFrame->tx.status = convertPhyStatus(status);
    131e:	df 01       	movw	r26, r30
    1320:	a1 58       	subi	r26, 0x81	; 129
    1322:	bf 4f       	sbci	r27, 0xFF	; 255
    1324:	8c 93       	st	X, r24
  nwkTxPhyActiveFrame->state = NWK_TX_STATE_SENT;
    1326:	83 e1       	ldi	r24, 0x13	; 19
    1328:	80 83       	st	Z, r24
  nwkTxPhyActiveFrame = NULL;
    132a:	10 92 ba 06 	sts	0x06BA, r1
    132e:	10 92 b9 06 	sts	0x06B9, r1
}
    1332:	08 95       	ret

00001334 <nwkTxTaskHandler>:

/*****************************************************************************
*****************************************************************************/
void nwkTxTaskHandler(void)
{
    1334:	cf 92       	push	r12
    1336:	df 92       	push	r13
    1338:	ef 92       	push	r14
    133a:	ff 92       	push	r15
    133c:	0f 93       	push	r16
    133e:	1f 93       	push	r17
    1340:	cf 93       	push	r28
    1342:	df 93       	push	r29
  if (0 == nwkTxActiveFrames)
    1344:	80 91 bb 06 	lds	r24, 0x06BB
    1348:	88 23       	and	r24, r24
    134a:	09 f4       	brne	.+2      	; 0x134e <nwkTxTaskHandler+0x1a>
    134c:	55 c0       	rjmp	.+170    	; 0x13f8 <nwkTxTaskHandler+0xc4>
    134e:	10 e0       	ldi	r17, 0x00	; 0
            frame->state = NWK_TX_STATE_CONFIRM;
          }
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
    1350:	05 e1       	ldi	r16, 0x15	; 21
        if (NWK_SUCCESS_STATUS == frame->tx.status)
        {
          if (frame->data.header.nwkSrcAddr == nwkIb.addr &&
              frame->data.header.nwkFcf.ackRequest)
          {
            frame->state = NWK_TX_STATE_WAIT_ACK;
    1352:	84 e1       	ldi	r24, 0x14	; 20
    1354:	f8 2e       	mov	r15, r24
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
    1356:	95 e1       	ldi	r25, 0x15	; 21
    1358:	c9 2e       	mov	r12, r25
    135a:	d1 2c       	mov	r13, r1
      case NWK_TX_STATE_SEND:
      {
        if (!PHY_Busy())
        {
          nwkTxPhyActiveFrame = frame;
          frame->state = NWK_TX_STATE_WAIT_CONF;
    135c:	22 e1       	ldi	r18, 0x12	; 18
    135e:	e2 2e       	mov	r14, r18
  if (0 == nwkTxActiveFrames)
    return;

  for (int i = 0; i < NWK_BUFFERS_AMOUNT; i++)
  {
    NwkFrame_t *frame = nwkFrameByIndex(i);
    1360:	81 2f       	mov	r24, r17
    1362:	0e 94 96 04 	call	0x92c	; 0x92c <nwkFrameByIndex>
    1366:	ec 01       	movw	r28, r24

    switch (frame->state)
    1368:	88 81       	ld	r24, Y
    136a:	83 31       	cpi	r24, 0x13	; 19
    136c:	99 f0       	breq	.+38     	; 0x1394 <nwkTxTaskHandler+0x60>
    136e:	85 31       	cpi	r24, 0x15	; 21
    1370:	79 f1       	breq	.+94     	; 0x13d0 <nwkTxTaskHandler+0x9c>
    1372:	81 31       	cpi	r24, 0x11	; 17
    1374:	e9 f5       	brne	.+122    	; 0x13f0 <nwkTxTaskHandler+0xbc>
      } break;
#endif

      case NWK_TX_STATE_SEND:
      {
        if (!PHY_Busy())
    1376:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <PHY_Busy>
    137a:	88 23       	and	r24, r24
    137c:	c9 f5       	brne	.+114    	; 0x13f0 <nwkTxTaskHandler+0xbc>
        {
          nwkTxPhyActiveFrame = frame;
    137e:	d0 93 ba 06 	sts	0x06BA, r29
    1382:	c0 93 b9 06 	sts	0x06B9, r28
          frame->state = NWK_TX_STATE_WAIT_CONF;
    1386:	e8 82       	st	Y, r14
          PHY_DataReq((uint8_t *)&frame->data, frame->size);
    1388:	ce 01       	movw	r24, r28
    138a:	02 96       	adiw	r24, 0x02	; 2
    138c:	69 81       	ldd	r22, Y+1	; 0x01
    138e:	0e 94 90 0a 	call	0x1520	; 0x1520 <PHY_DataReq>
    1392:	2e c0       	rjmp	.+92     	; 0x13f0 <nwkTxTaskHandler+0xbc>
      case NWK_TX_STATE_WAIT_CONF:
        break;

      case NWK_TX_STATE_SENT:
      {
        if (NWK_SUCCESS_STATUS == frame->tx.status)
    1394:	fe 01       	movw	r30, r28
    1396:	e1 58       	subi	r30, 0x81	; 129
    1398:	ff 4f       	sbci	r31, 0xFF	; 255
    139a:	80 81       	ld	r24, Z
    139c:	88 23       	and	r24, r24
    139e:	b1 f4       	brne	.+44     	; 0x13cc <nwkTxTaskHandler+0x98>
        {
          if (frame->data.header.nwkSrcAddr == nwkIb.addr &&
    13a0:	2d 85       	ldd	r18, Y+13	; 0x0d
    13a2:	3e 85       	ldd	r19, Y+14	; 0x0e
    13a4:	80 91 9f 07 	lds	r24, 0x079F
    13a8:	90 91 a0 07 	lds	r25, 0x07A0
    13ac:	28 17       	cp	r18, r24
    13ae:	39 07       	cpc	r19, r25
    13b0:	69 f4       	brne	.+26     	; 0x13cc <nwkTxTaskHandler+0x98>
    13b2:	8b 85       	ldd	r24, Y+11	; 0x0b
    13b4:	80 ff       	sbrs	r24, 0
    13b6:	0a c0       	rjmp	.+20     	; 0x13cc <nwkTxTaskHandler+0x98>
              frame->data.header.nwkFcf.ackRequest)
          {
            frame->state = NWK_TX_STATE_WAIT_ACK;
    13b8:	f8 82       	st	Y, r15
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
    13ba:	c0 58       	subi	r28, 0x80	; 128
    13bc:	df 4f       	sbci	r29, 0xFF	; 255
    13be:	d9 82       	std	Y+1, r13	; 0x01
    13c0:	c8 82       	st	Y, r12
            SYS_TimerStart(&nwkTxAckWaitTimer);
    13c2:	8c eb       	ldi	r24, 0xBC	; 188
    13c4:	96 e0       	ldi	r25, 0x06	; 6
    13c6:	0e 94 11 0c 	call	0x1822	; 0x1822 <SYS_TimerStart>
    13ca:	12 c0       	rjmp	.+36     	; 0x13f0 <nwkTxTaskHandler+0xbc>
            frame->state = NWK_TX_STATE_CONFIRM;
          }
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
    13cc:	08 83       	st	Y, r16
    13ce:	10 c0       	rjmp	.+32     	; 0x13f0 <nwkTxTaskHandler+0xbc>
        break;

      case NWK_TX_STATE_CONFIRM:
      {
#ifdef NWK_ENABLE_ROUTING
        nwkRouteFrameSent(frame);
    13d0:	ce 01       	movw	r24, r28
    13d2:	0e 94 47 05 	call	0xa8e	; 0xa8e <nwkRouteFrameSent>
#endif
        frame->tx.confirm(frame);
    13d6:	fe 01       	movw	r30, r28
    13d8:	ed 57       	subi	r30, 0x7D	; 125
    13da:	ff 4f       	sbci	r31, 0xFF	; 255
    13dc:	01 90       	ld	r0, Z+
    13de:	f0 81       	ld	r31, Z
    13e0:	e0 2d       	mov	r30, r0
    13e2:	ce 01       	movw	r24, r28
    13e4:	09 95       	icall
        --nwkTxActiveFrames;
    13e6:	80 91 bb 06 	lds	r24, 0x06BB
    13ea:	81 50       	subi	r24, 0x01	; 1
    13ec:	80 93 bb 06 	sts	0x06BB, r24
      } break;
    13f0:	1f 5f       	subi	r17, 0xFF	; 255
void nwkTxTaskHandler(void)
{
  if (0 == nwkTxActiveFrames)
    return;

  for (int i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    13f2:	13 30       	cpi	r17, 0x03	; 3
    13f4:	09 f0       	breq	.+2      	; 0x13f8 <nwkTxTaskHandler+0xc4>
    13f6:	b4 cf       	rjmp	.-152    	; 0x1360 <nwkTxTaskHandler+0x2c>

      default:
        break;
    };
  }
}
    13f8:	df 91       	pop	r29
    13fa:	cf 91       	pop	r28
    13fc:	1f 91       	pop	r17
    13fe:	0f 91       	pop	r16
    1400:	ff 90       	pop	r15
    1402:	ef 90       	pop	r14
    1404:	df 90       	pop	r13
    1406:	cf 90       	pop	r12
    1408:	08 95       	ret

0000140a <phyTrxSetState>:

/*****************************************************************************
*****************************************************************************/
static inline void phyTrxSetState(uint8_t state)
{
  TRX_STATE_REG = TRX_CMD_FORCE_TRX_OFF;
    140a:	93 e0       	ldi	r25, 0x03	; 3
    140c:	90 93 42 01 	sts	0x0142, r25
  TRX_STATE_REG = state;
    1410:	80 93 42 01 	sts	0x0142, r24
  while (state != TRX_STATUS_REG_s.trxStatus);
    1414:	90 91 41 01 	lds	r25, 0x0141
    1418:	9f 71       	andi	r25, 0x1F	; 31
    141a:	89 17       	cp	r24, r25
    141c:	d9 f7       	brne	.-10     	; 0x1414 <phyTrxSetState+0xa>
}
    141e:	08 95       	ret

00001420 <phySetRxState>:

/*****************************************************************************
*****************************************************************************/
static void phySetRxState(void)
{
  if (phyIb.rx)
    1420:	80 91 d3 06 	lds	r24, 0x06D3
    1424:	88 23       	and	r24, r24
    1426:	11 f0       	breq	.+4      	; 0x142c <phySetRxState+0xc>
    phyTrxSetState(TRX_CMD_RX_AACK_ON);
    1428:	86 e1       	ldi	r24, 0x16	; 22
    142a:	01 c0       	rjmp	.+2      	; 0x142e <phySetRxState+0xe>
  else
    phyTrxSetState(TRX_CMD_TRX_OFF);
    142c:	88 e0       	ldi	r24, 0x08	; 8
    142e:	0e 94 05 0a 	call	0x140a	; 0x140a <phyTrxSetState>
    1432:	08 95       	ret

00001434 <PHY_Init>:

/*****************************************************************************
*****************************************************************************/
void PHY_Init(void)
{
  TRXPR_REG_s.trxrst = 1;
    1434:	e9 e3       	ldi	r30, 0x39	; 57
    1436:	f1 e0       	ldi	r31, 0x01	; 1
    1438:	80 81       	ld	r24, Z
    143a:	81 60       	ori	r24, 0x01	; 1
    143c:	80 83       	st	Z, r24

  phyTrxSetState(TRX_CMD_TRX_OFF);
    143e:	88 e0       	ldi	r24, 0x08	; 8
    1440:	0e 94 05 0a 	call	0x140a	; 0x140a <phyTrxSetState>

  CSMA_SEED_1_REG_s.aackSetPd = 1;
    1444:	ee e6       	ldi	r30, 0x6E	; 110
    1446:	f1 e0       	ldi	r31, 0x01	; 1
    1448:	80 81       	ld	r24, Z
    144a:	80 62       	ori	r24, 0x20	; 32
    144c:	80 83       	st	Z, r24
  CSMA_SEED_1_REG_s.aackDisAck = 0;
    144e:	80 81       	ld	r24, Z
    1450:	8f 7e       	andi	r24, 0xEF	; 239
    1452:	80 83       	st	Z, r24

  IRQ_STATUS_REG = IRQ_STATUS_CLEAR_VALUE;
    1454:	8f ef       	ldi	r24, 0xFF	; 255
    1456:	80 93 4f 01 	sts	0x014F, r24
  IRQ_MASK_REG_s.rxEndEn = 1;
    145a:	ee e4       	ldi	r30, 0x4E	; 78
    145c:	f1 e0       	ldi	r31, 0x01	; 1
    145e:	80 81       	ld	r24, Z
    1460:	88 60       	ori	r24, 0x08	; 8
    1462:	80 83       	st	Z, r24
  IRQ_MASK_REG_s.txEndEn = 1;
    1464:	80 81       	ld	r24, Z
    1466:	80 64       	ori	r24, 0x40	; 64
    1468:	80 83       	st	Z, r24

  TRX_CTRL_2_REG_s.rxSafeMode = 1;
    146a:	ec e4       	ldi	r30, 0x4C	; 76
    146c:	f1 e0       	ldi	r31, 0x01	; 1
    146e:	80 81       	ld	r24, Z
    1470:	80 68       	ori	r24, 0x80	; 128
    1472:	80 83       	st	Z, r24

#ifdef PHY_ENABLE_RANDOM_NUMBER_GENERATOR
  CSMA_SEED_0_REG = (uint8_t)phyGetRandomNumber();
#else
  CSMA_SEED_0_REG = 0x11;
    1474:	81 e1       	ldi	r24, 0x11	; 17
    1476:	80 93 6d 01 	sts	0x016D, r24
#endif

  phyIb.request = PHY_REQ_NONE;
    147a:	10 92 cd 06 	sts	0x06CD, r1
  phyIb.rx = false;
    147e:	10 92 d3 06 	sts	0x06D3, r1
  phyState = PHY_STATE_IDLE;
    1482:	81 e0       	ldi	r24, 0x01	; 1
    1484:	80 93 cc 06 	sts	0x06CC, r24
}
    1488:	08 95       	ret

0000148a <PHY_SetRxState>:

/*****************************************************************************
*****************************************************************************/
void PHY_SetRxState(bool rx)
{
  phyIb.request |= PHY_REQ_RX;
    148a:	90 91 cd 06 	lds	r25, 0x06CD
    148e:	98 60       	ori	r25, 0x08	; 8
    1490:	90 93 cd 06 	sts	0x06CD, r25
  phyIb.rx = rx;
    1494:	80 93 d3 06 	sts	0x06D3, r24
}
    1498:	08 95       	ret

0000149a <PHY_SetChannel>:

/*****************************************************************************
*****************************************************************************/
void PHY_SetChannel(uint8_t channel)
{
  phyIb.request |= PHY_REQ_CHANNEL;
    149a:	90 91 cd 06 	lds	r25, 0x06CD
    149e:	91 60       	ori	r25, 0x01	; 1
    14a0:	90 93 cd 06 	sts	0x06CD, r25
  phyIb.channel = channel;
    14a4:	80 93 ce 06 	sts	0x06CE, r24
}
    14a8:	08 95       	ret

000014aa <PHY_SetPanId>:

/*****************************************************************************
*****************************************************************************/
void PHY_SetPanId(uint16_t panId)
{
  phyIb.request |= PHY_REQ_PANID;
    14aa:	20 91 cd 06 	lds	r18, 0x06CD
    14ae:	22 60       	ori	r18, 0x02	; 2
    14b0:	20 93 cd 06 	sts	0x06CD, r18
  phyIb.panId = panId;
    14b4:	90 93 d0 06 	sts	0x06D0, r25
    14b8:	80 93 cf 06 	sts	0x06CF, r24
}
    14bc:	08 95       	ret

000014be <PHY_SetShortAddr>:

/*****************************************************************************
*****************************************************************************/
void PHY_SetShortAddr(uint16_t addr)
{
  phyIb.request |= PHY_REQ_ADDR;
    14be:	20 91 cd 06 	lds	r18, 0x06CD
    14c2:	24 60       	ori	r18, 0x04	; 4
    14c4:	20 93 cd 06 	sts	0x06CD, r18
  phyIb.addr = addr;
    14c8:	90 93 d2 06 	sts	0x06D2, r25
    14cc:	80 93 d1 06 	sts	0x06D1, r24
}
    14d0:	08 95       	ret

000014d2 <PHY_Busy>:

/*****************************************************************************
*****************************************************************************/
bool PHY_Busy(void)
{
  return PHY_STATE_IDLE != phyState || PHY_REQ_NONE != phyIb.request;
    14d2:	80 91 cc 06 	lds	r24, 0x06CC
    14d6:	81 30       	cpi	r24, 0x01	; 1
    14d8:	49 f4       	brne	.+18     	; 0x14ec <PHY_Busy+0x1a>
    14da:	81 e0       	ldi	r24, 0x01	; 1
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	20 91 cd 06 	lds	r18, 0x06CD
    14e2:	22 23       	and	r18, r18
    14e4:	29 f4       	brne	.+10     	; 0x14f0 <PHY_Busy+0x1e>
    14e6:	80 e0       	ldi	r24, 0x00	; 0
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	08 95       	ret
    14ec:	81 e0       	ldi	r24, 0x01	; 1
    14ee:	90 e0       	ldi	r25, 0x00	; 0
}
    14f0:	08 95       	ret

000014f2 <PHY_Sleep>:

/*****************************************************************************
*****************************************************************************/
void PHY_Sleep(void)
{
  phyTrxSetState(TRX_CMD_TRX_OFF);
    14f2:	88 e0       	ldi	r24, 0x08	; 8
    14f4:	0e 94 05 0a 	call	0x140a	; 0x140a <phyTrxSetState>
  TRXPR_REG_s.slptr = 1;
    14f8:	e9 e3       	ldi	r30, 0x39	; 57
    14fa:	f1 e0       	ldi	r31, 0x01	; 1
    14fc:	80 81       	ld	r24, Z
    14fe:	82 60       	ori	r24, 0x02	; 2
    1500:	80 83       	st	Z, r24
  phyState = PHY_STATE_SLEEP;
    1502:	82 e0       	ldi	r24, 0x02	; 2
    1504:	80 93 cc 06 	sts	0x06CC, r24
}
    1508:	08 95       	ret

0000150a <PHY_Wakeup>:

/*****************************************************************************
*****************************************************************************/
void PHY_Wakeup(void)
{
  TRXPR_REG_s.slptr = 0;
    150a:	e9 e3       	ldi	r30, 0x39	; 57
    150c:	f1 e0       	ldi	r31, 0x01	; 1
    150e:	80 81       	ld	r24, Z
    1510:	8d 7f       	andi	r24, 0xFD	; 253
    1512:	80 83       	st	Z, r24
  phySetRxState();
    1514:	0e 94 10 0a 	call	0x1420	; 0x1420 <phySetRxState>
  phyState = PHY_STATE_IDLE;
    1518:	81 e0       	ldi	r24, 0x01	; 1
    151a:	80 93 cc 06 	sts	0x06CC, r24
}
    151e:	08 95       	ret

00001520 <PHY_DataReq>:

/*****************************************************************************
*****************************************************************************/
void PHY_DataReq(uint8_t *data, uint8_t size)
{
    1520:	1f 93       	push	r17
    1522:	cf 93       	push	r28
    1524:	df 93       	push	r29
    1526:	00 d0       	rcall	.+0      	; 0x1528 <PHY_DataReq+0x8>
    1528:	cd b7       	in	r28, 0x3d	; 61
    152a:	de b7       	in	r29, 0x3e	; 62
    152c:	18 2f       	mov	r17, r24
  phyTrxSetState(TRX_CMD_TX_ARET_ON);
    152e:	89 e1       	ldi	r24, 0x19	; 25
    1530:	69 83       	std	Y+1, r22	; 0x01
    1532:	9a 83       	std	Y+2, r25	; 0x02
    1534:	0e 94 05 0a 	call	0x140a	; 0x140a <phyTrxSetState>

  TRX_FRAME_BUFFER(0) = size + 2/*crc*/;
    1538:	69 81       	ldd	r22, Y+1	; 0x01
    153a:	86 2f       	mov	r24, r22
    153c:	8e 5f       	subi	r24, 0xFE	; 254
    153e:	80 93 80 01 	sts	0x0180, r24
  for (uint8_t i = 0; i < size; i++)
    1542:	e1 2f       	mov	r30, r17
    1544:	9a 81       	ldd	r25, Y+2	; 0x02
    1546:	f9 2f       	mov	r31, r25
    1548:	a1 e8       	ldi	r26, 0x81	; 129
    154a:	b1 e0       	ldi	r27, 0x01	; 1
    154c:	02 c0       	rjmp	.+4      	; 0x1552 <PHY_DataReq+0x32>
    TRX_FRAME_BUFFER(i+1) = data[i];
    154e:	81 91       	ld	r24, Z+
    1550:	8d 93       	st	X+, r24
void PHY_DataReq(uint8_t *data, uint8_t size)
{
  phyTrxSetState(TRX_CMD_TX_ARET_ON);

  TRX_FRAME_BUFFER(0) = size + 2/*crc*/;
  for (uint8_t i = 0; i < size; i++)
    1552:	8e 2f       	mov	r24, r30
    1554:	81 1b       	sub	r24, r17
    1556:	86 17       	cp	r24, r22
    1558:	d0 f3       	brcs	.-12     	; 0x154e <PHY_DataReq+0x2e>
    TRX_FRAME_BUFFER(i+1) = data[i];

  TRX_STATE_REG = TRX_CMD_TX_START;
    155a:	82 e0       	ldi	r24, 0x02	; 2
    155c:	80 93 42 01 	sts	0x0142, r24

  phyState = PHY_STATE_TX_WAIT_END;
    1560:	83 e0       	ldi	r24, 0x03	; 3
    1562:	80 93 cc 06 	sts	0x06CC, r24
}
    1566:	0f 90       	pop	r0
    1568:	0f 90       	pop	r0
    156a:	df 91       	pop	r29
    156c:	cf 91       	pop	r28
    156e:	1f 91       	pop	r17
    1570:	08 95       	ret

00001572 <__vector_63>:
#endif

/*****************************************************************************
*****************************************************************************/
ISR(TRX24_TX_END_vect)
{
    1572:	1f 92       	push	r1
    1574:	0f 92       	push	r0
    1576:	0f b6       	in	r0, 0x3f	; 63
    1578:	0f 92       	push	r0
    157a:	0b b6       	in	r0, 0x3b	; 59
    157c:	0f 92       	push	r0
    157e:	11 24       	eor	r1, r1
    1580:	2f 93       	push	r18
    1582:	3f 93       	push	r19
    1584:	4f 93       	push	r20
    1586:	5f 93       	push	r21
    1588:	6f 93       	push	r22
    158a:	7f 93       	push	r23
    158c:	8f 93       	push	r24
    158e:	9f 93       	push	r25
    1590:	af 93       	push	r26
    1592:	bf 93       	push	r27
    1594:	ef 93       	push	r30
    1596:	ff 93       	push	r31
  if (TRX_STATUS_TX_ARET_ON == TRX_STATUS_REG_s.trxStatus)
    1598:	80 91 41 01 	lds	r24, 0x0141
    159c:	8f 71       	andi	r24, 0x1F	; 31
    159e:	89 31       	cpi	r24, 0x19	; 25
    15a0:	69 f4       	brne	.+26     	; 0x15bc <__vector_63+0x4a>
  {
    //TRX_STATE_REG = TRX_CMD_PLL_ON; // Don't wait for this to complete
    phyTrxSetState(TRX_CMD_PLL_ON);
    15a2:	89 e0       	ldi	r24, 0x09	; 9
    15a4:	0e 94 05 0a 	call	0x140a	; 0x140a <phyTrxSetState>

    phyState = PHY_STATE_TX_CONFIRM;
    15a8:	84 e0       	ldi	r24, 0x04	; 4
    15aa:	80 93 cc 06 	sts	0x06CC, r24
    phyTxStatus = TRX_STATE_REG_s.tracStatus;
    15ae:	80 91 42 01 	lds	r24, 0x0142
    15b2:	82 95       	swap	r24
    15b4:	86 95       	lsr	r24
    15b6:	87 70       	andi	r24, 0x07	; 7
    15b8:	80 93 cb 06 	sts	0x06CB, r24
  }
  else
  {
    // Auto ACK transmission completed
  }
}
    15bc:	ff 91       	pop	r31
    15be:	ef 91       	pop	r30
    15c0:	bf 91       	pop	r27
    15c2:	af 91       	pop	r26
    15c4:	9f 91       	pop	r25
    15c6:	8f 91       	pop	r24
    15c8:	7f 91       	pop	r23
    15ca:	6f 91       	pop	r22
    15cc:	5f 91       	pop	r21
    15ce:	4f 91       	pop	r20
    15d0:	3f 91       	pop	r19
    15d2:	2f 91       	pop	r18
    15d4:	0f 90       	pop	r0
    15d6:	0b be       	out	0x3b, r0	; 59
    15d8:	0f 90       	pop	r0
    15da:	0f be       	out	0x3f, r0	; 63
    15dc:	0f 90       	pop	r0
    15de:	1f 90       	pop	r1
    15e0:	18 95       	reti

000015e2 <__vector_60>:
#endif

/*****************************************************************************
*****************************************************************************/
ISR(TRX24_RX_END_vect)
{
    15e2:	1f 92       	push	r1
    15e4:	0f 92       	push	r0
    15e6:	0f b6       	in	r0, 0x3f	; 63
    15e8:	0f 92       	push	r0
    15ea:	11 24       	eor	r1, r1
    15ec:	8f 93       	push	r24
  TRX_STATE_REG = TRX_CMD_PLL_ON; // Don't wait for this to complete
    15ee:	89 e0       	ldi	r24, 0x09	; 9
    15f0:	80 93 42 01 	sts	0x0142, r24
  phyRxRssi = (int8_t)PHY_ED_LEVEL_REG;
    15f4:	80 91 47 01 	lds	r24, 0x0147
    15f8:	80 93 ca 06 	sts	0x06CA, r24
  phyRxSize = TST_RX_LENGTH_REG;
    15fc:	80 91 7b 01 	lds	r24, 0x017B
    1600:	80 93 c9 06 	sts	0x06C9, r24
  phyState = PHY_STATE_RX_IND;
    1604:	85 e0       	ldi	r24, 0x05	; 5
    1606:	80 93 cc 06 	sts	0x06CC, r24
}
    160a:	8f 91       	pop	r24
    160c:	0f 90       	pop	r0
    160e:	0f be       	out	0x3f, r0	; 63
    1610:	0f 90       	pop	r0
    1612:	1f 90       	pop	r1
    1614:	18 95       	reti

00001616 <PHY_TaskHandler>:
}

/*****************************************************************************
*****************************************************************************/
void PHY_TaskHandler(void)
{
    1616:	1f 93       	push	r17
    1618:	cf 93       	push	r28
    161a:	df 93       	push	r29
    161c:	00 d0       	rcall	.+0      	; 0x161e <PHY_TaskHandler+0x8>
    161e:	00 d0       	rcall	.+0      	; 0x1620 <PHY_TaskHandler+0xa>
    1620:	0f 92       	push	r0
    1622:	cd b7       	in	r28, 0x3d	; 61
    1624:	de b7       	in	r29, 0x3e	; 62
  switch (phyState)
    1626:	80 91 cc 06 	lds	r24, 0x06CC
    162a:	84 30       	cpi	r24, 0x04	; 4
    162c:	b1 f1       	breq	.+108    	; 0x169a <PHY_TaskHandler+0x84>
    162e:	85 30       	cpi	r24, 0x05	; 5
    1630:	09 f4       	brne	.+2      	; 0x1634 <PHY_TaskHandler+0x1e>
    1632:	47 c0       	rjmp	.+142    	; 0x16c2 <PHY_TaskHandler+0xac>
    1634:	81 30       	cpi	r24, 0x01	; 1
    1636:	09 f0       	breq	.+2      	; 0x163a <PHY_TaskHandler+0x24>
    1638:	6e c0       	rjmp	.+220    	; 0x1716 <PHY_TaskHandler+0x100>
  {
    case PHY_STATE_IDLE:
    {
      if (phyIb.request)
    163a:	10 91 cd 06 	lds	r17, 0x06CD
    163e:	11 23       	and	r17, r17
    1640:	09 f4       	brne	.+2      	; 0x1644 <PHY_TaskHandler+0x2e>
    1642:	69 c0       	rjmp	.+210    	; 0x1716 <PHY_TaskHandler+0x100>

/*****************************************************************************
*****************************************************************************/
static void phyHandleSetRequests(void)
{
  phyTrxSetState(TRX_CMD_TRX_OFF);
    1644:	88 e0       	ldi	r24, 0x08	; 8
    1646:	0e 94 05 0a 	call	0x140a	; 0x140a <phyTrxSetState>

  if (phyIb.request & PHY_REQ_CHANNEL)
    164a:	10 ff       	sbrs	r17, 0
    164c:	09 c0       	rjmp	.+18     	; 0x1660 <PHY_TaskHandler+0x4a>
  {
    PHY_CC_CCA_REG_s.channel = phyIb.channel;
    164e:	90 91 ce 06 	lds	r25, 0x06CE
    1652:	9f 71       	andi	r25, 0x1F	; 31
    1654:	80 91 48 01 	lds	r24, 0x0148
    1658:	80 7e       	andi	r24, 0xE0	; 224
    165a:	89 2b       	or	r24, r25
    165c:	80 93 48 01 	sts	0x0148, r24
  }

  if (phyIb.request & PHY_REQ_PANID)
    1660:	80 91 cd 06 	lds	r24, 0x06CD
    1664:	81 ff       	sbrs	r24, 1
    1666:	08 c0       	rjmp	.+16     	; 0x1678 <PHY_TaskHandler+0x62>
  {
    uint8_t *d = (uint8_t *)&phyIb.panId;
    PAN_ID_0_REG = d[0];
    1668:	80 91 cf 06 	lds	r24, 0x06CF
    166c:	80 93 62 01 	sts	0x0162, r24
    PAN_ID_1_REG = d[1];
    1670:	80 91 d0 06 	lds	r24, 0x06D0
    1674:	80 93 63 01 	sts	0x0163, r24
  }

  if (phyIb.request & PHY_REQ_ADDR)
    1678:	80 91 cd 06 	lds	r24, 0x06CD
    167c:	82 ff       	sbrs	r24, 2
    167e:	08 c0       	rjmp	.+16     	; 0x1690 <PHY_TaskHandler+0x7a>
  {
    uint8_t *d = (uint8_t *)&phyIb.addr;
    SHORT_ADDR_0_REG = d[0];
    1680:	80 91 d1 06 	lds	r24, 0x06D1
    1684:	80 93 60 01 	sts	0x0160, r24
    SHORT_ADDR_1_REG = d[1];
    1688:	80 91 d2 06 	lds	r24, 0x06D2
    168c:	80 93 61 01 	sts	0x0161, r24

#ifdef PHY_ENABLE_ENERGY_DETECTION
  if (!(phyIb.request & PHY_REQ_ED))
    phySetRxState();
#else
  phySetRxState();
    1690:	0e 94 10 0a 	call	0x1420	; 0x1420 <phySetRxState>
#endif

  phyIb.request = PHY_REQ_NONE;
    1694:	10 92 cd 06 	sts	0x06CD, r1
    1698:	3e c0       	rjmp	.+124    	; 0x1716 <PHY_TaskHandler+0x100>
        phyHandleSetRequests();
    } break;

    case PHY_STATE_TX_CONFIRM:
    {
      PHY_DataConf(phyTxStatus);
    169a:	80 91 cb 06 	lds	r24, 0x06CB
    169e:	0e 94 7e 09 	call	0x12fc	; 0x12fc <PHY_DataConf>

      while (TRX_CMD_PLL_ON != TRX_STATUS_REG_s.trxStatus);
    16a2:	80 91 41 01 	lds	r24, 0x0141
    16a6:	8f 71       	andi	r24, 0x1F	; 31
    16a8:	89 30       	cpi	r24, 0x09	; 9
    16aa:	d9 f7       	brne	.-10     	; 0x16a2 <PHY_TaskHandler+0x8c>
    16ac:	2f c0       	rjmp	.+94     	; 0x170c <PHY_TaskHandler+0xf6>
    case PHY_STATE_RX_IND:
    {
      PHY_DataInd_t ind;

      for (uint8_t i = 0; i < phyRxSize + 1/*lqi*/; i++)
        phyRxBuffer[i] = TRX_FRAME_BUFFER(i);
    16ae:	fc 01       	movw	r30, r24
    16b0:	e0 58       	subi	r30, 0x80	; 128
    16b2:	fe 4f       	sbci	r31, 0xFE	; 254
    16b4:	20 81       	ld	r18, Z
    16b6:	8c 52       	subi	r24, 0x2C	; 44
    16b8:	99 4f       	sbci	r25, 0xF9	; 249
    16ba:	fc 01       	movw	r30, r24
    16bc:	20 83       	st	Z, r18

    case PHY_STATE_RX_IND:
    {
      PHY_DataInd_t ind;

      for (uint8_t i = 0; i < phyRxSize + 1/*lqi*/; i++)
    16be:	4f 5f       	subi	r20, 0xFF	; 255
    16c0:	01 c0       	rjmp	.+2      	; 0x16c4 <PHY_TaskHandler+0xae>

/*****************************************************************************
*****************************************************************************/
void PHY_TaskHandler(void)
{
  switch (phyState)
    16c2:	40 e0       	ldi	r20, 0x00	; 0

    case PHY_STATE_RX_IND:
    {
      PHY_DataInd_t ind;

      for (uint8_t i = 0; i < phyRxSize + 1/*lqi*/; i++)
    16c4:	20 91 c9 06 	lds	r18, 0x06C9
    16c8:	84 2f       	mov	r24, r20
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	28 17       	cp	r18, r24
    16d0:	39 07       	cpc	r19, r25
    16d2:	6c f7       	brge	.-38     	; 0x16ae <PHY_TaskHandler+0x98>
        phyRxBuffer[i] = TRX_FRAME_BUFFER(i);

      ind.data = phyRxBuffer;
    16d4:	84 ed       	ldi	r24, 0xD4	; 212
    16d6:	96 e0       	ldi	r25, 0x06	; 6
    16d8:	9a 83       	std	Y+2, r25	; 0x02
    16da:	89 83       	std	Y+1, r24	; 0x01
      ind.size = phyRxSize - 2/*crc*/;
    16dc:	80 91 c9 06 	lds	r24, 0x06C9
    16e0:	82 50       	subi	r24, 0x02	; 2
    16e2:	8b 83       	std	Y+3, r24	; 0x03
      ind.lqi  = phyRxBuffer[phyRxSize];
    16e4:	e0 91 c9 06 	lds	r30, 0x06C9
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	ec 52       	subi	r30, 0x2C	; 44
    16ec:	f9 4f       	sbci	r31, 0xF9	; 249
    16ee:	80 81       	ld	r24, Z
    16f0:	8c 83       	std	Y+4, r24	; 0x04
      ind.rssi = phyRxRssi + PHY_RSSI_BASE_VAL;
    16f2:	80 91 ca 06 	lds	r24, 0x06CA
    16f6:	8a 55       	subi	r24, 0x5A	; 90
    16f8:	8d 83       	std	Y+5, r24	; 0x05
      PHY_DataInd(&ind);
    16fa:	ce 01       	movw	r24, r28
    16fc:	01 96       	adiw	r24, 0x01	; 1
    16fe:	0e 94 70 06 	call	0xce0	; 0xce0 <PHY_DataInd>

      while (TRX_CMD_PLL_ON != TRX_STATUS_REG_s.trxStatus);
    1702:	80 91 41 01 	lds	r24, 0x0141
    1706:	8f 71       	andi	r24, 0x1F	; 31
    1708:	89 30       	cpi	r24, 0x09	; 9
    170a:	d9 f7       	brne	.-10     	; 0x1702 <PHY_TaskHandler+0xec>
      phyState = PHY_STATE_IDLE;
    170c:	81 e0       	ldi	r24, 0x01	; 1
    170e:	80 93 cc 06 	sts	0x06CC, r24
      phySetRxState();
    1712:	0e 94 10 0a 	call	0x1420	; 0x1420 <phySetRxState>
#endif

    default:
      break;
  }
}
    1716:	0f 90       	pop	r0
    1718:	0f 90       	pop	r0
    171a:	0f 90       	pop	r0
    171c:	0f 90       	pop	r0
    171e:	0f 90       	pop	r0
    1720:	df 91       	pop	r29
    1722:	cf 91       	pop	r28
    1724:	1f 91       	pop	r17
    1726:	08 95       	ret

00001728 <SYS_Init>:

/*****************************************************************************
*****************************************************************************/
void SYS_Init(void)
{
  HAL_Init();
    1728:	0e 94 18 01 	call	0x230	; 0x230 <HAL_Init>
  SYS_TimerInit();
    172c:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <SYS_TimerInit>
  PHY_Init();
    1730:	0e 94 1a 0a 	call	0x1434	; 0x1434 <PHY_Init>
  NWK_Init();
    1734:	0e 94 59 03 	call	0x6b2	; 0x6b2 <NWK_Init>
}
    1738:	08 95       	ret

0000173a <SYS_TaskHandler>:

/*****************************************************************************
*****************************************************************************/
void SYS_TaskHandler(void)
{
  PHY_TaskHandler();
    173a:	0e 94 0b 0b 	call	0x1616	; 0x1616 <PHY_TaskHandler>
  NWK_TaskHandler();
    173e:	0e 94 a4 03 	call	0x748	; 0x748 <NWK_TaskHandler>
  SYS_TimerTaskHandler();
    1742:	0e 94 1e 0c 	call	0x183c	; 0x183c <SYS_TimerTaskHandler>
}
    1746:	08 95       	ret

00001748 <placeTimer>:
}

/*****************************************************************************
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    1748:	0f 93       	push	r16
    174a:	1f 93       	push	r17
    174c:	cf 93       	push	r28
    174e:	df 93       	push	r29
    1750:	fc 01       	movw	r30, r24
  if (timers)
    1752:	00 91 54 07 	lds	r16, 0x0754
    1756:	10 91 55 07 	lds	r17, 0x0755
    175a:	36 81       	ldd	r19, Z+6	; 0x06
    175c:	27 81       	ldd	r18, Z+7	; 0x07
    175e:	90 85       	ldd	r25, Z+8	; 0x08
    1760:	81 85       	ldd	r24, Z+9	; 0x09
    1762:	01 15       	cp	r16, r1
    1764:	11 05       	cpc	r17, r1
    1766:	c1 f1       	breq	.+112    	; 0x17d8 <placeTimer+0x90>
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;
    1768:	43 2f       	mov	r20, r19
    176a:	52 2f       	mov	r21, r18
    176c:	69 2f       	mov	r22, r25
    176e:	78 2f       	mov	r23, r24
    1770:	e8 01       	movw	r28, r16
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    1772:	20 e0       	ldi	r18, 0x00	; 0
    1774:	30 e0       	ldi	r19, 0x00	; 0
    1776:	01 c0       	rjmp	.+2      	; 0x177a <placeTimer+0x32>
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    1778:	ec 01       	movw	r28, r24
    {
      if (timeout < t->timeout)
    177a:	8a 81       	ldd	r24, Y+2	; 0x02
    177c:	9b 81       	ldd	r25, Y+3	; 0x03
    177e:	ac 81       	ldd	r26, Y+4	; 0x04
    1780:	bd 81       	ldd	r27, Y+5	; 0x05
    1782:	48 17       	cp	r20, r24
    1784:	59 07       	cpc	r21, r25
    1786:	6a 07       	cpc	r22, r26
    1788:	7b 07       	cpc	r23, r27
    178a:	48 f4       	brcc	.+18     	; 0x179e <placeTimer+0x56>
      {
         t->timeout -= timeout;
    178c:	84 1b       	sub	r24, r20
    178e:	95 0b       	sbc	r25, r21
    1790:	a6 0b       	sbc	r26, r22
    1792:	b7 0b       	sbc	r27, r23
    1794:	8a 83       	std	Y+2, r24	; 0x02
    1796:	9b 83       	std	Y+3, r25	; 0x03
    1798:	ac 83       	std	Y+4, r26	; 0x04
    179a:	bd 83       	std	Y+5, r27	; 0x05
         break;
    179c:	09 c0       	rjmp	.+18     	; 0x17b0 <placeTimer+0x68>
      }
      else
        timeout -= t->timeout;
    179e:	48 1b       	sub	r20, r24
    17a0:	59 0b       	sbc	r21, r25
    17a2:	6a 0b       	sbc	r22, r26
    17a4:	7b 0b       	sbc	r23, r27
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    17a6:	88 81       	ld	r24, Y
    17a8:	99 81       	ldd	r25, Y+1	; 0x01
    17aa:	9e 01       	movw	r18, r28
    17ac:	00 97       	sbiw	r24, 0x00	; 0
    17ae:	21 f7       	brne	.-56     	; 0x1778 <placeTimer+0x30>
        timeout -= t->timeout;

      prev = t;
    }

    timer->timeout = timeout;
    17b0:	42 83       	std	Z+2, r20	; 0x02
    17b2:	53 83       	std	Z+3, r21	; 0x03
    17b4:	64 83       	std	Z+4, r22	; 0x04
    17b6:	75 83       	std	Z+5, r23	; 0x05

    if (prev)
    17b8:	21 15       	cp	r18, r1
    17ba:	31 05       	cpc	r19, r1
    17bc:	51 f0       	breq	.+20     	; 0x17d2 <placeTimer+0x8a>
    {
      timer->next = prev->next;
    17be:	d9 01       	movw	r26, r18
    17c0:	8d 91       	ld	r24, X+
    17c2:	9c 91       	ld	r25, X
    17c4:	11 97       	sbiw	r26, 0x01	; 1
    17c6:	91 83       	std	Z+1, r25	; 0x01
    17c8:	80 83       	st	Z, r24
      prev->next = timer;
    17ca:	11 96       	adiw	r26, 0x01	; 1
    17cc:	fc 93       	st	X, r31
    17ce:	ee 93       	st	-X, r30
    17d0:	0d c0       	rjmp	.+26     	; 0x17ec <placeTimer+0xa4>
    }
    else
    {
      timer->next = timers;
    17d2:	11 83       	std	Z+1, r17	; 0x01
    17d4:	00 83       	st	Z, r16
    17d6:	06 c0       	rjmp	.+12     	; 0x17e4 <placeTimer+0x9c>
      timers = timer;
    }
  }
  else
  {
    timer->next = NULL;
    17d8:	11 82       	std	Z+1, r1	; 0x01
    17da:	10 82       	st	Z, r1
    timer->timeout = timer->interval;
    17dc:	32 83       	std	Z+2, r19	; 0x02
    17de:	23 83       	std	Z+3, r18	; 0x03
    17e0:	94 83       	std	Z+4, r25	; 0x04
    17e2:	85 83       	std	Z+5, r24	; 0x05
    timers = timer;
    17e4:	f0 93 55 07 	sts	0x0755, r31
    17e8:	e0 93 54 07 	sts	0x0754, r30
  }
}
    17ec:	df 91       	pop	r29
    17ee:	cf 91       	pop	r28
    17f0:	1f 91       	pop	r17
    17f2:	0f 91       	pop	r16
    17f4:	08 95       	ret

000017f6 <SYS_TimerInit>:

/*****************************************************************************
*****************************************************************************/
void SYS_TimerInit(void)
{
  timers = NULL;
    17f6:	10 92 55 07 	sts	0x0755, r1
    17fa:	10 92 54 07 	sts	0x0754, r1
}
    17fe:	08 95       	ret

00001800 <SYS_TimerStarted>:

/*****************************************************************************
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    1800:	e0 91 54 07 	lds	r30, 0x0754
    1804:	f0 91 55 07 	lds	r31, 0x0755
    1808:	06 c0       	rjmp	.+12     	; 0x1816 <SYS_TimerStarted+0x16>
    if (t == timer)
    180a:	e8 17       	cp	r30, r24
    180c:	f9 07       	cpc	r31, r25
    180e:	39 f0       	breq	.+14     	; 0x181e <SYS_TimerStarted+0x1e>

/*****************************************************************************
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    1810:	01 90       	ld	r0, Z+
    1812:	f0 81       	ld	r31, Z
    1814:	e0 2d       	mov	r30, r0
    1816:	30 97       	sbiw	r30, 0x00	; 0
    1818:	c1 f7       	brne	.-16     	; 0x180a <SYS_TimerStarted+0xa>
    if (t == timer)
      return true;
  return false;
    181a:	80 e0       	ldi	r24, 0x00	; 0
    181c:	08 95       	ret
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    if (t == timer)
      return true;
    181e:	81 e0       	ldi	r24, 0x01	; 1
  return false;
}
    1820:	08 95       	ret

00001822 <SYS_TimerStart>:
}

/*****************************************************************************
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
    1822:	cf 93       	push	r28
    1824:	df 93       	push	r29
    1826:	ec 01       	movw	r28, r24
  if (!SYS_TimerStarted(timer))
    1828:	0e 94 00 0c 	call	0x1800	; 0x1800 <SYS_TimerStarted>
    182c:	88 23       	and	r24, r24
    182e:	19 f4       	brne	.+6      	; 0x1836 <SYS_TimerStart+0x14>
    placeTimer(timer);
    1830:	ce 01       	movw	r24, r28
    1832:	0e 94 a4 0b 	call	0x1748	; 0x1748 <placeTimer>
}
    1836:	df 91       	pop	r29
    1838:	cf 91       	pop	r28
    183a:	08 95       	ret

0000183c <SYS_TimerTaskHandler>:
}

/*****************************************************************************
*****************************************************************************/
void SYS_TimerTaskHandler(void)
{
    183c:	cf 92       	push	r12
    183e:	df 92       	push	r13
    1840:	ef 92       	push	r14
    1842:	ff 92       	push	r15
    1844:	cf 93       	push	r28
    1846:	df 93       	push	r29
  uint32_t elapsed;
  uint8_t cnt;

  if (0 == halTimerIrqCount)
    1848:	80 91 9e 07 	lds	r24, 0x079E
    184c:	88 23       	and	r24, r24
    184e:	09 f4       	brne	.+2      	; 0x1852 <SYS_TimerTaskHandler+0x16>
    1850:	3e c0       	rjmp	.+124    	; 0x18ce <SYS_TimerTaskHandler+0x92>
    return;

  ATOMIC_SECTION_ENTER
    1852:	8f b7       	in	r24, 0x3f	; 63
    1854:	f8 94       	cli
    cnt = halTimerIrqCount;
    1856:	60 91 9e 07 	lds	r22, 0x079E
    halTimerIrqCount = 0;
    185a:	10 92 9e 07 	sts	0x079E, r1
  ATOMIC_SECTION_LEAVE
    185e:	8f bf       	out	0x3f, r24	; 63

  elapsed = cnt * HAL_TIMER_INTERVAL;
    1860:	70 e0       	ldi	r23, 0x00	; 0
    1862:	80 e0       	ldi	r24, 0x00	; 0
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	2a e0       	ldi	r18, 0x0A	; 10
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	40 e0       	ldi	r20, 0x00	; 0
    186c:	50 e0       	ldi	r21, 0x00	; 0
    186e:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <__mulsi3>
    1872:	6b 01       	movw	r12, r22
    1874:	7c 01       	movw	r14, r24

  while (timers && (timers->timeout <= elapsed))
    1876:	14 c0       	rjmp	.+40     	; 0x18a0 <SYS_TimerTaskHandler+0x64>
  {
    SYS_Timer_t *timer = timers;

    elapsed -= timers->timeout;
    1878:	c8 1a       	sub	r12, r24
    187a:	d9 0a       	sbc	r13, r25
    187c:	ea 0a       	sbc	r14, r26
    187e:	fb 0a       	sbc	r15, r27
    timers = timers->next;
    1880:	88 81       	ld	r24, Y
    1882:	99 81       	ldd	r25, Y+1	; 0x01
    1884:	90 93 55 07 	sts	0x0755, r25
    1888:	80 93 54 07 	sts	0x0754, r24
    if (SYS_TIMER_PERIODIC_MODE == timer->mode)
    188c:	8a 85       	ldd	r24, Y+10	; 0x0a
    188e:	81 30       	cpi	r24, 0x01	; 1
    1890:	19 f4       	brne	.+6      	; 0x1898 <SYS_TimerTaskHandler+0x5c>
      placeTimer(timer);
    1892:	ce 01       	movw	r24, r28
    1894:	0e 94 a4 0b 	call	0x1748	; 0x1748 <placeTimer>
    timer->handler(timer);
    1898:	eb 85       	ldd	r30, Y+11	; 0x0b
    189a:	fc 85       	ldd	r31, Y+12	; 0x0c
    189c:	ce 01       	movw	r24, r28
    189e:	09 95       	icall
    halTimerIrqCount = 0;
  ATOMIC_SECTION_LEAVE

  elapsed = cnt * HAL_TIMER_INTERVAL;

  while (timers && (timers->timeout <= elapsed))
    18a0:	c0 91 54 07 	lds	r28, 0x0754
    18a4:	d0 91 55 07 	lds	r29, 0x0755
    18a8:	20 97       	sbiw	r28, 0x00	; 0
    18aa:	89 f0       	breq	.+34     	; 0x18ce <SYS_TimerTaskHandler+0x92>
    18ac:	8a 81       	ldd	r24, Y+2	; 0x02
    18ae:	9b 81       	ldd	r25, Y+3	; 0x03
    18b0:	ac 81       	ldd	r26, Y+4	; 0x04
    18b2:	bd 81       	ldd	r27, Y+5	; 0x05
    18b4:	c8 16       	cp	r12, r24
    18b6:	d9 06       	cpc	r13, r25
    18b8:	ea 06       	cpc	r14, r26
    18ba:	fb 06       	cpc	r15, r27
    18bc:	e8 f6       	brcc	.-70     	; 0x1878 <SYS_TimerTaskHandler+0x3c>
      placeTimer(timer);
    timer->handler(timer);
  }

  if (timers)
    timers->timeout -= elapsed;
    18be:	8c 19       	sub	r24, r12
    18c0:	9d 09       	sbc	r25, r13
    18c2:	ae 09       	sbc	r26, r14
    18c4:	bf 09       	sbc	r27, r15
    18c6:	8a 83       	std	Y+2, r24	; 0x02
    18c8:	9b 83       	std	Y+3, r25	; 0x03
    18ca:	ac 83       	std	Y+4, r26	; 0x04
    18cc:	bd 83       	std	Y+5, r27	; 0x05
}
    18ce:	df 91       	pop	r29
    18d0:	cf 91       	pop	r28
    18d2:	ff 90       	pop	r15
    18d4:	ef 90       	pop	r14
    18d6:	df 90       	pop	r13
    18d8:	cf 90       	pop	r12
    18da:	08 95       	ret

000018dc <appSendMessage>:
}

/*****************************************************************************
*****************************************************************************/
static void appSendMessage(uint8_t *data, uint8_t size)
{
    18dc:	af 92       	push	r10
    18de:	bf 92       	push	r11
    18e0:	df 92       	push	r13
    18e2:	ef 92       	push	r14
    18e4:	ff 92       	push	r15
    18e6:	0f 93       	push	r16
    18e8:	1f 93       	push	r17
    18ea:	cf 93       	push	r28
    18ec:	df 93       	push	r29
    18ee:	0f 92       	push	r0
    18f0:	cd b7       	in	r28, 0x3d	; 61
    18f2:	de b7       	in	r29, 0x3e	; 62
    18f4:	f8 2e       	mov	r15, r24
    18f6:	d6 2e       	mov	r13, r22
	uint8_t cs = 0;

	HAL_UartWriteByte(0x10);
    18f8:	80 e1       	ldi	r24, 0x10	; 16
    18fa:	99 83       	std	Y+1, r25	; 0x01
    18fc:	0e 94 46 02 	call	0x48c	; 0x48c <HAL_UartWriteByte>
	HAL_UartWriteByte(0x02);
    1900:	82 e0       	ldi	r24, 0x02	; 2
    1902:	0e 94 46 02 	call	0x48c	; 0x48c <HAL_UartWriteByte>

	for (uint8_t i = 0; i < size; i++)
    1906:	0f 2d       	mov	r16, r15
    1908:	99 81       	ldd	r25, Y+1	; 0x01
    190a:	19 2f       	mov	r17, r25

/*****************************************************************************
*****************************************************************************/
static void appSendMessage(uint8_t *data, uint8_t size)
{
	uint8_t cs = 0;
    190c:	ee 24       	eor	r14, r14

	HAL_UartWriteByte(0x10);
	HAL_UartWriteByte(0x02);

	for (uint8_t i = 0; i < size; i++)
    190e:	11 c0       	rjmp	.+34     	; 0x1932 <appSendMessage+0x56>
	ledToggle(2);
}

/*****************************************************************************
*****************************************************************************/
static void appSendMessage(uint8_t *data, uint8_t size)
    1910:	58 01       	movw	r10, r16
	HAL_UartWriteByte(0x10);
	HAL_UartWriteByte(0x02);

	for (uint8_t i = 0; i < size; i++)
	{
		if (data[i] == 0x10)
    1912:	f8 01       	movw	r30, r16
    1914:	80 81       	ld	r24, Z
    1916:	80 31       	cpi	r24, 0x10	; 16
    1918:	21 f4       	brne	.+8      	; 0x1922 <appSendMessage+0x46>
		{
			HAL_UartWriteByte(0x10);
    191a:	0e 94 46 02 	call	0x48c	; 0x48c <HAL_UartWriteByte>
			cs += 0x10;
    191e:	f0 e1       	ldi	r31, 0x10	; 16
    1920:	ef 0e       	add	r14, r31
		}
		HAL_UartWriteByte(data[i]);
    1922:	f8 01       	movw	r30, r16
    1924:	81 91       	ld	r24, Z+
    1926:	8f 01       	movw	r16, r30
    1928:	0e 94 46 02 	call	0x48c	; 0x48c <HAL_UartWriteByte>
		cs += data[i];
    192c:	f5 01       	movw	r30, r10
    192e:	80 81       	ld	r24, Z
    1930:	e8 0e       	add	r14, r24
	uint8_t cs = 0;

	HAL_UartWriteByte(0x10);
	HAL_UartWriteByte(0x02);

	for (uint8_t i = 0; i < size; i++)
    1932:	80 2f       	mov	r24, r16
    1934:	8f 19       	sub	r24, r15
    1936:	8d 15       	cp	r24, r13
    1938:	58 f3       	brcs	.-42     	; 0x1910 <appSendMessage+0x34>
		}
		HAL_UartWriteByte(data[i]);
		cs += data[i];
	}

	HAL_UartWriteByte(0x10);
    193a:	80 e1       	ldi	r24, 0x10	; 16
    193c:	0e 94 46 02 	call	0x48c	; 0x48c <HAL_UartWriteByte>
	HAL_UartWriteByte(0x03);
    1940:	83 e0       	ldi	r24, 0x03	; 3
    1942:	0e 94 46 02 	call	0x48c	; 0x48c <HAL_UartWriteByte>
	cs += 0x10 + 0x02 + 0x10 + 0x03;

	HAL_UartWriteByte(cs);
    1946:	8e 2d       	mov	r24, r14
    1948:	8b 5d       	subi	r24, 0xDB	; 219
    194a:	0e 94 46 02 	call	0x48c	; 0x48c <HAL_UartWriteByte>
}
    194e:	0f 90       	pop	r0
    1950:	df 91       	pop	r29
    1952:	cf 91       	pop	r28
    1954:	1f 91       	pop	r17
    1956:	0f 91       	pop	r16
    1958:	ff 90       	pop	r15
    195a:	ef 90       	pop	r14
    195c:	df 90       	pop	r13
    195e:	bf 90       	pop	r11
    1960:	af 90       	pop	r10
    1962:	08 95       	ret

00001964 <appDataInd>:

/*****************************************************************************
*****************************************************************************/
static bool appDataInd(NWK_DataInd_t *ind)
{
    1964:	fc 01       	movw	r30, r24
	AppMessage_t *msg = (AppMessage_t *)ind->data;
    1966:	a5 81       	ldd	r26, Z+5	; 0x05
    1968:	b6 81       	ldd	r27, Z+6	; 0x06
#define __INVERT_ON_OFF

#include "hal.h"
#include "halGpio.h"

HAL_GPIO_PIN(LED0, B, 4);
    196a:	85 b1       	in	r24, 0x05	; 5
    196c:	90 e1       	ldi	r25, 0x10	; 16
    196e:	89 27       	eor	r24, r25
    1970:	85 b9       	out	0x05, r24	; 5

	ledToggle(LED_DATA);

	msg->lqi = ind->lqi;
    1972:	80 85       	ldd	r24, Z+8	; 0x08
    1974:	59 96       	adiw	r26, 0x19	; 25
    1976:	8c 93       	st	X, r24
    1978:	59 97       	sbiw	r26, 0x19	; 25
	msg->rssi = ind->rssi;
    197a:	81 85       	ldd	r24, Z+9	; 0x09
    197c:	5a 96       	adiw	r26, 0x1a	; 26
    197e:	8c 93       	st	X, r24

	appSendMessage(ind->data, ind->size);
    1980:	85 81       	ldd	r24, Z+5	; 0x05
    1982:	96 81       	ldd	r25, Z+6	; 0x06
    1984:	67 81       	ldd	r22, Z+7	; 0x07
    1986:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <appSendMessage>
	return true;
}
    198a:	81 e0       	ldi	r24, 0x01	; 1
    198c:	08 95       	ret

0000198e <appDataSendingTimerHandler>:

/*****************************************************************************
*****************************************************************************/
static void appDataSendingTimerHandler(SYS_Timer_t *timer)
{
	if (APP_STATE_WAIT_SEND_TIMER == appState)
    198e:	80 91 56 07 	lds	r24, 0x0756
    1992:	84 30       	cpi	r24, 0x04	; 4
    1994:	21 f4       	brne	.+8      	; 0x199e <appDataSendingTimerHandler+0x10>
	appState = APP_STATE_SEND;
    1996:	81 e0       	ldi	r24, 0x01	; 1
    1998:	80 93 56 07 	sts	0x0756, r24
    199c:	08 95       	ret
	else
	SYS_TimerStart(&appDataSendingTimer);
    199e:	8d e8       	ldi	r24, 0x8D	; 141
    19a0:	97 e0       	ldi	r25, 0x07	; 7
    19a2:	0e 94 11 0c 	call	0x1822	; 0x1822 <SYS_TimerStart>
    19a6:	08 95       	ret

000019a8 <HAL_UartBytesReceived>:
static SYS_Timer_t appDataSendingTimer;

/*****************************************************************************
*****************************************************************************/
void HAL_UartBytesReceived(uint16_t bytes)
{
    19a8:	0f 93       	push	r16
    19aa:	1f 93       	push	r17
    19ac:	cf 93       	push	r28
    19ae:	df 93       	push	r29
    19b0:	8c 01       	movw	r16, r24
	for (uint16_t i = 0; i < bytes; i++)
    19b2:	c0 e0       	ldi	r28, 0x00	; 0
    19b4:	d0 e0       	ldi	r29, 0x00	; 0
    19b6:	03 c0       	rjmp	.+6      	; 0x19be <HAL_UartBytesReceived+0x16>
	HAL_UartReadByte();
    19b8:	0e 94 70 02 	call	0x4e0	; 0x4e0 <HAL_UartReadByte>

/*****************************************************************************
*****************************************************************************/
void HAL_UartBytesReceived(uint16_t bytes)
{
	for (uint16_t i = 0; i < bytes; i++)
    19bc:	21 96       	adiw	r28, 0x01	; 1
    19be:	c0 17       	cp	r28, r16
    19c0:	d1 07       	cpc	r29, r17
    19c2:	d1 f7       	brne	.-12     	; 0x19b8 <HAL_UartBytesReceived+0x10>
    19c4:	85 b1       	in	r24, 0x05	; 5
    19c6:	90 e1       	ldi	r25, 0x10	; 16
    19c8:	89 27       	eor	r24, r25
    19ca:	85 b9       	out	0x05, r24	; 5
	HAL_UartReadByte();
	ledToggle(2);
}
    19cc:	df 91       	pop	r29
    19ce:	cf 91       	pop	r28
    19d0:	1f 91       	pop	r17
    19d2:	0f 91       	pop	r16
    19d4:	08 95       	ret

000019d6 <main>:

/*****************************************************************************
*****************************************************************************/
int main(void)
{
	SYS_Init();
    19d6:	0e 94 94 0b 	call	0x1728	; 0x1728 <SYS_Init>
	
	HAL_UartInit(38400);
    19da:	60 e0       	ldi	r22, 0x00	; 0
    19dc:	76 e9       	ldi	r23, 0x96	; 150
    19de:	80 e0       	ldi	r24, 0x00	; 0
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <HAL_UartInit>
	
	RTC_Init();
    19e6:	0e 94 b1 00 	call	0x162	; 0x162 <RTC_Init>
	current_Time.hour = 22;
    19ea:	86 e1       	ldi	r24, 0x16	; 22
    19ec:	80 93 9d 07 	sts	0x079D, r24
	current_Time.minute = 40;
    19f0:	88 e2       	ldi	r24, 0x28	; 40
    19f2:	80 93 9c 07 	sts	0x079C, r24
	current_Time.second = 0;
    19f6:	10 92 9b 07 	sts	0x079B, r1
	
	#ifdef APP_ENABLE_OTA
	OTA_ClientInit();
	#endif

	HAL_UartWriteByte(MCUSR+'0');
    19fa:	84 b7       	in	r24, 0x34	; 52
    19fc:	80 5d       	subi	r24, 0xD0	; 208
    19fe:	0e 94 46 02 	call	0x48c	; 0x48c <HAL_UartWriteByte>
			ledsClose();

			PHY_SetRxState(false);

			HAL_Sleep(APP_SENDING_INTERVAL);
			appState = APP_STATE_WAKEUP;
    1a02:	17 e0       	ldi	r17, 0x07	; 7
		case APP_STATE_PREPARE_TO_SLEEP:
		{
			if (!NWK_Busy())
			{
				NWK_SleepReq();
				appState = APP_STATE_SLEEP;
    1a04:	06 e0       	ldi	r16, 0x06	; 6
*****************************************************************************/
static void appInit(void)
{
	msg.messageType          = 1;
	msg.nodeType             = APP_NODE_TYPE;
	msg.extAddr              = APP_ADDR;
    1a06:	c9 e5       	ldi	r28, 0x59	; 89
    1a08:	d7 e0       	ldi	r29, 0x07	; 7
	msg.shortAddr            = APP_ADDR;
	msg.softVersion          = 0x01010100;
    1a0a:	c1 2c       	mov	r12, r1
    1a0c:	81 e0       	ldi	r24, 0x01	; 1
    1a0e:	d8 2e       	mov	r13, r24
    1a10:	81 e0       	ldi	r24, 0x01	; 1
    1a12:	e8 2e       	mov	r14, r24
    1a14:	81 e0       	ldi	r24, 0x01	; 1
    1a16:	f8 2e       	mov	r15, r24
	msg.channelMask          = (1L << APP_CHANNEL);
    1a18:	81 2c       	mov	r8, r1
    1a1a:	20 e8       	ldi	r18, 0x80	; 128
    1a1c:	92 2e       	mov	r9, r18
    1a1e:	a1 2c       	mov	r10, r1
    1a20:	b1 2c       	mov	r11, r1
	msg.panId                = APP_PANID;
    1a22:	34 e3       	ldi	r19, 0x34	; 52
    1a24:	43 2e       	mov	r4, r19
    1a26:	32 e1       	ldi	r19, 0x12	; 18
    1a28:	53 2e       	mov	r5, r19
	msg.workingChannel       = APP_CHANNEL;
    1a2a:	4f e0       	ldi	r20, 0x0F	; 15
    1a2c:	74 2e       	mov	r7, r20

	NWK_OpenEndpoint(APP_ENDPOINT, appDataInd);

	appDataSendingTimer.interval = APP_SENDING_INTERVAL;
	appDataSendingTimer.mode = SYS_TIMER_INTERVAL_MODE;
	appDataSendingTimer.handler = appDataSendingTimerHandler;
    1a2e:	57 ec       	ldi	r21, 0xC7	; 199
    1a30:	25 2e       	mov	r2, r21
    1a32:	5c e0       	ldi	r21, 0x0C	; 12
    1a34:	35 2e       	mov	r3, r21
	#endif

	HAL_UartWriteByte(MCUSR+'0');
	while (1)
	{
		SYS_TaskHandler();
    1a36:	0e 94 9d 0b 	call	0x173a	; 0x173a <SYS_TaskHandler>
		HAL_UartTaskHandler();
    1a3a:	0e 94 12 03 	call	0x624	; 0x624 <HAL_UartTaskHandler>

/*****************************************************************************
*****************************************************************************/
static void APP_TaskHandler(void)
{
	switch (appState)
    1a3e:	80 91 56 07 	lds	r24, 0x0756
    1a42:	83 30       	cpi	r24, 0x03	; 3
    1a44:	09 f4       	brne	.+2      	; 0x1a48 <main+0x72>
    1a46:	c5 c0       	rjmp	.+394    	; 0x1bd2 <main+0x1fc>
    1a48:	84 30       	cpi	r24, 0x04	; 4
    1a4a:	28 f4       	brcc	.+10     	; 0x1a56 <main+0x80>
    1a4c:	88 23       	and	r24, r24
    1a4e:	61 f0       	breq	.+24     	; 0x1a68 <main+0x92>
    1a50:	81 30       	cpi	r24, 0x01	; 1
    1a52:	89 f7       	brne	.-30     	; 0x1a36 <main+0x60>
    1a54:	91 c0       	rjmp	.+290    	; 0x1b78 <main+0x1a2>
    1a56:	86 30       	cpi	r24, 0x06	; 6
    1a58:	09 f4       	brne	.+2      	; 0x1a5c <main+0x86>
    1a5a:	cd c0       	rjmp	.+410    	; 0x1bf6 <main+0x220>
    1a5c:	87 30       	cpi	r24, 0x07	; 7
    1a5e:	09 f4       	brne	.+2      	; 0x1a62 <main+0x8c>
    1a60:	d8 c0       	rjmp	.+432    	; 0x1c12 <main+0x23c>
    1a62:	85 30       	cpi	r24, 0x05	; 5
    1a64:	41 f7       	brne	.-48     	; 0x1a36 <main+0x60>
    1a66:	bd c0       	rjmp	.+378    	; 0x1be2 <main+0x20c>

/*****************************************************************************
*****************************************************************************/
static void appInit(void)
{
	msg.messageType          = 1;
    1a68:	81 e0       	ldi	r24, 0x01	; 1
    1a6a:	80 93 57 07 	sts	0x0757, r24
	msg.nodeType             = APP_NODE_TYPE;
    1a6e:	10 92 58 07 	sts	0x0758, r1
	msg.extAddr              = APP_ADDR;
    1a72:	10 92 59 07 	sts	0x0759, r1
    1a76:	19 82       	std	Y+1, r1	; 0x01
    1a78:	1a 82       	std	Y+2, r1	; 0x02
    1a7a:	1b 82       	std	Y+3, r1	; 0x03
    1a7c:	1c 82       	std	Y+4, r1	; 0x04
    1a7e:	1d 82       	std	Y+5, r1	; 0x05
    1a80:	1e 82       	std	Y+6, r1	; 0x06
    1a82:	1f 82       	std	Y+7, r1	; 0x07
	msg.shortAddr            = APP_ADDR;
    1a84:	10 92 62 07 	sts	0x0762, r1
    1a88:	10 92 61 07 	sts	0x0761, r1
	msg.softVersion          = 0x01010100;
    1a8c:	c0 92 63 07 	sts	0x0763, r12
    1a90:	d0 92 64 07 	sts	0x0764, r13
    1a94:	e0 92 65 07 	sts	0x0765, r14
    1a98:	f0 92 66 07 	sts	0x0766, r15
	msg.channelMask          = (1L << APP_CHANNEL);
    1a9c:	80 92 67 07 	sts	0x0767, r8
    1aa0:	90 92 68 07 	sts	0x0768, r9
    1aa4:	a0 92 69 07 	sts	0x0769, r10
    1aa8:	b0 92 6a 07 	sts	0x076A, r11
	msg.panId                = APP_PANID;
    1aac:	50 92 6c 07 	sts	0x076C, r5
    1ab0:	40 92 6b 07 	sts	0x076B, r4
	msg.workingChannel       = APP_CHANNEL;
    1ab4:	70 92 6d 07 	sts	0x076D, r7
	msg.parentShortAddr      = 0;
    1ab8:	10 92 6f 07 	sts	0x076F, r1
    1abc:	10 92 6e 07 	sts	0x076E, r1
	msg.lqi                  = 0;
    1ac0:	10 92 70 07 	sts	0x0770, r1
	msg.rssi                 = 0;
    1ac4:	10 92 71 07 	sts	0x0771, r1

	msg.sensors.type        = 1;
    1ac8:	80 93 72 07 	sts	0x0772, r24
	msg.sensors.size        = sizeof(int32_t) * 3;
    1acc:	8c e0       	ldi	r24, 0x0C	; 12
    1ace:	80 93 73 07 	sts	0x0773, r24
	msg.sensors.battery     = 0;
    1ad2:	10 92 74 07 	sts	0x0774, r1
    1ad6:	10 92 75 07 	sts	0x0775, r1
    1ada:	10 92 76 07 	sts	0x0776, r1
    1ade:	10 92 77 07 	sts	0x0777, r1
	msg.sensors.temperature = 0;
    1ae2:	10 92 78 07 	sts	0x0778, r1
    1ae6:	10 92 79 07 	sts	0x0779, r1
    1aea:	10 92 7a 07 	sts	0x077A, r1
    1aee:	10 92 7b 07 	sts	0x077B, r1
	msg.sensors.light       = 0;
    1af2:	10 92 7c 07 	sts	0x077C, r1
    1af6:	10 92 7d 07 	sts	0x077D, r1
    1afa:	10 92 7e 07 	sts	0x077E, r1
    1afe:	10 92 7f 07 	sts	0x077F, r1

	msg.caption.type         = 32;
    1b02:	80 e2       	ldi	r24, 0x20	; 32
    1b04:	80 93 80 07 	sts	0x0780, r24
	msg.caption.size         = APP_CAPTION_SIZE;
    1b08:	8b e0       	ldi	r24, 0x0B	; 11
    1b0a:	80 93 81 07 	sts	0x0781, r24
	memcpy(msg.caption.text, APP_CAPTION, APP_CAPTION_SIZE);
    1b0e:	e2 e8       	ldi	r30, 0x82	; 130
    1b10:	f7 e0       	ldi	r31, 0x07	; 7
    1b12:	a0 e0       	ldi	r26, 0x00	; 0
    1b14:	b2 e0       	ldi	r27, 0x02	; 2
    1b16:	0d 90       	ld	r0, X+
    1b18:	01 92       	st	Z+, r0
    1b1a:	81 50       	subi	r24, 0x01	; 1
    1b1c:	e1 f7       	brne	.-8      	; 0x1b16 <main+0x140>

	#if APP_COORDINATOR
	// Enable RCB_BB RS232 level converter
	#if defined(PLATFORM_RCB128RFA1)
	DDRD = (1 << 4) | (1 << 6) | (1 << 7);
    1b1e:	80 ed       	ldi	r24, 0xD0	; 208
    1b20:	8a b9       	out	0x0a, r24	; 10
	PORTD = (0 << 4) | (1 << 6) | (1 << 7);
    1b22:	80 ec       	ldi	r24, 0xC0	; 192
    1b24:	8b b9       	out	0x0b, r24	; 11
    1b26:	24 9a       	sbi	0x04, 4	; 4
    1b28:	2c 9a       	sbi	0x05, 4	; 5
	#endif
	#endif

	ledsInit();

	NWK_SetAddr(APP_ADDR);
    1b2a:	80 e0       	ldi	r24, 0x00	; 0
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	0e 94 72 03 	call	0x6e4	; 0x6e4 <NWK_SetAddr>
	NWK_SetPanId(APP_PANID);
    1b32:	84 e3       	ldi	r24, 0x34	; 52
    1b34:	92 e1       	ldi	r25, 0x12	; 18
    1b36:	0e 94 79 03 	call	0x6f2	; 0x6f2 <NWK_SetPanId>
	PHY_SetChannel(APP_CHANNEL);
    1b3a:	8f e0       	ldi	r24, 0x0F	; 15
    1b3c:	0e 94 4d 0a 	call	0x149a	; 0x149a <PHY_SetChannel>
	PHY_SetRxState(true);
    1b40:	81 e0       	ldi	r24, 0x01	; 1
    1b42:	0e 94 45 0a 	call	0x148a	; 0x148a <PHY_SetRxState>

	#ifdef NWK_ENABLE_SECURITY
	NWK_SetSecurityKey((uint8_t *)APP_SECURITY_KEY);
	#endif

	NWK_OpenEndpoint(APP_ENDPOINT, appDataInd);
    1b46:	81 e0       	ldi	r24, 0x01	; 1
    1b48:	62 eb       	ldi	r22, 0xB2	; 178
    1b4a:	7c e0       	ldi	r23, 0x0C	; 12
    1b4c:	0e 94 80 03 	call	0x700	; 0x700 <NWK_OpenEndpoint>

	appDataSendingTimer.interval = APP_SENDING_INTERVAL;
    1b50:	80 ed       	ldi	r24, 0xD0	; 208
    1b52:	97 e0       	ldi	r25, 0x07	; 7
    1b54:	a0 e0       	ldi	r26, 0x00	; 0
    1b56:	b0 e0       	ldi	r27, 0x00	; 0
    1b58:	80 93 93 07 	sts	0x0793, r24
    1b5c:	90 93 94 07 	sts	0x0794, r25
    1b60:	a0 93 95 07 	sts	0x0795, r26
    1b64:	b0 93 96 07 	sts	0x0796, r27
	appDataSendingTimer.mode = SYS_TIMER_INTERVAL_MODE;
    1b68:	10 92 97 07 	sts	0x0797, r1
	appDataSendingTimer.handler = appDataSendingTimerHandler;
    1b6c:	30 92 99 07 	sts	0x0799, r3
    1b70:	20 92 98 07 	sts	0x0798, r2
    1b74:	2c 9a       	sbi	0x05, 4	; 5
    1b76:	55 c0       	rjmp	.+170    	; 0x1c22 <main+0x24c>
/*****************************************************************************
*****************************************************************************/
static void appSendData(void)
{
	#ifdef NWK_ENABLE_ROUTING
	msg.parentShortAddr = NWK_RouteNextHop(0);
    1b78:	80 e0       	ldi	r24, 0x00	; 0
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	0e 94 1b 06 	call	0xc36	; 0xc36 <NWK_RouteNextHop>
    1b80:	90 93 6f 07 	sts	0x076F, r25
    1b84:	80 93 6e 07 	sts	0x076E, r24
	#else
	msg.parentShortAddr = 0;
	#endif

	msg.sensors.battery     = rand();
    1b88:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <rand>
    1b8c:	aa 27       	eor	r26, r26
    1b8e:	97 fd       	sbrc	r25, 7
    1b90:	a0 95       	com	r26
    1b92:	ba 2f       	mov	r27, r26
    1b94:	80 93 74 07 	sts	0x0774, r24
    1b98:	90 93 75 07 	sts	0x0775, r25
    1b9c:	a0 93 76 07 	sts	0x0776, r26
    1ba0:	b0 93 77 07 	sts	0x0777, r27
	msg.sensors.temperature = rand() & 0x7f;
    1ba4:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <rand>
    1ba8:	aa 27       	eor	r26, r26
    1baa:	97 fd       	sbrc	r25, 7
    1bac:	a0 95       	com	r26
    1bae:	ba 2f       	mov	r27, r26
    1bb0:	8f 77       	andi	r24, 0x7F	; 127
    1bb2:	90 70       	andi	r25, 0x00	; 0
    1bb4:	a0 70       	andi	r26, 0x00	; 0
    1bb6:	b0 70       	andi	r27, 0x00	; 0
    1bb8:	80 93 78 07 	sts	0x0778, r24
    1bbc:	90 93 79 07 	sts	0x0779, r25
    1bc0:	a0 93 7a 07 	sts	0x077A, r26
    1bc4:	b0 93 7b 07 	sts	0x077B, r27
	//  msg.sensors.light       = rand() & 0xff;

	#if APP_COORDINATOR
	appSendMessage((uint8_t *)&msg, sizeof(msg));
    1bc8:	87 e5       	ldi	r24, 0x57	; 87
    1bca:	97 e0       	ldi	r25, 0x07	; 7
    1bcc:	66 e3       	ldi	r22, 0x36	; 54
    1bce:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <appSendMessage>
	SYS_TimerStart(&appDataSendingTimer);
    1bd2:	8d e8       	ldi	r24, 0x8D	; 141
    1bd4:	97 e0       	ldi	r25, 0x07	; 7
    1bd6:	0e 94 11 0c 	call	0x1822	; 0x1822 <SYS_TimerStart>
	appState = APP_STATE_WAIT_SEND_TIMER;
    1bda:	84 e0       	ldi	r24, 0x04	; 4
    1bdc:	80 93 56 07 	sts	0x0756, r24
    1be0:	2a cf       	rjmp	.-428    	; 0x1a36 <main+0x60>
			#endif
		} break;

		case APP_STATE_PREPARE_TO_SLEEP:
		{
			if (!NWK_Busy())
    1be2:	0e 94 89 03 	call	0x712	; 0x712 <NWK_Busy>
    1be6:	88 23       	and	r24, r24
    1be8:	09 f0       	breq	.+2      	; 0x1bec <main+0x216>
    1bea:	25 cf       	rjmp	.-438    	; 0x1a36 <main+0x60>
			{
				NWK_SleepReq();
    1bec:	0e 94 9e 03 	call	0x73c	; 0x73c <NWK_SleepReq>
				appState = APP_STATE_SLEEP;
    1bf0:	00 93 56 07 	sts	0x0756, r16
    1bf4:	20 cf       	rjmp	.-448    	; 0x1a36 <main+0x60>
    1bf6:	24 98       	cbi	0x04, 4	; 4
    1bf8:	2c 98       	cbi	0x05, 4	; 5

		case APP_STATE_SLEEP:
		{
			ledsClose();

			PHY_SetRxState(false);
    1bfa:	80 e0       	ldi	r24, 0x00	; 0
    1bfc:	0e 94 45 0a 	call	0x148a	; 0x148a <PHY_SetRxState>

			HAL_Sleep(APP_SENDING_INTERVAL);
    1c00:	60 ed       	ldi	r22, 0xD0	; 208
    1c02:	77 e0       	ldi	r23, 0x07	; 7
    1c04:	80 e0       	ldi	r24, 0x00	; 0
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	0e 94 25 01 	call	0x24a	; 0x24a <HAL_Sleep>
			appState = APP_STATE_WAKEUP;
    1c0c:	10 93 56 07 	sts	0x0756, r17
    1c10:	12 cf       	rjmp	.-476    	; 0x1a36 <main+0x60>
		} break;

		case APP_STATE_WAKEUP:
		{
			NWK_WakeupReq();
    1c12:	0e 94 a1 03 	call	0x742	; 0x742 <NWK_WakeupReq>
    1c16:	24 9a       	sbi	0x04, 4	; 4
    1c18:	2c 9a       	sbi	0x05, 4	; 5
    1c1a:	2c 9a       	sbi	0x05, 4	; 5

			ledsInit();
			ledOn(LED_NETWORK);

			PHY_SetRxState(true);
    1c1c:	81 e0       	ldi	r24, 0x01	; 1
    1c1e:	0e 94 45 0a 	call	0x148a	; 0x148a <PHY_SetRxState>

			appState = APP_STATE_SEND;
    1c22:	81 e0       	ldi	r24, 0x01	; 1
    1c24:	db cf       	rjmp	.-74     	; 0x1bdc <main+0x206>

00001c26 <__mulsi3>:
    1c26:	62 9f       	mul	r22, r18
    1c28:	d0 01       	movw	r26, r0
    1c2a:	73 9f       	mul	r23, r19
    1c2c:	f0 01       	movw	r30, r0
    1c2e:	82 9f       	mul	r24, r18
    1c30:	e0 0d       	add	r30, r0
    1c32:	f1 1d       	adc	r31, r1
    1c34:	64 9f       	mul	r22, r20
    1c36:	e0 0d       	add	r30, r0
    1c38:	f1 1d       	adc	r31, r1
    1c3a:	92 9f       	mul	r25, r18
    1c3c:	f0 0d       	add	r31, r0
    1c3e:	83 9f       	mul	r24, r19
    1c40:	f0 0d       	add	r31, r0
    1c42:	74 9f       	mul	r23, r20
    1c44:	f0 0d       	add	r31, r0
    1c46:	65 9f       	mul	r22, r21
    1c48:	f0 0d       	add	r31, r0
    1c4a:	99 27       	eor	r25, r25
    1c4c:	72 9f       	mul	r23, r18
    1c4e:	b0 0d       	add	r27, r0
    1c50:	e1 1d       	adc	r30, r1
    1c52:	f9 1f       	adc	r31, r25
    1c54:	63 9f       	mul	r22, r19
    1c56:	b0 0d       	add	r27, r0
    1c58:	e1 1d       	adc	r30, r1
    1c5a:	f9 1f       	adc	r31, r25
    1c5c:	bd 01       	movw	r22, r26
    1c5e:	cf 01       	movw	r24, r30
    1c60:	11 24       	eor	r1, r1
    1c62:	08 95       	ret

00001c64 <__udivmodsi4>:
    1c64:	a1 e2       	ldi	r26, 0x21	; 33
    1c66:	1a 2e       	mov	r1, r26
    1c68:	aa 1b       	sub	r26, r26
    1c6a:	bb 1b       	sub	r27, r27
    1c6c:	fd 01       	movw	r30, r26
    1c6e:	0d c0       	rjmp	.+26     	; 0x1c8a <__udivmodsi4_ep>

00001c70 <__udivmodsi4_loop>:
    1c70:	aa 1f       	adc	r26, r26
    1c72:	bb 1f       	adc	r27, r27
    1c74:	ee 1f       	adc	r30, r30
    1c76:	ff 1f       	adc	r31, r31
    1c78:	a2 17       	cp	r26, r18
    1c7a:	b3 07       	cpc	r27, r19
    1c7c:	e4 07       	cpc	r30, r20
    1c7e:	f5 07       	cpc	r31, r21
    1c80:	20 f0       	brcs	.+8      	; 0x1c8a <__udivmodsi4_ep>
    1c82:	a2 1b       	sub	r26, r18
    1c84:	b3 0b       	sbc	r27, r19
    1c86:	e4 0b       	sbc	r30, r20
    1c88:	f5 0b       	sbc	r31, r21

00001c8a <__udivmodsi4_ep>:
    1c8a:	66 1f       	adc	r22, r22
    1c8c:	77 1f       	adc	r23, r23
    1c8e:	88 1f       	adc	r24, r24
    1c90:	99 1f       	adc	r25, r25
    1c92:	1a 94       	dec	r1
    1c94:	69 f7       	brne	.-38     	; 0x1c70 <__udivmodsi4_loop>
    1c96:	60 95       	com	r22
    1c98:	70 95       	com	r23
    1c9a:	80 95       	com	r24
    1c9c:	90 95       	com	r25
    1c9e:	9b 01       	movw	r18, r22
    1ca0:	ac 01       	movw	r20, r24
    1ca2:	bd 01       	movw	r22, r26
    1ca4:	cf 01       	movw	r24, r30
    1ca6:	08 95       	ret

00001ca8 <do_rand>:
    1ca8:	8f 92       	push	r8
    1caa:	9f 92       	push	r9
    1cac:	af 92       	push	r10
    1cae:	bf 92       	push	r11
    1cb0:	cf 92       	push	r12
    1cb2:	df 92       	push	r13
    1cb4:	ef 92       	push	r14
    1cb6:	ff 92       	push	r15
    1cb8:	cf 93       	push	r28
    1cba:	df 93       	push	r29
    1cbc:	ec 01       	movw	r28, r24
    1cbe:	88 81       	ld	r24, Y
    1cc0:	99 81       	ldd	r25, Y+1	; 0x01
    1cc2:	aa 81       	ldd	r26, Y+2	; 0x02
    1cc4:	bb 81       	ldd	r27, Y+3	; 0x03
    1cc6:	00 97       	sbiw	r24, 0x00	; 0
    1cc8:	a1 05       	cpc	r26, r1
    1cca:	b1 05       	cpc	r27, r1
    1ccc:	21 f4       	brne	.+8      	; 0x1cd6 <do_rand+0x2e>
    1cce:	84 e2       	ldi	r24, 0x24	; 36
    1cd0:	99 ed       	ldi	r25, 0xD9	; 217
    1cd2:	ab e5       	ldi	r26, 0x5B	; 91
    1cd4:	b7 e0       	ldi	r27, 0x07	; 7
    1cd6:	bc 01       	movw	r22, r24
    1cd8:	cd 01       	movw	r24, r26
    1cda:	2d e1       	ldi	r18, 0x1D	; 29
    1cdc:	33 ef       	ldi	r19, 0xF3	; 243
    1cde:	41 e0       	ldi	r20, 0x01	; 1
    1ce0:	50 e0       	ldi	r21, 0x00	; 0
    1ce2:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__divmodsi4>
    1ce6:	49 01       	movw	r8, r18
    1ce8:	5a 01       	movw	r10, r20
    1cea:	27 ea       	ldi	r18, 0xA7	; 167
    1cec:	31 e4       	ldi	r19, 0x41	; 65
    1cee:	40 e0       	ldi	r20, 0x00	; 0
    1cf0:	50 e0       	ldi	r21, 0x00	; 0
    1cf2:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <__mulsi3>
    1cf6:	6b 01       	movw	r12, r22
    1cf8:	7c 01       	movw	r14, r24
    1cfa:	c5 01       	movw	r24, r10
    1cfc:	b4 01       	movw	r22, r8
    1cfe:	2c ee       	ldi	r18, 0xEC	; 236
    1d00:	34 ef       	ldi	r19, 0xF4	; 244
    1d02:	4f ef       	ldi	r20, 0xFF	; 255
    1d04:	5f ef       	ldi	r21, 0xFF	; 255
    1d06:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <__mulsi3>
    1d0a:	dc 01       	movw	r26, r24
    1d0c:	cb 01       	movw	r24, r22
    1d0e:	c8 0e       	add	r12, r24
    1d10:	d9 1e       	adc	r13, r25
    1d12:	ea 1e       	adc	r14, r26
    1d14:	fb 1e       	adc	r15, r27
    1d16:	f7 fe       	sbrs	r15, 7
    1d18:	08 c0       	rjmp	.+16     	; 0x1d2a <do_rand+0x82>
    1d1a:	8f ef       	ldi	r24, 0xFF	; 255
    1d1c:	9f ef       	ldi	r25, 0xFF	; 255
    1d1e:	af ef       	ldi	r26, 0xFF	; 255
    1d20:	bf e7       	ldi	r27, 0x7F	; 127
    1d22:	c8 0e       	add	r12, r24
    1d24:	d9 1e       	adc	r13, r25
    1d26:	ea 1e       	adc	r14, r26
    1d28:	fb 1e       	adc	r15, r27
    1d2a:	c8 82       	st	Y, r12
    1d2c:	d9 82       	std	Y+1, r13	; 0x01
    1d2e:	ea 82       	std	Y+2, r14	; 0x02
    1d30:	fb 82       	std	Y+3, r15	; 0x03
    1d32:	c6 01       	movw	r24, r12
    1d34:	9f 77       	andi	r25, 0x7F	; 127
    1d36:	df 91       	pop	r29
    1d38:	cf 91       	pop	r28
    1d3a:	ff 90       	pop	r15
    1d3c:	ef 90       	pop	r14
    1d3e:	df 90       	pop	r13
    1d40:	cf 90       	pop	r12
    1d42:	bf 90       	pop	r11
    1d44:	af 90       	pop	r10
    1d46:	9f 90       	pop	r9
    1d48:	8f 90       	pop	r8
    1d4a:	08 95       	ret

00001d4c <rand_r>:
    1d4c:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <do_rand>
    1d50:	08 95       	ret

00001d52 <rand>:
    1d52:	8c e0       	ldi	r24, 0x0C	; 12
    1d54:	92 e0       	ldi	r25, 0x02	; 2
    1d56:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <do_rand>
    1d5a:	08 95       	ret

00001d5c <srand>:
    1d5c:	a0 e0       	ldi	r26, 0x00	; 0
    1d5e:	b0 e0       	ldi	r27, 0x00	; 0
    1d60:	80 93 0c 02 	sts	0x020C, r24
    1d64:	90 93 0d 02 	sts	0x020D, r25
    1d68:	a0 93 0e 02 	sts	0x020E, r26
    1d6c:	b0 93 0f 02 	sts	0x020F, r27
    1d70:	08 95       	ret

00001d72 <memcpy>:
    1d72:	fb 01       	movw	r30, r22
    1d74:	dc 01       	movw	r26, r24
    1d76:	02 c0       	rjmp	.+4      	; 0x1d7c <memcpy+0xa>
    1d78:	01 90       	ld	r0, Z+
    1d7a:	0d 92       	st	X+, r0
    1d7c:	41 50       	subi	r20, 0x01	; 1
    1d7e:	50 40       	sbci	r21, 0x00	; 0
    1d80:	d8 f7       	brcc	.-10     	; 0x1d78 <memcpy+0x6>
    1d82:	08 95       	ret

00001d84 <__divmodsi4>:
    1d84:	97 fb       	bst	r25, 7
    1d86:	09 2e       	mov	r0, r25
    1d88:	05 26       	eor	r0, r21
    1d8a:	0e d0       	rcall	.+28     	; 0x1da8 <__divmodsi4_neg1>
    1d8c:	57 fd       	sbrc	r21, 7
    1d8e:	04 d0       	rcall	.+8      	; 0x1d98 <__divmodsi4_neg2>
    1d90:	69 df       	rcall	.-302    	; 0x1c64 <__udivmodsi4>
    1d92:	0a d0       	rcall	.+20     	; 0x1da8 <__divmodsi4_neg1>
    1d94:	00 1c       	adc	r0, r0
    1d96:	38 f4       	brcc	.+14     	; 0x1da6 <__divmodsi4_exit>

00001d98 <__divmodsi4_neg2>:
    1d98:	50 95       	com	r21
    1d9a:	40 95       	com	r20
    1d9c:	30 95       	com	r19
    1d9e:	21 95       	neg	r18
    1da0:	3f 4f       	sbci	r19, 0xFF	; 255
    1da2:	4f 4f       	sbci	r20, 0xFF	; 255
    1da4:	5f 4f       	sbci	r21, 0xFF	; 255

00001da6 <__divmodsi4_exit>:
    1da6:	08 95       	ret

00001da8 <__divmodsi4_neg1>:
    1da8:	f6 f7       	brtc	.-4      	; 0x1da6 <__divmodsi4_exit>
    1daa:	90 95       	com	r25
    1dac:	80 95       	com	r24
    1dae:	70 95       	com	r23
    1db0:	61 95       	neg	r22
    1db2:	7f 4f       	sbci	r23, 0xFF	; 255
    1db4:	8f 4f       	sbci	r24, 0xFF	; 255
    1db6:	9f 4f       	sbci	r25, 0xFF	; 255
    1db8:	08 95       	ret

00001dba <_exit>:
    1dba:	f8 94       	cli

00001dbc <__stop_program>:
    1dbc:	ff cf       	rjmp	.-2      	; 0x1dbc <__stop_program>
