
WSNDemo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800200  00001e4c  00001ee0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e4c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000005b1  0080020c  0080020c  00001eec  2**0
                  ALLOC
  3 .stab         00000750  00000000  00000000  00001eec  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000e7  00000000  00000000  0000263c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000508  00000000  00000000  00002728  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004990  00000000  00000000  00002c30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000184e  00000000  00000000  000075c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003a58  00000000  00000000  00008e0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009f8  00000000  00000000  0000c868  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001789  00000000  00000000  0000d260  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001ba7  00000000  00000000  0000e9e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macinfo 000f6326  00000000  00000000  00010590  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000460  00000000  00000000  001068b6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 90 00 	jmp	0x120	; 0x120 <__ctors_end>
       4:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
       8:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
       c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      10:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      14:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      18:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      1c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      20:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      24:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      28:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      2c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      30:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      34:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__vector_13>
      38:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      3c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      40:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      44:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      48:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      4c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      50:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      54:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      58:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      5c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      60:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      64:	0c 94 53 02 	jmp	0x4a6	; 0x4a6 <__vector_25>
      68:	0c 94 37 02 	jmp	0x46e	; 0x46e <__vector_26>
      6c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      70:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      74:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      78:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      7c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      80:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      84:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      88:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      8c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      90:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      94:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      98:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      9c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      a0:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      a4:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      a8:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <__vector_42>
      ac:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__vector_43>
      b0:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      b4:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      b8:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      bc:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      c0:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      c4:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      c8:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      cc:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      d0:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      d4:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      d8:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      dc:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      e0:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      e4:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      e8:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      ec:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      f0:	0c 94 9f 0a 	jmp	0x153e	; 0x153e <__vector_60>
      f4:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      f8:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      fc:	0c 94 67 0a 	jmp	0x14ce	; 0x14ce <__vector_63>
     100:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
     104:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
     108:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
     10c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
     110:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
     114:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
     118:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
     11c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>

00000120 <__ctors_end>:
     120:	11 24       	eor	r1, r1
     122:	1f be       	out	0x3f, r1	; 63
     124:	cf ef       	ldi	r28, 0xFF	; 255
     126:	d1 e4       	ldi	r29, 0x41	; 65
     128:	de bf       	out	0x3e, r29	; 62
     12a:	cd bf       	out	0x3d, r28	; 61

0000012c <__do_copy_data>:
     12c:	12 e0       	ldi	r17, 0x02	; 2
     12e:	a0 e0       	ldi	r26, 0x00	; 0
     130:	b2 e0       	ldi	r27, 0x02	; 2
     132:	ec e4       	ldi	r30, 0x4C	; 76
     134:	fe e1       	ldi	r31, 0x1E	; 30
     136:	00 e0       	ldi	r16, 0x00	; 0
     138:	0b bf       	out	0x3b, r16	; 59
     13a:	02 c0       	rjmp	.+4      	; 0x140 <__do_copy_data+0x14>
     13c:	07 90       	elpm	r0, Z+
     13e:	0d 92       	st	X+, r0
     140:	ac 30       	cpi	r26, 0x0C	; 12
     142:	b1 07       	cpc	r27, r17
     144:	d9 f7       	brne	.-10     	; 0x13c <__do_copy_data+0x10>

00000146 <__do_clear_bss>:
     146:	17 e0       	ldi	r17, 0x07	; 7
     148:	ac e0       	ldi	r26, 0x0C	; 12
     14a:	b2 e0       	ldi	r27, 0x02	; 2
     14c:	01 c0       	rjmp	.+2      	; 0x150 <.do_clear_bss_start>

0000014e <.do_clear_bss_loop>:
     14e:	1d 92       	st	X+, r1

00000150 <.do_clear_bss_start>:
     150:	ad 3b       	cpi	r26, 0xBD	; 189
     152:	b1 07       	cpc	r27, r17
     154:	e1 f7       	brne	.-8      	; 0x14e <.do_clear_bss_loop>
     156:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <main>
     15a:	0c 94 24 0f 	jmp	0x1e48	; 0x1e48 <_exit>

0000015e <__bad_interrupt>:
     15e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000162 <HAL_Init>:

/*****************************************************************************
*****************************************************************************/
void HAL_Init(void)
{
  MCUSR = 0;
     162:	14 be       	out	0x34, r1	; 52
  wdt_disable();
     164:	88 e1       	ldi	r24, 0x18	; 24
     166:	0f b6       	in	r0, 0x3f	; 63
     168:	f8 94       	cli
     16a:	80 93 60 00 	sts	0x0060, r24
     16e:	10 92 60 00 	sts	0x0060, r1
     172:	0f be       	out	0x3f, r0	; 63
  SYS_EnableInterrupts();
     174:	78 94       	sei

  HAL_TimerInit();
     176:	0e 94 4c 01 	call	0x298	; 0x298 <HAL_TimerInit>
}
     17a:	08 95       	ret

0000017c <HAL_Sleep>:
}

/*****************************************************************************
*****************************************************************************/
void HAL_Sleep(uint32_t interval)
{
     17c:	0f 93       	push	r16
     17e:	1f 93       	push	r17
  uint32_t ticks;
  uint16_t integer;
  uint8_t fractional;

  ticks = (HAL_SLEEP_TIMER_CLOCK * interval) / (HAL_SLEEP_TIMER_PRESCALER * 1000ul);
     180:	2f e0       	ldi	r18, 0x0F	; 15
     182:	66 0f       	add	r22, r22
     184:	77 1f       	adc	r23, r23
     186:	88 1f       	adc	r24, r24
     188:	99 1f       	adc	r25, r25
     18a:	2a 95       	dec	r18
     18c:	d1 f7       	brne	.-12     	; 0x182 <HAL_Sleep+0x6>
     18e:	20 e0       	ldi	r18, 0x00	; 0
     190:	30 ea       	ldi	r19, 0xA0	; 160
     192:	4f e0       	ldi	r20, 0x0F	; 15
     194:	50 e0       	ldi	r21, 0x00	; 0
     196:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <__udivmodsi4>
     19a:	89 01       	movw	r16, r18
     19c:	9a 01       	movw	r18, r20
  if (0 == ticks)
     19e:	01 15       	cp	r16, r1
     1a0:	11 05       	cpc	r17, r1
     1a2:	21 05       	cpc	r18, r1
     1a4:	31 05       	cpc	r19, r1
     1a6:	09 f4       	brne	.+2      	; 0x1aa <HAL_Sleep+0x2e>
     1a8:	65 c0       	rjmp	.+202    	; 0x274 <HAL_Sleep+0xf8>
    return;

  integer = ticks >> 8;
     1aa:	bb 27       	eor	r27, r27
     1ac:	a3 2f       	mov	r26, r19
     1ae:	92 2f       	mov	r25, r18
     1b0:	81 2f       	mov	r24, r17
  fractional = ticks & 0xff;

  TIMSK2 = 0;
     1b2:	10 92 70 00 	sts	0x0070, r1
  ASSR |= (1 << AS2);
     1b6:	20 91 b6 00 	lds	r18, 0x00B6
     1ba:	20 62       	ori	r18, 0x20	; 32
     1bc:	20 93 b6 00 	sts	0x00B6, r18
  TCCR2A = 0;
     1c0:	10 92 b0 00 	sts	0x00B0, r1
  TCCR2B = 0;
     1c4:	10 92 b1 00 	sts	0x00B1, r1
  TCNT2 = 0;
     1c8:	10 92 b2 00 	sts	0x00B2, r1

/*****************************************************************************
*****************************************************************************/
inline void halSleepSynchronize(void)
{
  while (ASSR & ((1 << TCN2UB) | (1 << OCR2AUB) | (1 << OCR2BUB) | (1 << TCR2AUB) | (1 << TCR2BUB)));
     1cc:	20 91 b6 00 	lds	r18, 0x00B6
     1d0:	30 e0       	ldi	r19, 0x00	; 0
     1d2:	2f 71       	andi	r18, 0x1F	; 31
     1d4:	30 70       	andi	r19, 0x00	; 0
     1d6:	21 15       	cp	r18, r1
     1d8:	31 05       	cpc	r19, r1
     1da:	c1 f7       	brne	.-16     	; 0x1cc <HAL_Sleep+0x50>
  TCCR2A = 0;
  TCCR2B = 0;
  TCNT2 = 0;
  halSleepSynchronize();

  TIFR2 = (1 << OCF2B) | (1 << OCF2A) | (1 << TOV2);
     1dc:	27 e0       	ldi	r18, 0x07	; 7
     1de:	27 bb       	out	0x17, r18	; 23
  TCCR2B = ((1 << CS20) | (1 << CS21) | (1 << CS22));   // clk/1024
     1e0:	20 93 b1 00 	sts	0x00B1, r18
  while (1)
  {
    halSleepTimerEvent = false;
    
    if (integer > 0)
      OCR2A = 0xff;
     1e4:	5f ef       	ldi	r21, 0xFF	; 255

    TIMSK2 |= (1 << OCIE2A);

    halSleepSynchronize();

    SMCR = (1 << SM1) | (1 << SM0) | (1 << SE); // power-save
     1e6:	47 e0       	ldi	r20, 0x07	; 7
     1e8:	01 c0       	rjmp	.+2      	; 0x1ec <HAL_Sleep+0x70>
    if (event)
    {
      if (integer > 0)
        integer--;
      else
        fractional = 0;
     1ea:	00 e0       	ldi	r16, 0x00	; 0
  TIFR2 = (1 << OCF2B) | (1 << OCF2A) | (1 << TOV2);
  TCCR2B = ((1 << CS20) | (1 << CS21) | (1 << CS22));   // clk/1024

  while (1)
  {
    halSleepTimerEvent = false;
     1ec:	10 92 0c 02 	sts	0x020C, r1
    
    if (integer > 0)
     1f0:	00 97       	sbiw	r24, 0x00	; 0
     1f2:	19 f0       	breq	.+6      	; 0x1fa <HAL_Sleep+0x7e>
      OCR2A = 0xff;
     1f4:	50 93 b3 00 	sts	0x00B3, r21
     1f8:	20 c0       	rjmp	.+64     	; 0x23a <HAL_Sleep+0xbe>
    else if (fractional > 0)
     1fa:	00 23       	and	r16, r16
     1fc:	19 f0       	breq	.+6      	; 0x204 <HAL_Sleep+0x88>
      OCR2A = fractional;
     1fe:	00 93 b3 00 	sts	0x00B3, r16
     202:	1b c0       	rjmp	.+54     	; 0x23a <HAL_Sleep+0xbe>

/*****************************************************************************
*****************************************************************************/
inline void halSleepSynchronize(void)
{
  while (ASSR & ((1 << TCN2UB) | (1 << OCR2AUB) | (1 << OCR2BUB) | (1 << TCR2AUB) | (1 << TCR2BUB)));
     204:	80 91 b6 00 	lds	r24, 0x00B6
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	8f 71       	andi	r24, 0x1F	; 31
     20c:	90 70       	andi	r25, 0x00	; 0
     20e:	00 97       	sbiw	r24, 0x00	; 0
     210:	c9 f7       	brne	.-14     	; 0x204 <HAL_Sleep+0x88>
    else if (fractional > 0)
      OCR2A = fractional;
    else
    {
      halSleepSynchronize();
      TIMSK2 = 0;
     212:	10 92 70 00 	sts	0x0070, r1
      TCCR2B = 0;
     216:	10 92 b1 00 	sts	0x00B1, r1
      GTCCR |= (1 << PSRASY);
     21a:	83 b5       	in	r24, 0x23	; 35
     21c:	82 60       	ori	r24, 0x02	; 2
     21e:	83 bd       	out	0x23, r24	; 35

/*****************************************************************************
*****************************************************************************/
inline void halSleepSynchronize(void)
{
  while (ASSR & ((1 << TCN2UB) | (1 << OCR2AUB) | (1 << OCR2BUB) | (1 << TCR2AUB) | (1 << TCR2BUB)));
     220:	80 91 b6 00 	lds	r24, 0x00B6
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	8f 71       	andi	r24, 0x1F	; 31
     228:	90 70       	andi	r25, 0x00	; 0
     22a:	00 97       	sbiw	r24, 0x00	; 0
     22c:	c9 f7       	brne	.-14     	; 0x220 <HAL_Sleep+0xa4>
      halSleepSynchronize();
      TIMSK2 = 0;
      TCCR2B = 0;
      GTCCR |= (1 << PSRASY);
      halSleepSynchronize();
      ASSR &= ~(1 << AS2);
     22e:	80 91 b6 00 	lds	r24, 0x00B6
     232:	8f 7d       	andi	r24, 0xDF	; 223
     234:	80 93 b6 00 	sts	0x00B6, r24
      return;
     238:	1d c0       	rjmp	.+58     	; 0x274 <HAL_Sleep+0xf8>
    }

    TIMSK2 |= (1 << OCIE2A);
     23a:	20 91 70 00 	lds	r18, 0x0070
     23e:	22 60       	ori	r18, 0x02	; 2
     240:	20 93 70 00 	sts	0x0070, r18

/*****************************************************************************
*****************************************************************************/
inline void halSleepSynchronize(void)
{
  while (ASSR & ((1 << TCN2UB) | (1 << OCR2AUB) | (1 << OCR2BUB) | (1 << TCR2AUB) | (1 << TCR2BUB)));
     244:	20 91 b6 00 	lds	r18, 0x00B6
     248:	30 e0       	ldi	r19, 0x00	; 0
     24a:	2f 71       	andi	r18, 0x1F	; 31
     24c:	30 70       	andi	r19, 0x00	; 0
     24e:	21 15       	cp	r18, r1
     250:	31 05       	cpc	r19, r1
     252:	c1 f7       	brne	.-16     	; 0x244 <HAL_Sleep+0xc8>

    TIMSK2 |= (1 << OCIE2A);

    halSleepSynchronize();

    SMCR = (1 << SM1) | (1 << SM0) | (1 << SE); // power-save
     254:	43 bf       	out	0x33, r20	; 51
    asm("sleep");
     256:	88 95       	sleep
    SMCR = 0;
     258:	13 be       	out	0x33, r1	; 51

    bool event;

    ATOMIC_SECTION_ENTER
     25a:	3f b7       	in	r19, 0x3f	; 63
     25c:	f8 94       	cli
      event = halSleepTimerEvent;
     25e:	20 91 0c 02 	lds	r18, 0x020C
    ATOMIC_SECTION_LEAVE
     262:	3f bf       	out	0x3f, r19	; 63

    if (event)
     264:	22 23       	and	r18, r18
     266:	09 f4       	brne	.+2      	; 0x26a <HAL_Sleep+0xee>
     268:	c1 cf       	rjmp	.-126    	; 0x1ec <HAL_Sleep+0x70>
    {
      if (integer > 0)
     26a:	00 97       	sbiw	r24, 0x00	; 0
     26c:	09 f4       	brne	.+2      	; 0x270 <HAL_Sleep+0xf4>
     26e:	bd cf       	rjmp	.-134    	; 0x1ea <HAL_Sleep+0x6e>
        integer--;
     270:	01 97       	sbiw	r24, 0x01	; 1
     272:	bc cf       	rjmp	.-136    	; 0x1ec <HAL_Sleep+0x70>
    else
    {
      // TODO: wakeup from some other source
    }
  }
}
     274:	1f 91       	pop	r17
     276:	0f 91       	pop	r16
     278:	08 95       	ret

0000027a <__vector_13>:

/*****************************************************************************
*****************************************************************************/
ISR(TIMER2_COMPA_vect)
{
     27a:	1f 92       	push	r1
     27c:	0f 92       	push	r0
     27e:	0f b6       	in	r0, 0x3f	; 63
     280:	0f 92       	push	r0
     282:	11 24       	eor	r1, r1
     284:	8f 93       	push	r24
  halSleepTimerEvent = true;
     286:	81 e0       	ldi	r24, 0x01	; 1
     288:	80 93 0c 02 	sts	0x020C, r24
}
     28c:	8f 91       	pop	r24
     28e:	0f 90       	pop	r0
     290:	0f be       	out	0x3f, r0	; 63
     292:	0f 90       	pop	r0
     294:	1f 90       	pop	r1
     296:	18 95       	reti

00000298 <HAL_TimerInit>:

/*****************************************************************************
*****************************************************************************/
void HAL_TimerInit(void)
{
  halTimerIrqCount = 0;
     298:	10 92 b0 07 	sts	0x07B0, r1

  OCR4A = ((F_CPU / 1000ul) / TIMER_PRESCALER) * HAL_TIMER_INTERVAL;
     29c:	80 e1       	ldi	r24, 0x10	; 16
     29e:	97 e2       	ldi	r25, 0x27	; 39
     2a0:	90 93 a9 00 	sts	0x00A9, r25
     2a4:	80 93 a8 00 	sts	0x00A8, r24
  TCCR4B = (1 << WGM12);              // CTC mode
     2a8:	e1 ea       	ldi	r30, 0xA1	; 161
     2aa:	f0 e0       	ldi	r31, 0x00	; 0
     2ac:	88 e0       	ldi	r24, 0x08	; 8
     2ae:	80 83       	st	Z, r24
  TCCR4B |= (1 << CS11);              // Prescaler 8
     2b0:	80 81       	ld	r24, Z
     2b2:	82 60       	ori	r24, 0x02	; 2
     2b4:	80 83       	st	Z, r24
  TIMSK4 |= (1 << OCIE4A);            // Enable TC4 interrupt
     2b6:	e2 e7       	ldi	r30, 0x72	; 114
     2b8:	f0 e0       	ldi	r31, 0x00	; 0
     2ba:	80 81       	ld	r24, Z
     2bc:	82 60       	ori	r24, 0x02	; 2
     2be:	80 83       	st	Z, r24
}
     2c0:	08 95       	ret

000002c2 <__vector_42>:
}

/*****************************************************************************
*****************************************************************************/
ISR(TIMER4_COMPA_vect)
{
     2c2:	1f 92       	push	r1
     2c4:	0f 92       	push	r0
     2c6:	0f b6       	in	r0, 0x3f	; 63
     2c8:	0f 92       	push	r0
     2ca:	11 24       	eor	r1, r1
     2cc:	8f 93       	push	r24
  halTimerIrqCount++;
     2ce:	80 91 b0 07 	lds	r24, 0x07B0
     2d2:	8f 5f       	subi	r24, 0xFF	; 255
     2d4:	80 93 b0 07 	sts	0x07B0, r24
}
     2d8:	8f 91       	pop	r24
     2da:	0f 90       	pop	r0
     2dc:	0f be       	out	0x3f, r0	; 63
     2de:	0f 90       	pop	r0
     2e0:	1f 90       	pop	r1
     2e2:	18 95       	reti

000002e4 <__vector_43>:

/*****************************************************************************
*****************************************************************************/
ISR(TIMER4_COMPB_vect)
{
     2e4:	1f 92       	push	r1
     2e6:	0f 92       	push	r0
     2e8:	0f b6       	in	r0, 0x3f	; 63
     2ea:	0f 92       	push	r0
     2ec:	11 24       	eor	r1, r1
     2ee:	8f 93       	push	r24
  halTimerDelayInt = 1;
     2f0:	81 e0       	ldi	r24, 0x01	; 1
     2f2:	80 93 0d 02 	sts	0x020D, r24
}
     2f6:	8f 91       	pop	r24
     2f8:	0f 90       	pop	r0
     2fa:	0f be       	out	0x3f, r0	; 63
     2fc:	0f 90       	pop	r0
     2fe:	1f 90       	pop	r1
     300:	18 95       	reti

00000302 <HAL_UartInit>:
static volatile bool newData;

/*****************************************************************************
*****************************************************************************/
void HAL_UartInit(uint32_t baudrate)
{
     302:	0f 93       	push	r16
     304:	1f 93       	push	r17
     306:	9b 01       	movw	r18, r22
     308:	ac 01       	movw	r20, r24
  uint32_t brr = ((uint32_t)F_CPU * 2) / (16 * baudrate) - 1;
     30a:	e4 e0       	ldi	r30, 0x04	; 4
     30c:	22 0f       	add	r18, r18
     30e:	33 1f       	adc	r19, r19
     310:	44 1f       	adc	r20, r20
     312:	55 1f       	adc	r21, r21
     314:	ea 95       	dec	r30
     316:	d1 f7       	brne	.-12     	; 0x30c <HAL_UartInit+0xa>
     318:	60 e0       	ldi	r22, 0x00	; 0
     31a:	74 e2       	ldi	r23, 0x24	; 36
     31c:	84 ef       	ldi	r24, 0xF4	; 244
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <__udivmodsi4>
     324:	89 01       	movw	r16, r18
     326:	9a 01       	movw	r18, r20
     328:	01 50       	subi	r16, 0x01	; 1
     32a:	10 40       	sbci	r17, 0x00	; 0
     32c:	20 40       	sbci	r18, 0x00	; 0
     32e:	30 40       	sbci	r19, 0x00	; 0

  UBRRxH = (brr >> 8) & 0xff;
     330:	bb 27       	eor	r27, r27
     332:	a3 2f       	mov	r26, r19
     334:	92 2f       	mov	r25, r18
     336:	81 2f       	mov	r24, r17
     338:	80 93 c5 00 	sts	0x00C5, r24
  UBRRxL = (brr & 0xff);
     33c:	00 93 c4 00 	sts	0x00C4, r16
  UCSRxA = (1 << U2X1);
     340:	82 e0       	ldi	r24, 0x02	; 2
     342:	80 93 c0 00 	sts	0x00C0, r24
  UCSRxB = (1 << TXEN1) | (1 << RXEN1) | (1 << RXCIE1);
     346:	88 e9       	ldi	r24, 0x98	; 152
     348:	80 93 c1 00 	sts	0x00C1, r24
  UCSRxC = (3 << UCSZ10);
     34c:	86 e0       	ldi	r24, 0x06	; 6
     34e:	80 93 c2 00 	sts	0x00C2, r24

  txFifo.data = txData;
     352:	84 e2       	ldi	r24, 0x24	; 36
     354:	92 e0       	ldi	r25, 0x02	; 2
     356:	90 93 23 02 	sts	0x0223, r25
     35a:	80 93 22 02 	sts	0x0222, r24
  txFifo.size = HAL_UART_TX_FIFO_SIZE;
     35e:	84 e6       	ldi	r24, 0x64	; 100
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	90 93 1f 02 	sts	0x021F, r25
     366:	80 93 1e 02 	sts	0x021E, r24
  txFifo.bytes = 0;
     36a:	10 92 21 02 	sts	0x0221, r1
     36e:	10 92 20 02 	sts	0x0220, r1
  txFifo.head = 0;
     372:	ea e1       	ldi	r30, 0x1A	; 26
     374:	f2 e0       	ldi	r31, 0x02	; 2
     376:	11 82       	std	Z+1, r1	; 0x01
     378:	10 82       	st	Z, r1
  txFifo.tail = 0;
     37a:	13 82       	std	Z+3, r1	; 0x03
     37c:	12 82       	std	Z+2, r1	; 0x02

  rxFifo.data = rxData;
     37e:	88 e1       	ldi	r24, 0x18	; 24
     380:	92 e0       	ldi	r25, 0x02	; 2
     382:	29 e8       	ldi	r18, 0x89	; 137
     384:	32 e0       	ldi	r19, 0x02	; 2
     386:	30 93 19 02 	sts	0x0219, r19
     38a:	20 93 18 02 	sts	0x0218, r18
  rxFifo.size = HAL_UART_RX_FIFO_SIZE;
     38e:	fc 01       	movw	r30, r24
     390:	34 97       	sbiw	r30, 0x04	; 4
     392:	21 e0       	ldi	r18, 0x01	; 1
     394:	30 e0       	ldi	r19, 0x00	; 0
     396:	31 83       	std	Z+1, r19	; 0x01
     398:	20 83       	st	Z, r18
  rxFifo.bytes = 0;
     39a:	fc 01       	movw	r30, r24
     39c:	32 97       	sbiw	r30, 0x02	; 2
     39e:	11 82       	std	Z+1, r1	; 0x01
     3a0:	10 82       	st	Z, r1
  rxFifo.head = 0;
     3a2:	fc 01       	movw	r30, r24
     3a4:	38 97       	sbiw	r30, 0x08	; 8
     3a6:	11 82       	std	Z+1, r1	; 0x01
     3a8:	10 82       	st	Z, r1
  rxFifo.tail = 0;
     3aa:	13 82       	std	Z+3, r1	; 0x03
     3ac:	12 82       	std	Z+2, r1	; 0x02

  udrEmpty = true;
     3ae:	81 e0       	ldi	r24, 0x01	; 1
     3b0:	80 93 0f 02 	sts	0x020F, r24
  newData = false;
     3b4:	10 92 0e 02 	sts	0x020E, r1
}
     3b8:	1f 91       	pop	r17
     3ba:	0f 91       	pop	r16
     3bc:	08 95       	ret

000003be <HAL_UartWriteByte>:

/*****************************************************************************
*****************************************************************************/
void HAL_UartWriteByte(uint8_t byte)
{
  if (txFifo.bytes == txFifo.size)
     3be:	60 91 20 02 	lds	r22, 0x0220
     3c2:	70 91 21 02 	lds	r23, 0x0221
     3c6:	40 91 1e 02 	lds	r20, 0x021E
     3ca:	50 91 1f 02 	lds	r21, 0x021F
     3ce:	64 17       	cp	r22, r20
     3d0:	75 07       	cpc	r23, r21
     3d2:	f1 f0       	breq	.+60     	; 0x410 <HAL_UartWriteByte+0x52>
    return;

  txFifo.data[txFifo.tail++] = byte;
     3d4:	20 91 1c 02 	lds	r18, 0x021C
     3d8:	30 91 1d 02 	lds	r19, 0x021D
     3dc:	e0 91 22 02 	lds	r30, 0x0222
     3e0:	f0 91 23 02 	lds	r31, 0x0223
     3e4:	e2 0f       	add	r30, r18
     3e6:	f3 1f       	adc	r31, r19
     3e8:	80 83       	st	Z, r24
     3ea:	2f 5f       	subi	r18, 0xFF	; 255
     3ec:	3f 4f       	sbci	r19, 0xFF	; 255
     3ee:	30 93 1d 02 	sts	0x021D, r19
     3f2:	20 93 1c 02 	sts	0x021C, r18
  if (txFifo.tail == txFifo.size)
     3f6:	24 17       	cp	r18, r20
     3f8:	35 07       	cpc	r19, r21
     3fa:	21 f4       	brne	.+8      	; 0x404 <HAL_UartWriteByte+0x46>
    txFifo.tail = 0;
     3fc:	10 92 1d 02 	sts	0x021D, r1
     400:	10 92 1c 02 	sts	0x021C, r1
  txFifo.bytes++;
     404:	6f 5f       	subi	r22, 0xFF	; 255
     406:	7f 4f       	sbci	r23, 0xFF	; 255
     408:	70 93 21 02 	sts	0x0221, r23
     40c:	60 93 20 02 	sts	0x0220, r22
     410:	08 95       	ret

00000412 <HAL_UartReadByte>:
uint8_t HAL_UartReadByte(void)
{
  uint8_t byte;

  PRAGMA(diag_suppress=Pa082);
  ATOMIC_SECTION_ENTER
     412:	9f b7       	in	r25, 0x3f	; 63
     414:	f8 94       	cli
    byte = rxFifo.data[rxFifo.head++];
     416:	e0 91 18 02 	lds	r30, 0x0218
     41a:	f0 91 19 02 	lds	r31, 0x0219
     41e:	20 91 10 02 	lds	r18, 0x0210
     422:	30 91 11 02 	lds	r19, 0x0211
     426:	e2 0f       	add	r30, r18
     428:	f3 1f       	adc	r31, r19
     42a:	80 81       	ld	r24, Z
     42c:	2f 5f       	subi	r18, 0xFF	; 255
     42e:	3f 4f       	sbci	r19, 0xFF	; 255
     430:	30 93 11 02 	sts	0x0211, r19
     434:	20 93 10 02 	sts	0x0210, r18
    if (rxFifo.head == rxFifo.size)
     438:	40 91 10 02 	lds	r20, 0x0210
     43c:	50 91 11 02 	lds	r21, 0x0211
     440:	20 91 14 02 	lds	r18, 0x0214
     444:	30 91 15 02 	lds	r19, 0x0215
     448:	42 17       	cp	r20, r18
     44a:	53 07       	cpc	r21, r19
     44c:	21 f4       	brne	.+8      	; 0x456 <HAL_UartReadByte+0x44>
      rxFifo.head = 0;
     44e:	10 92 11 02 	sts	0x0211, r1
     452:	10 92 10 02 	sts	0x0210, r1
    rxFifo.bytes--;
     456:	20 91 16 02 	lds	r18, 0x0216
     45a:	30 91 17 02 	lds	r19, 0x0217
     45e:	21 50       	subi	r18, 0x01	; 1
     460:	30 40       	sbci	r19, 0x00	; 0
     462:	30 93 17 02 	sts	0x0217, r19
     466:	20 93 16 02 	sts	0x0216, r18
  ATOMIC_SECTION_LEAVE
     46a:	9f bf       	out	0x3f, r25	; 63
  PRAGMA(diag_default=Pa082);

  return byte;
}
     46c:	08 95       	ret

0000046e <__vector_26>:

/*****************************************************************************
*****************************************************************************/
ISR(USARTx_UDRE_vect)
{
     46e:	1f 92       	push	r1
     470:	0f 92       	push	r0
     472:	0f b6       	in	r0, 0x3f	; 63
     474:	0f 92       	push	r0
     476:	0b b6       	in	r0, 0x3b	; 59
     478:	0f 92       	push	r0
     47a:	11 24       	eor	r1, r1
     47c:	8f 93       	push	r24
     47e:	ef 93       	push	r30
     480:	ff 93       	push	r31
  udrEmpty = true;
     482:	81 e0       	ldi	r24, 0x01	; 1
     484:	80 93 0f 02 	sts	0x020F, r24
  UCSRxB &= ~(1 << UDRIE1);
     488:	e1 ec       	ldi	r30, 0xC1	; 193
     48a:	f0 e0       	ldi	r31, 0x00	; 0
     48c:	80 81       	ld	r24, Z
     48e:	8f 7d       	andi	r24, 0xDF	; 223
     490:	80 83       	st	Z, r24
}
     492:	ff 91       	pop	r31
     494:	ef 91       	pop	r30
     496:	8f 91       	pop	r24
     498:	0f 90       	pop	r0
     49a:	0b be       	out	0x3b, r0	; 59
     49c:	0f 90       	pop	r0
     49e:	0f be       	out	0x3f, r0	; 63
     4a0:	0f 90       	pop	r0
     4a2:	1f 90       	pop	r1
     4a4:	18 95       	reti

000004a6 <__vector_25>:

/*****************************************************************************
*****************************************************************************/
ISR(USARTx_RX_vect)
{
     4a6:	1f 92       	push	r1
     4a8:	0f 92       	push	r0
     4aa:	0f b6       	in	r0, 0x3f	; 63
     4ac:	0f 92       	push	r0
     4ae:	0b b6       	in	r0, 0x3b	; 59
     4b0:	0f 92       	push	r0
     4b2:	11 24       	eor	r1, r1
     4b4:	2f 93       	push	r18
     4b6:	3f 93       	push	r19
     4b8:	4f 93       	push	r20
     4ba:	8f 93       	push	r24
     4bc:	9f 93       	push	r25
     4be:	ef 93       	push	r30
     4c0:	ff 93       	push	r31
  PRAGMA(diag_suppress=Pa082);

  uint8_t status = UCSRxA;
     4c2:	80 91 c0 00 	lds	r24, 0x00C0
  uint8_t byte = UDRx;
     4c6:	40 91 c6 00 	lds	r20, 0x00C6

  if (0 == (status & ((1 << FE1) | (1 << DOR1) | (1 << UPE1))))
     4ca:	8c 71       	andi	r24, 0x1C	; 28
     4cc:	b1 f5       	brne	.+108    	; 0x53a <__vector_25+0x94>
  {
    if (rxFifo.bytes == rxFifo.size)
     4ce:	20 91 16 02 	lds	r18, 0x0216
     4d2:	30 91 17 02 	lds	r19, 0x0217
     4d6:	80 91 14 02 	lds	r24, 0x0214
     4da:	90 91 15 02 	lds	r25, 0x0215
     4de:	28 17       	cp	r18, r24
     4e0:	39 07       	cpc	r19, r25
     4e2:	59 f1       	breq	.+86     	; 0x53a <__vector_25+0x94>
      return;

    rxFifo.data[rxFifo.tail++] = byte;
     4e4:	e0 91 18 02 	lds	r30, 0x0218
     4e8:	f0 91 19 02 	lds	r31, 0x0219
     4ec:	80 91 12 02 	lds	r24, 0x0212
     4f0:	90 91 13 02 	lds	r25, 0x0213
     4f4:	e8 0f       	add	r30, r24
     4f6:	f9 1f       	adc	r31, r25
     4f8:	40 83       	st	Z, r20
     4fa:	01 96       	adiw	r24, 0x01	; 1
     4fc:	90 93 13 02 	sts	0x0213, r25
     500:	80 93 12 02 	sts	0x0212, r24
    if (rxFifo.tail == rxFifo.size)
     504:	20 91 12 02 	lds	r18, 0x0212
     508:	30 91 13 02 	lds	r19, 0x0213
     50c:	80 91 14 02 	lds	r24, 0x0214
     510:	90 91 15 02 	lds	r25, 0x0215
     514:	28 17       	cp	r18, r24
     516:	39 07       	cpc	r19, r25
     518:	21 f4       	brne	.+8      	; 0x522 <__vector_25+0x7c>
      rxFifo.tail = 0;
     51a:	10 92 13 02 	sts	0x0213, r1
     51e:	10 92 12 02 	sts	0x0212, r1
    rxFifo.bytes++;
     522:	80 91 16 02 	lds	r24, 0x0216
     526:	90 91 17 02 	lds	r25, 0x0217
     52a:	01 96       	adiw	r24, 0x01	; 1
     52c:	90 93 17 02 	sts	0x0217, r25
     530:	80 93 16 02 	sts	0x0216, r24

    newData = true;
     534:	81 e0       	ldi	r24, 0x01	; 1
     536:	80 93 0e 02 	sts	0x020E, r24
  }

  PRAGMA(diag_default=Pa082);
}
     53a:	ff 91       	pop	r31
     53c:	ef 91       	pop	r30
     53e:	9f 91       	pop	r25
     540:	8f 91       	pop	r24
     542:	4f 91       	pop	r20
     544:	3f 91       	pop	r19
     546:	2f 91       	pop	r18
     548:	0f 90       	pop	r0
     54a:	0b be       	out	0x3b, r0	; 59
     54c:	0f 90       	pop	r0
     54e:	0f be       	out	0x3f, r0	; 63
     550:	0f 90       	pop	r0
     552:	1f 90       	pop	r1
     554:	18 95       	reti

00000556 <HAL_UartTaskHandler>:

/*****************************************************************************
*****************************************************************************/
void HAL_UartTaskHandler(void)
{
  if (txFifo.bytes && udrEmpty)
     556:	80 91 20 02 	lds	r24, 0x0220
     55a:	90 91 21 02 	lds	r25, 0x0221
     55e:	00 97       	sbiw	r24, 0x00	; 0
     560:	89 f1       	breq	.+98     	; 0x5c4 <HAL_UartTaskHandler+0x6e>
     562:	20 91 0f 02 	lds	r18, 0x020F
     566:	22 23       	and	r18, r18
     568:	69 f1       	breq	.+90     	; 0x5c4 <HAL_UartTaskHandler+0x6e>
  {
    uint8_t byte;

    byte = txFifo.data[txFifo.head++];
     56a:	20 91 1a 02 	lds	r18, 0x021A
     56e:	30 91 1b 02 	lds	r19, 0x021B
     572:	e0 91 22 02 	lds	r30, 0x0222
     576:	f0 91 23 02 	lds	r31, 0x0223
     57a:	e2 0f       	add	r30, r18
     57c:	f3 1f       	adc	r31, r19
     57e:	60 81       	ld	r22, Z
     580:	2f 5f       	subi	r18, 0xFF	; 255
     582:	3f 4f       	sbci	r19, 0xFF	; 255
     584:	30 93 1b 02 	sts	0x021B, r19
     588:	20 93 1a 02 	sts	0x021A, r18
    if (txFifo.head == txFifo.size)
     58c:	40 91 1e 02 	lds	r20, 0x021E
     590:	50 91 1f 02 	lds	r21, 0x021F
     594:	24 17       	cp	r18, r20
     596:	35 07       	cpc	r19, r21
     598:	21 f4       	brne	.+8      	; 0x5a2 <HAL_UartTaskHandler+0x4c>
      txFifo.head = 0;
     59a:	10 92 1b 02 	sts	0x021B, r1
     59e:	10 92 1a 02 	sts	0x021A, r1
    txFifo.bytes--;
     5a2:	01 97       	sbiw	r24, 0x01	; 1
     5a4:	90 93 21 02 	sts	0x0221, r25
     5a8:	80 93 20 02 	sts	0x0220, r24

    ATOMIC_SECTION_ENTER
     5ac:	9f b7       	in	r25, 0x3f	; 63
     5ae:	f8 94       	cli
      UDRx = byte;
     5b0:	60 93 c6 00 	sts	0x00C6, r22
      UCSRxB |= (1 << UDRIE1);
     5b4:	80 91 c1 00 	lds	r24, 0x00C1
     5b8:	80 62       	ori	r24, 0x20	; 32
     5ba:	80 93 c1 00 	sts	0x00C1, r24
      udrEmpty = false;
     5be:	10 92 0f 02 	sts	0x020F, r1
    ATOMIC_SECTION_LEAVE
     5c2:	9f bf       	out	0x3f, r25	; 63

  {
    uint16_t bytes;
    bool new;

    ATOMIC_SECTION_ENTER
     5c4:	3f b7       	in	r19, 0x3f	; 63
     5c6:	f8 94       	cli
      new = newData;
     5c8:	20 91 0e 02 	lds	r18, 0x020E
      newData = false;
     5cc:	10 92 0e 02 	sts	0x020E, r1
      bytes = rxFifo.bytes;
     5d0:	80 91 16 02 	lds	r24, 0x0216
     5d4:	90 91 17 02 	lds	r25, 0x0217
    ATOMIC_SECTION_LEAVE
     5d8:	3f bf       	out	0x3f, r19	; 63

    if (new)
     5da:	22 23       	and	r18, r18
     5dc:	11 f0       	breq	.+4      	; 0x5e2 <HAL_UartTaskHandler+0x8c>
      HAL_UartBytesReceived(bytes);
     5de:	0e 94 ef 0c 	call	0x19de	; 0x19de <HAL_UartBytesReceived>
     5e2:	08 95       	ret

000005e4 <NWK_Init>:

/*****************************************************************************
*****************************************************************************/
void NWK_Init(void)
{
  nwkIb.nwkSeqNum = 0;
     5e4:	10 92 b5 07 	sts	0x07B5, r1
  nwkIb.macSeqNum = 0;
     5e8:	10 92 b6 07 	sts	0x07B6, r1
  nwkIb.addr = 0;
     5ec:	e1 eb       	ldi	r30, 0xB1	; 177
     5ee:	f7 e0       	ldi	r31, 0x07	; 7
     5f0:	11 82       	std	Z+1, r1	; 0x01
     5f2:	10 82       	st	Z, r1

  for (uint8_t i = 0; i < NWK_MAX_ENDPOINTS_AMOUNT; i++)
    nwkIb.endpoint[i] = NULL;
     5f4:	17 82       	std	Z+7, r1	; 0x07
     5f6:	16 82       	std	Z+6, r1	; 0x06
     5f8:	11 86       	std	Z+9, r1	; 0x09
     5fa:	10 86       	std	Z+8, r1	; 0x08
     5fc:	13 86       	std	Z+11, r1	; 0x0b
     5fe:	12 86       	std	Z+10, r1	; 0x0a

  nwkTxInit();
     600:	0e 94 61 08 	call	0x10c2	; 0x10c2 <nwkTxInit>
  nwkRxInit();
     604:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <nwkRxInit>
  nwkFrameInit();
     608:	0e 94 14 04 	call	0x828	; 0x828 <nwkFrameInit>
  nwkDataReqInit();
     60c:	0e 94 63 03 	call	0x6c6	; 0x6c6 <nwkDataReqInit>

#ifdef NWK_ENABLE_ROUTING
  nwkRouteInit();
     610:	0e 94 9e 04 	call	0x93c	; 0x93c <nwkRouteInit>
#endif

#ifdef NWK_ENABLE_SECURITY
  nwkSecurityInit();
#endif
}
     614:	08 95       	ret

00000616 <NWK_SetAddr>:

/*****************************************************************************
*****************************************************************************/
void NWK_SetAddr(uint16_t addr)
{
  nwkIb.addr = addr;
     616:	90 93 b2 07 	sts	0x07B2, r25
     61a:	80 93 b1 07 	sts	0x07B1, r24
  PHY_SetShortAddr(addr);
     61e:	0e 94 0d 0a 	call	0x141a	; 0x141a <PHY_SetShortAddr>
}
     622:	08 95       	ret

00000624 <NWK_SetPanId>:

/*****************************************************************************
*****************************************************************************/
void NWK_SetPanId(uint16_t panId)
{
  nwkIb.panId = panId;
     624:	90 93 b4 07 	sts	0x07B4, r25
     628:	80 93 b3 07 	sts	0x07B3, r24
  PHY_SetPanId(panId);
     62c:	0e 94 03 0a 	call	0x1406	; 0x1406 <PHY_SetPanId>
}
     630:	08 95       	ret

00000632 <NWK_OpenEndpoint>:

/*****************************************************************************
*****************************************************************************/
void NWK_OpenEndpoint(uint8_t id, bool (*handler)(NWK_DataInd_t *ind))
{
  nwkIb.endpoint[id] = handler;
     632:	e8 2f       	mov	r30, r24
     634:	f0 e0       	ldi	r31, 0x00	; 0
     636:	ee 0f       	add	r30, r30
     638:	ff 1f       	adc	r31, r31
     63a:	e9 54       	subi	r30, 0x49	; 73
     63c:	f8 4f       	sbci	r31, 0xF8	; 248
     63e:	71 83       	std	Z+1, r23	; 0x01
     640:	60 83       	st	Z, r22
}
     642:	08 95       	ret

00000644 <NWK_Busy>:

/*****************************************************************************
*****************************************************************************/
bool NWK_Busy(void)
{
  return nwkRxBusy() || nwkTxBusy() || nwkDataReqBusy() || PHY_Busy();
     644:	0e 94 4e 06 	call	0xc9c	; 0xc9c <nwkRxBusy>
     648:	88 23       	and	r24, r24
     64a:	59 f4       	brne	.+22     	; 0x662 <NWK_Busy+0x1e>
     64c:	0e 94 25 09 	call	0x124a	; 0x124a <nwkTxBusy>
     650:	88 23       	and	r24, r24
     652:	39 f4       	brne	.+14     	; 0x662 <NWK_Busy+0x1e>
     654:	0e 94 7d 03 	call	0x6fa	; 0x6fa <nwkDataReqBusy>
     658:	88 23       	and	r24, r24
     65a:	31 f4       	brne	.+12     	; 0x668 <NWK_Busy+0x24>
     65c:	0e 94 17 0a 	call	0x142e	; 0x142e <PHY_Busy>
     660:	08 95       	ret
     662:	81 e0       	ldi	r24, 0x01	; 1
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	08 95       	ret
     668:	81 e0       	ldi	r24, 0x01	; 1
     66a:	90 e0       	ldi	r25, 0x00	; 0
}
     66c:	08 95       	ret

0000066e <NWK_SleepReq>:

/*****************************************************************************
*****************************************************************************/
void NWK_SleepReq(void)
{
  PHY_Sleep();
     66e:	0e 94 27 0a 	call	0x144e	; 0x144e <PHY_Sleep>
}
     672:	08 95       	ret

00000674 <NWK_WakeupReq>:

/*****************************************************************************
*****************************************************************************/
void NWK_WakeupReq(void)
{
  PHY_Wakeup();
     674:	0e 94 33 0a 	call	0x1466	; 0x1466 <PHY_Wakeup>
}
     678:	08 95       	ret

0000067a <NWK_TaskHandler>:

/*****************************************************************************
*****************************************************************************/
void NWK_TaskHandler(void)
{
  nwkRxTaskHandler();
     67a:	0e 94 55 06 	call	0xcaa	; 0xcaa <nwkRxTaskHandler>
  nwkTxTaskHandler();
     67e:	0e 94 48 09 	call	0x1290	; 0x1290 <nwkTxTaskHandler>
  nwkDataReqTaskHandler();
     682:	0e 94 87 03 	call	0x70e	; 0x70e <nwkDataReqTaskHandler>
#ifdef NWK_ENABLE_SECURITY
  nwkSecurityTaskHandler();
#endif
}
     686:	08 95       	ret

00000688 <nwkDataReqTxConf>:

/*****************************************************************************
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     688:	e0 91 8b 02 	lds	r30, 0x028B
     68c:	f0 91 8c 02 	lds	r31, 0x028C
     690:	15 c0       	rjmp	.+42     	; 0x6bc <nwkDataReqTxConf+0x34>
  {
    if (req->frame == frame)
     692:	22 81       	ldd	r18, Z+2	; 0x02
     694:	33 81       	ldd	r19, Z+3	; 0x03
     696:	28 17       	cp	r18, r24
     698:	39 07       	cpc	r19, r25
     69a:	69 f4       	brne	.+26     	; 0x6b6 <nwkDataReqTxConf+0x2e>
    {
      req->status = frame->tx.status;
     69c:	dc 01       	movw	r26, r24
     69e:	a1 58       	subi	r26, 0x81	; 129
     6a0:	bf 4f       	sbci	r27, 0xFF	; 255
     6a2:	2c 91       	ld	r18, X
     6a4:	27 87       	std	Z+15, r18	; 0x0f
      req->control = frame->tx.control;
     6a6:	dc 01       	movw	r26, r24
     6a8:	ae 57       	subi	r26, 0x7E	; 126
     6aa:	bf 4f       	sbci	r27, 0xFF	; 255
     6ac:	2c 91       	ld	r18, X
     6ae:	20 8b       	std	Z+16, r18	; 0x10
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
     6b0:	22 e0       	ldi	r18, 0x02	; 2
     6b2:	24 83       	std	Z+4, r18	; 0x04
      break;
     6b4:	05 c0       	rjmp	.+10     	; 0x6c0 <nwkDataReqTxConf+0x38>

/*****************************************************************************
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     6b6:	01 90       	ld	r0, Z+
     6b8:	f0 81       	ld	r31, Z
     6ba:	e0 2d       	mov	r30, r0
     6bc:	30 97       	sbiw	r30, 0x00	; 0
     6be:	49 f7       	brne	.-46     	; 0x692 <nwkDataReqTxConf+0xa>
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
      break;
    }
  }

  nwkFrameFree(frame);
     6c0:	0e 94 41 04 	call	0x882	; 0x882 <nwkFrameFree>
}
     6c4:	08 95       	ret

000006c6 <nwkDataReqInit>:

/*****************************************************************************
*****************************************************************************/
void nwkDataReqInit(void)
{
  nwkDataReqQueue = NULL;
     6c6:	10 92 8c 02 	sts	0x028C, r1
     6ca:	10 92 8b 02 	sts	0x028B, r1
}
     6ce:	08 95       	ret

000006d0 <NWK_DataReq>:

/*****************************************************************************
*****************************************************************************/
void NWK_DataReq(NWK_DataReq_t *req)
{
     6d0:	fc 01       	movw	r30, r24
  req->state = NWK_DATA_REQ_STATE_INITIAL;
     6d2:	14 82       	std	Z+4, r1	; 0x04
  req->status = NWK_SUCCESS_STATUS;
     6d4:	17 86       	std	Z+15, r1	; 0x0f
  req->frame = NULL;
     6d6:	13 82       	std	Z+3, r1	; 0x03
     6d8:	12 82       	std	Z+2, r1	; 0x02

  if (NULL == nwkDataReqQueue)
     6da:	80 91 8b 02 	lds	r24, 0x028B
     6de:	90 91 8c 02 	lds	r25, 0x028C
     6e2:	00 97       	sbiw	r24, 0x00	; 0
     6e4:	19 f4       	brne	.+6      	; 0x6ec <NWK_DataReq+0x1c>
  {
    req->next = NULL;
     6e6:	11 82       	std	Z+1, r1	; 0x01
     6e8:	10 82       	st	Z, r1
     6ea:	02 c0       	rjmp	.+4      	; 0x6f0 <NWK_DataReq+0x20>
    nwkDataReqQueue = req;
  }
  else
  {
    req->next = nwkDataReqQueue;
     6ec:	91 83       	std	Z+1, r25	; 0x01
     6ee:	80 83       	st	Z, r24
    nwkDataReqQueue = req;
     6f0:	f0 93 8c 02 	sts	0x028C, r31
     6f4:	e0 93 8b 02 	sts	0x028B, r30
     6f8:	08 95       	ret

000006fa <nwkDataReqBusy>:

/*****************************************************************************
*****************************************************************************/
bool nwkDataReqBusy(void)
{
  return NULL != nwkDataReqQueue;
     6fa:	81 e0       	ldi	r24, 0x01	; 1
     6fc:	20 91 8b 02 	lds	r18, 0x028B
     700:	30 91 8c 02 	lds	r19, 0x028C
     704:	21 15       	cp	r18, r1
     706:	31 05       	cpc	r19, r1
     708:	09 f4       	brne	.+2      	; 0x70c <nwkDataReqBusy+0x12>
     70a:	80 e0       	ldi	r24, 0x00	; 0
}
     70c:	08 95       	ret

0000070e <nwkDataReqTaskHandler>:

/*****************************************************************************
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
     70e:	0f 93       	push	r16
     710:	1f 93       	push	r17
     712:	cf 93       	push	r28
     714:	df 93       	push	r29
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     716:	e0 91 8b 02 	lds	r30, 0x028B
     71a:	f0 91 8c 02 	lds	r31, 0x028C
     71e:	ef 01       	movw	r28, r30
     720:	7b c0       	rjmp	.+246    	; 0x818 <nwkDataReqTaskHandler+0x10a>
  {
    switch (req->state)
     722:	8c 81       	ldd	r24, Y+4	; 0x04
     724:	88 23       	and	r24, r24
     726:	21 f0       	breq	.+8      	; 0x730 <nwkDataReqTaskHandler+0x22>
     728:	82 30       	cpi	r24, 0x02	; 2
     72a:	09 f0       	breq	.+2      	; 0x72e <nwkDataReqTaskHandler+0x20>
     72c:	72 c0       	rjmp	.+228    	; 0x812 <nwkDataReqTaskHandler+0x104>
     72e:	58 c0       	rjmp	.+176    	; 0x7e0 <nwkDataReqTaskHandler+0xd2>
#ifdef NWK_ENABLE_SECURITY
  if (req->options & NWK_OPT_ENABLE_SECURITY)
    size += NWK_SECURITY_MIC_SIZE;
#endif

  if (NULL == (frame = nwkFrameAlloc(size)))
     730:	8c 85       	ldd	r24, Y+12	; 0x0c
     732:	0e 94 1b 04 	call	0x836	; 0x836 <nwkFrameAlloc>
     736:	8c 01       	movw	r16, r24
     738:	00 97       	sbiw	r24, 0x00	; 0
     73a:	21 f4       	brne	.+8      	; 0x744 <nwkDataReqTaskHandler+0x36>
  {
    req->state = NWK_DATA_REQ_STATE_CONFIRM;
     73c:	82 e0       	ldi	r24, 0x02	; 2
     73e:	8c 83       	std	Y+4, r24	; 0x04
    req->status = NWK_OUT_OF_MEMORY_STATUS;
     740:	8f 87       	std	Y+15, r24	; 0x0f
     742:	6d c0       	rjmp	.+218    	; 0x81e <nwkDataReqTaskHandler+0x110>
    return;
  }

  req->frame = frame;
     744:	9b 83       	std	Y+3, r25	; 0x03
     746:	8a 83       	std	Y+2, r24	; 0x02
  req->state = NWK_DATA_REQ_STATE_WAIT_CONF;
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	8c 83       	std	Y+4, r24	; 0x04

  frame->tx.confirm = nwkDataReqTxConf;
     74c:	f8 01       	movw	r30, r16
     74e:	ed 57       	subi	r30, 0x7D	; 125
     750:	ff 4f       	sbci	r31, 0xFF	; 255
     752:	84 e4       	ldi	r24, 0x44	; 68
     754:	93 e0       	ldi	r25, 0x03	; 3
     756:	91 83       	std	Z+1, r25	; 0x01
     758:	80 83       	st	Z, r24
  frame->tx.control = req->options & NWK_OPT_BROADCAST_PAN_ID ? NWK_TX_CONTROL_BROADCAST_PAN_ID : 0;
     75a:	f8 01       	movw	r30, r16
     75c:	ee 57       	subi	r30, 0x7E	; 126
     75e:	ff 4f       	sbci	r31, 0xFF	; 255
     760:	99 85       	ldd	r25, Y+9	; 0x09
     762:	81 e0       	ldi	r24, 0x01	; 1
     764:	92 ff       	sbrs	r25, 2
     766:	80 e0       	ldi	r24, 0x00	; 0
     768:	80 83       	st	Z, r24

  frame->data.header.nwkFcf.ackRequest = req->options & NWK_OPT_ACK_REQUEST ? 1 : 0;
     76a:	99 85       	ldd	r25, Y+9	; 0x09
     76c:	91 70       	andi	r25, 0x01	; 1
     76e:	f8 01       	movw	r30, r16
     770:	83 85       	ldd	r24, Z+11	; 0x0b
     772:	8e 7f       	andi	r24, 0xFE	; 254
     774:	89 2b       	or	r24, r25
     776:	83 87       	std	Z+11, r24	; 0x0b
#ifdef NWK_ENABLE_SECURITY
  frame->data.header.nwkFcf.securityEnabled = req->options & NWK_OPT_ENABLE_SECURITY ? 1 : 0;
#endif
  frame->data.header.nwkFcf.linkLocal = req->options & NWK_OPT_LINK_LOCAL ? 1 : 0;
     778:	99 85       	ldd	r25, Y+9	; 0x09
     77a:	81 e0       	ldi	r24, 0x01	; 1
     77c:	93 ff       	sbrs	r25, 3
     77e:	80 e0       	ldi	r24, 0x00	; 0
     780:	98 2f       	mov	r25, r24
     782:	99 0f       	add	r25, r25
     784:	99 0f       	add	r25, r25
     786:	f8 01       	movw	r30, r16
     788:	83 85       	ldd	r24, Z+11	; 0x0b
     78a:	83 70       	andi	r24, 0x03	; 3
  frame->data.header.nwkFcf.reserved = 0;
     78c:	89 2b       	or	r24, r25
     78e:	83 87       	std	Z+11, r24	; 0x0b
  frame->data.header.nwkSeq = ++nwkIb.nwkSeqNum;
     790:	80 91 b5 07 	lds	r24, 0x07B5
     794:	8f 5f       	subi	r24, 0xFF	; 255
     796:	80 93 b5 07 	sts	0x07B5, r24
     79a:	84 87       	std	Z+12, r24	; 0x0c
  frame->data.header.nwkSrcAddr = nwkIb.addr;
     79c:	80 91 b1 07 	lds	r24, 0x07B1
     7a0:	90 91 b2 07 	lds	r25, 0x07B2
     7a4:	96 87       	std	Z+14, r25	; 0x0e
     7a6:	85 87       	std	Z+13, r24	; 0x0d
  frame->data.header.nwkDstAddr = req->dstAddr;
     7a8:	8d 81       	ldd	r24, Y+5	; 0x05
     7aa:	9e 81       	ldd	r25, Y+6	; 0x06
     7ac:	90 8b       	std	Z+16, r25	; 0x10
     7ae:	87 87       	std	Z+15, r24	; 0x0f
  frame->data.header.nwkSrcEndpoint = req->srcEndpoint;
     7b0:	98 85       	ldd	r25, Y+8	; 0x08
     7b2:	9f 70       	andi	r25, 0x0F	; 15
     7b4:	81 89       	ldd	r24, Z+17	; 0x11
     7b6:	80 7f       	andi	r24, 0xF0	; 240
     7b8:	89 2b       	or	r24, r25
     7ba:	81 8b       	std	Z+17, r24	; 0x11
  frame->data.header.nwkDstEndpoint = req->dstEndpoint;
     7bc:	9f 81       	ldd	r25, Y+7	; 0x07
     7be:	92 95       	swap	r25
     7c0:	90 7f       	andi	r25, 0xF0	; 240
     7c2:	8f 70       	andi	r24, 0x0F	; 15
     7c4:	89 2b       	or	r24, r25
     7c6:	81 8b       	std	Z+17, r24	; 0x11

  memcpy(frame->data.payload, req->data, req->size);
     7c8:	c8 01       	movw	r24, r16
     7ca:	42 96       	adiw	r24, 0x12	; 18
     7cc:	4c 85       	ldd	r20, Y+12	; 0x0c
     7ce:	6a 85       	ldd	r22, Y+10	; 0x0a
     7d0:	7b 85       	ldd	r23, Y+11	; 0x0b
     7d2:	50 e0       	ldi	r21, 0x00	; 0
     7d4:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <memcpy>

  nwkTxFrame(frame);
     7d8:	c8 01       	movw	r24, r16
     7da:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <nwkTxFrame>
     7de:	1f c0       	rjmp	.+62     	; 0x81e <nwkDataReqTaskHandler+0x110>

/*****************************************************************************
*****************************************************************************/
static void nwkDataReqConfirm(NWK_DataReq_t *req)
{
  if (nwkDataReqQueue == req)
     7e0:	ec 17       	cp	r30, r28
     7e2:	fd 07       	cpc	r31, r29
     7e4:	41 f4       	brne	.+16     	; 0x7f6 <nwkDataReqTaskHandler+0xe8>
  {
    nwkDataReqQueue = nwkDataReqQueue->next;
     7e6:	88 81       	ld	r24, Y
     7e8:	99 81       	ldd	r25, Y+1	; 0x01
     7ea:	90 93 8c 02 	sts	0x028C, r25
     7ee:	80 93 8b 02 	sts	0x028B, r24
     7f2:	0a c0       	rjmp	.+20     	; 0x808 <nwkDataReqTaskHandler+0xfa>
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
     7f4:	fc 01       	movw	r30, r24
     7f6:	80 81       	ld	r24, Z
     7f8:	91 81       	ldd	r25, Z+1	; 0x01
     7fa:	8c 17       	cp	r24, r28
     7fc:	9d 07       	cpc	r25, r29
     7fe:	d1 f7       	brne	.-12     	; 0x7f4 <nwkDataReqTaskHandler+0xe6>
      prev = prev->next;
    prev->next = ((NWK_DataReq_t *)prev->next)->next;
     800:	88 81       	ld	r24, Y
     802:	99 81       	ldd	r25, Y+1	; 0x01
     804:	91 83       	std	Z+1, r25	; 0x01
     806:	80 83       	st	Z, r24
  }

  req->confirm(req);
     808:	ed 85       	ldd	r30, Y+13	; 0x0d
     80a:	fe 85       	ldd	r31, Y+14	; 0x0e
     80c:	ce 01       	movw	r24, r28
     80e:	09 95       	icall
     810:	06 c0       	rjmp	.+12     	; 0x81e <nwkDataReqTaskHandler+0x110>

/*****************************************************************************
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     812:	09 90       	ld	r0, Y+
     814:	d8 81       	ld	r29, Y
     816:	c0 2d       	mov	r28, r0
     818:	20 97       	sbiw	r28, 0x00	; 0
     81a:	09 f0       	breq	.+2      	; 0x81e <nwkDataReqTaskHandler+0x110>
     81c:	82 cf       	rjmp	.-252    	; 0x722 <nwkDataReqTaskHandler+0x14>

      default:
        break;
    };
  }
}
     81e:	df 91       	pop	r29
     820:	cf 91       	pop	r28
     822:	1f 91       	pop	r17
     824:	0f 91       	pop	r16
     826:	08 95       	ret

00000828 <nwkFrameInit>:
/*****************************************************************************
*****************************************************************************/
void nwkFrameInit(void)
{
  for (int i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
     828:	10 92 8d 02 	sts	0x028D, r1
     82c:	10 92 12 03 	sts	0x0312, r1
     830:	10 92 97 03 	sts	0x0397, r1
}
     834:	08 95       	ret

00000836 <nwkFrameAlloc>:
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(uint8_t size)
{
  for (int i = 0; i < NWK_BUFFERS_AMOUNT; i++)
  {
    if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state)
     836:	90 91 8d 02 	lds	r25, 0x028D
     83a:	99 23       	and	r25, r25
     83c:	59 f0       	breq	.+22     	; 0x854 <nwkFrameAlloc+0x1e>
     83e:	90 91 12 03 	lds	r25, 0x0312
     842:	99 23       	and	r25, r25
     844:	51 f0       	breq	.+20     	; 0x85a <nwkFrameAlloc+0x24>
     846:	90 91 97 03 	lds	r25, 0x0397
     84a:	99 23       	and	r25, r25
     84c:	b9 f4       	brne	.+46     	; 0x87c <nwkFrameAlloc+0x46>

/*****************************************************************************
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(uint8_t size)
{
  for (int i = 0; i < NWK_BUFFERS_AMOUNT; i++)
     84e:	22 e0       	ldi	r18, 0x02	; 2
     850:	30 e0       	ldi	r19, 0x00	; 0
     852:	05 c0       	rjmp	.+10     	; 0x85e <nwkFrameAlloc+0x28>
     854:	20 e0       	ldi	r18, 0x00	; 0
     856:	30 e0       	ldi	r19, 0x00	; 0
     858:	02 c0       	rjmp	.+4      	; 0x85e <nwkFrameAlloc+0x28>
     85a:	21 e0       	ldi	r18, 0x01	; 1
     85c:	30 e0       	ldi	r19, 0x00	; 0
  {
    if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state)
    {
      nwkFrameFrames[i].size = sizeof(NwkFrameHeader_t) + size;
     85e:	45 e8       	ldi	r20, 0x85	; 133
     860:	50 e0       	ldi	r21, 0x00	; 0
     862:	24 9f       	mul	r18, r20
     864:	f0 01       	movw	r30, r0
     866:	25 9f       	mul	r18, r21
     868:	f0 0d       	add	r31, r0
     86a:	34 9f       	mul	r19, r20
     86c:	f0 0d       	add	r31, r0
     86e:	11 24       	eor	r1, r1
     870:	e3 57       	subi	r30, 0x73	; 115
     872:	fd 4f       	sbci	r31, 0xFD	; 253
     874:	80 5f       	subi	r24, 0xF0	; 240
     876:	81 83       	std	Z+1, r24	; 0x01
      return &nwkFrameFrames[i];
     878:	cf 01       	movw	r24, r30
     87a:	08 95       	ret
    }
  }
  return NULL;
     87c:	80 e0       	ldi	r24, 0x00	; 0
     87e:	90 e0       	ldi	r25, 0x00	; 0
}
     880:	08 95       	ret

00000882 <nwkFrameFree>:

/*****************************************************************************
*****************************************************************************/
void nwkFrameFree(NwkFrame_t *frame)
{
  frame->state = NWK_FRAME_STATE_FREE;
     882:	fc 01       	movw	r30, r24
     884:	10 82       	st	Z, r1
}
     886:	08 95       	ret

00000888 <nwkFrameByIndex>:

/*****************************************************************************
*****************************************************************************/
NwkFrame_t *nwkFrameByIndex(uint8_t i)
{
  return &nwkFrameFrames[i];
     888:	48 2f       	mov	r20, r24
     88a:	50 e0       	ldi	r21, 0x00	; 0
     88c:	25 e8       	ldi	r18, 0x85	; 133
     88e:	30 e0       	ldi	r19, 0x00	; 0
     890:	42 9f       	mul	r20, r18
     892:	c0 01       	movw	r24, r0
     894:	43 9f       	mul	r20, r19
     896:	90 0d       	add	r25, r0
     898:	52 9f       	mul	r21, r18
     89a:	90 0d       	add	r25, r0
     89c:	11 24       	eor	r1, r1
     89e:	83 57       	subi	r24, 0x73	; 115
     8a0:	9d 4f       	sbci	r25, 0xFD	; 253
}
     8a2:	08 95       	ret

000008a4 <nwkFrameCommandInit>:

/*****************************************************************************
*****************************************************************************/
void nwkFrameCommandInit(NwkFrame_t *frame)
{
     8a4:	fc 01       	movw	r30, r24
  frame->tx.status = NWK_SUCCESS_STATUS;
     8a6:	dc 01       	movw	r26, r24
     8a8:	a1 58       	subi	r26, 0x81	; 129
     8aa:	bf 4f       	sbci	r27, 0xFF	; 255
     8ac:	1c 92       	st	X, r1
  frame->tx.timeout = 0;
     8ae:	dc 01       	movw	r26, r24
     8b0:	a0 58       	subi	r26, 0x80	; 128
     8b2:	bf 4f       	sbci	r27, 0xFF	; 255
     8b4:	1d 92       	st	X+, r1
     8b6:	1c 92       	st	X, r1
  frame->tx.control = 0;
     8b8:	dc 01       	movw	r26, r24
     8ba:	ae 57       	subi	r26, 0x7E	; 126
     8bc:	bf 4f       	sbci	r27, 0xFF	; 255
     8be:	1c 92       	st	X, r1
  frame->tx.confirm = NULL;
     8c0:	dc 01       	movw	r26, r24
     8c2:	ad 57       	subi	r26, 0x7D	; 125
     8c4:	bf 4f       	sbci	r27, 0xFF	; 255
     8c6:	11 96       	adiw	r26, 0x01	; 1
     8c8:	1c 92       	st	X, r1
     8ca:	1e 92       	st	-X, r1

  frame->data.header.nwkFcf.ackRequest = 0;
  frame->data.header.nwkFcf.securityEnabled = 0;
  frame->data.header.nwkFcf.linkLocal = 0;
  frame->data.header.nwkFcf.reserved = 0;
     8cc:	13 86       	std	Z+11, r1	; 0x0b
  frame->data.header.nwkSeq = ++nwkIb.nwkSeqNum;
     8ce:	80 91 b5 07 	lds	r24, 0x07B5
     8d2:	8f 5f       	subi	r24, 0xFF	; 255
     8d4:	80 93 b5 07 	sts	0x07B5, r24
     8d8:	84 87       	std	Z+12, r24	; 0x0c
  frame->data.header.nwkSrcAddr = nwkIb.addr;
     8da:	80 91 b1 07 	lds	r24, 0x07B1
     8de:	90 91 b2 07 	lds	r25, 0x07B2
     8e2:	96 87       	std	Z+14, r25	; 0x0e
     8e4:	85 87       	std	Z+13, r24	; 0x0d
  frame->data.header.nwkDstAddr = 0;
     8e6:	10 8a       	std	Z+16, r1	; 0x10
     8e8:	17 86       	std	Z+15, r1	; 0x0f
  frame->data.header.nwkSrcEndpoint = 0;
  frame->data.header.nwkDstEndpoint = 0;
     8ea:	11 8a       	std	Z+17, r1	; 0x11
}
     8ec:	08 95       	ret

000008ee <nwkRouteFindRecord>:
      return &nwkRouteTable[i];

  if (NWK_ROUTE_UNKNOWN == dst)
    return &nwkRouteTable[NWK_ROUTE_TABLE_SIZE - 1];

  return NULL;
     8ee:	ec e1       	ldi	r30, 0x1C	; 28
     8f0:	f4 e0       	ldi	r31, 0x04	; 4

/*****************************************************************************
*****************************************************************************/
static NwkRouteTableRecord_t *nwkRouteFindRecord(uint16_t dst)
{
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
     8f2:	20 e0       	ldi	r18, 0x00	; 0
    if (nwkRouteTable[i].dst == dst)
     8f4:	40 81       	ld	r20, Z
     8f6:	51 81       	ldd	r21, Z+1	; 0x01
     8f8:	48 17       	cp	r20, r24
     8fa:	59 07       	cpc	r21, r25
     8fc:	59 f4       	brne	.+22     	; 0x914 <nwkRouteFindRecord+0x26>
      return &nwkRouteTable[i];
     8fe:	30 e0       	ldi	r19, 0x00	; 0
     900:	c9 01       	movw	r24, r18
     902:	88 0f       	add	r24, r24
     904:	99 1f       	adc	r25, r25
     906:	82 0f       	add	r24, r18
     908:	93 1f       	adc	r25, r19
     90a:	88 0f       	add	r24, r24
     90c:	99 1f       	adc	r25, r25
     90e:	84 5e       	subi	r24, 0xE4	; 228
     910:	9b 4f       	sbci	r25, 0xFB	; 251
     912:	08 95       	ret

/*****************************************************************************
*****************************************************************************/
static NwkRouteTableRecord_t *nwkRouteFindRecord(uint16_t dst)
{
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
     914:	2f 5f       	subi	r18, 0xFF	; 255
     916:	36 96       	adiw	r30, 0x06	; 6
     918:	24 36       	cpi	r18, 0x64	; 100
     91a:	61 f7       	brne	.-40     	; 0x8f4 <nwkRouteFindRecord+0x6>
    if (nwkRouteTable[i].dst == dst)
      return &nwkRouteTable[i];

  if (NWK_ROUTE_UNKNOWN == dst)
     91c:	2f ef       	ldi	r18, 0xFF	; 255
     91e:	8f 3f       	cpi	r24, 0xFF	; 255
     920:	92 07       	cpc	r25, r18
     922:	19 f4       	brne	.+6      	; 0x92a <nwkRouteFindRecord+0x3c>
    return &nwkRouteTable[NWK_ROUTE_TABLE_SIZE - 1];
     924:	8e e6       	ldi	r24, 0x6E	; 110
     926:	96 e0       	ldi	r25, 0x06	; 6
     928:	08 95       	ret

  return NULL;
     92a:	80 e0       	ldi	r24, 0x00	; 0
     92c:	90 e0       	ldi	r25, 0x00	; 0
}
     92e:	08 95       	ret

00000930 <nwkRouteErrorConf>:

/*****************************************************************************
*****************************************************************************/
static void nwkRouteErrorConf(NwkFrame_t *frame)
{
  nwkFrameFree(frame);
     930:	0e 94 41 04 	call	0x882	; 0x882 <nwkFrameFree>
}
     934:	08 95       	ret

00000936 <nwkRouteTxFrameConf>:

/*****************************************************************************
*****************************************************************************/
static void nwkRouteTxFrameConf(NwkFrame_t *frame)
{
  nwkFrameFree(frame);
     936:	0e 94 41 04 	call	0x882	; 0x882 <nwkFrameFree>
}
     93a:	08 95       	ret

0000093c <nwkRouteInit>:
static NwkRouteTableRecord_t nwkRouteTable[NWK_ROUTE_TABLE_SIZE];

/*****************************************************************************
*****************************************************************************/
void nwkRouteInit(void)
{
     93c:	ec e1       	ldi	r30, 0x1C	; 28
     93e:	f4 e0       	ldi	r31, 0x04	; 4
     940:	24 e6       	ldi	r18, 0x64	; 100
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
    nwkRouteTable[i].dst = NWK_ROUTE_UNKNOWN;
     942:	8f ef       	ldi	r24, 0xFF	; 255
     944:	9f ef       	ldi	r25, 0xFF	; 255
     946:	91 83       	std	Z+1, r25	; 0x01
     948:	80 83       	st	Z, r24
     94a:	21 50       	subi	r18, 0x01	; 1
     94c:	36 96       	adiw	r30, 0x06	; 6

/*****************************************************************************
*****************************************************************************/
void nwkRouteInit(void)
{
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
     94e:	22 23       	and	r18, r18
     950:	d1 f7       	brne	.-12     	; 0x946 <nwkRouteInit+0xa>
    nwkRouteTable[i].dst = NWK_ROUTE_UNKNOWN;
}
     952:	08 95       	ret

00000954 <nwkRouteRemove>:
*****************************************************************************/
void nwkRouteRemove(uint16_t dst)
{
  NwkRouteTableRecord_t *rec;

  rec = nwkRouteFindRecord(dst);
     954:	0e 94 77 04 	call	0x8ee	; 0x8ee <nwkRouteFindRecord>
  if (rec)
     958:	00 97       	sbiw	r24, 0x00	; 0
     95a:	29 f0       	breq	.+10     	; 0x966 <nwkRouteRemove+0x12>
    rec->dst = NWK_ROUTE_UNKNOWN;
     95c:	2f ef       	ldi	r18, 0xFF	; 255
     95e:	3f ef       	ldi	r19, 0xFF	; 255
     960:	fc 01       	movw	r30, r24
     962:	31 83       	std	Z+1, r19	; 0x01
     964:	20 83       	st	Z, r18
     966:	08 95       	ret

00000968 <nwkRouteFrameReceived>:
}

/*****************************************************************************
*****************************************************************************/
void nwkRouteFrameReceived(NwkFrame_t *frame)
{
     968:	ef 92       	push	r14
     96a:	ff 92       	push	r15
     96c:	0f 93       	push	r16
     96e:	1f 93       	push	r17
     970:	cf 93       	push	r28
     972:	df 93       	push	r29
     974:	ec 01       	movw	r28, r24
  NwkRouteTableRecord_t *rec;
  NwkFrameHeader_t *header = &frame->data.header;

  if ((header->macSrcAddr & NWK_ROUTE_TRANSIT_MASK) &&
     976:	09 85       	ldd	r16, Y+9	; 0x09
     978:	1a 85       	ldd	r17, Y+10	; 0x0a
     97a:	17 ff       	sbrs	r17, 7
     97c:	05 c0       	rjmp	.+10     	; 0x988 <nwkRouteFrameReceived+0x20>
     97e:	8d 85       	ldd	r24, Y+13	; 0x0d
     980:	9e 85       	ldd	r25, Y+14	; 0x0e
     982:	08 17       	cp	r16, r24
     984:	19 07       	cpc	r17, r25
     986:	51 f5       	brne	.+84     	; 0x9dc <nwkRouteFrameReceived+0x74>
      (header->macSrcAddr != header->nwkSrcAddr))
    return;

  if (0xffff == header->macDstPanId)
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	9e 81       	ldd	r25, Y+6	; 0x06
     98c:	2f ef       	ldi	r18, 0xFF	; 255
     98e:	8f 3f       	cpi	r24, 0xFF	; 255
     990:	92 07       	cpc	r25, r18
     992:	21 f1       	breq	.+72     	; 0x9dc <nwkRouteFrameReceived+0x74>
    return;

  rec = nwkRouteFindRecord(header->nwkSrcAddr);
     994:	ed 84       	ldd	r14, Y+13	; 0x0d
     996:	fe 84       	ldd	r15, Y+14	; 0x0e
     998:	c7 01       	movw	r24, r14
     99a:	0e 94 77 04 	call	0x8ee	; 0x8ee <nwkRouteFindRecord>
     99e:	fc 01       	movw	r30, r24
  if (rec)
     9a0:	00 97       	sbiw	r24, 0x00	; 0
     9a2:	69 f0       	breq	.+26     	; 0x9be <nwkRouteFrameReceived+0x56>
  {
    if (rec->nextHop != header->macSrcAddr && frame->rx.lqi > rec->lqi)
     9a4:	82 81       	ldd	r24, Z+2	; 0x02
     9a6:	93 81       	ldd	r25, Z+3	; 0x03
     9a8:	80 17       	cp	r24, r16
     9aa:	91 07       	cpc	r25, r17
     9ac:	99 f0       	breq	.+38     	; 0x9d4 <nwkRouteFrameReceived+0x6c>
     9ae:	de 01       	movw	r26, r28
     9b0:	a1 58       	subi	r26, 0x81	; 129
     9b2:	bf 4f       	sbci	r27, 0xFF	; 255
     9b4:	9c 91       	ld	r25, X
     9b6:	85 81       	ldd	r24, Z+5	; 0x05
     9b8:	89 17       	cp	r24, r25
     9ba:	60 f4       	brcc	.+24     	; 0x9d4 <nwkRouteFrameReceived+0x6c>
     9bc:	07 c0       	rjmp	.+14     	; 0x9cc <nwkRouteFrameReceived+0x64>
      rec->score = NWK_ROUTE_DEFAULT_SCORE;
    }
  }
  else
  {
    rec = nwkRouteFindRecord(NWK_ROUTE_UNKNOWN);
     9be:	8f ef       	ldi	r24, 0xFF	; 255
     9c0:	9f ef       	ldi	r25, 0xFF	; 255
     9c2:	0e 94 77 04 	call	0x8ee	; 0x8ee <nwkRouteFindRecord>
     9c6:	fc 01       	movw	r30, r24

    rec->dst = header->nwkSrcAddr;
     9c8:	f1 82       	std	Z+1, r15	; 0x01
     9ca:	e0 82       	st	Z, r14
    rec->nextHop = header->macSrcAddr;
     9cc:	13 83       	std	Z+3, r17	; 0x03
     9ce:	02 83       	std	Z+2, r16	; 0x02
    rec->score = NWK_ROUTE_DEFAULT_SCORE;
     9d0:	83 e0       	ldi	r24, 0x03	; 3
     9d2:	84 83       	std	Z+4, r24	; 0x04
  }

  rec->lqi = frame->rx.lqi;
     9d4:	c1 58       	subi	r28, 0x81	; 129
     9d6:	df 4f       	sbci	r29, 0xFF	; 255
     9d8:	88 81       	ld	r24, Y
     9da:	85 83       	std	Z+5, r24	; 0x05
}
     9dc:	df 91       	pop	r29
     9de:	cf 91       	pop	r28
     9e0:	1f 91       	pop	r17
     9e2:	0f 91       	pop	r16
     9e4:	ff 90       	pop	r15
     9e6:	ef 90       	pop	r14
     9e8:	08 95       	ret

000009ea <nwkRouteFrameSent>:

/*****************************************************************************
*****************************************************************************/
void nwkRouteFrameSent(NwkFrame_t *frame)
{
     9ea:	0f 93       	push	r16
     9ec:	1f 93       	push	r17
     9ee:	cf 93       	push	r28
     9f0:	df 93       	push	r29
     9f2:	00 d0       	rcall	.+0      	; 0x9f4 <nwkRouteFrameSent+0xa>
     9f4:	00 d0       	rcall	.+0      	; 0x9f6 <nwkRouteFrameSent+0xc>
     9f6:	00 d0       	rcall	.+0      	; 0x9f8 <nwkRouteFrameSent+0xe>
     9f8:	cd b7       	in	r28, 0x3d	; 61
     9fa:	de b7       	in	r29, 0x3e	; 62
     9fc:	8c 01       	movw	r16, r24
  NwkRouteTableRecord_t *rec;

  rec = nwkRouteFindRecord(frame->data.header.nwkDstAddr);
     9fe:	dc 01       	movw	r26, r24
     a00:	1f 96       	adiw	r26, 0x0f	; 15
     a02:	8d 91       	ld	r24, X+
     a04:	9c 91       	ld	r25, X
     a06:	50 97       	sbiw	r26, 0x10	; 16
     a08:	0e 94 77 04 	call	0x8ee	; 0x8ee <nwkRouteFindRecord>
     a0c:	fc 01       	movw	r30, r24
  if (NULL == rec)
     a0e:	00 97       	sbiw	r24, 0x00	; 0
     a10:	d1 f1       	breq	.+116    	; 0xa86 <nwkRouteFrameSent+0x9c>
    return;

  if (NWK_SUCCESS_STATUS == frame->tx.status)
     a12:	d8 01       	movw	r26, r16
     a14:	a1 58       	subi	r26, 0x81	; 129
     a16:	bf 4f       	sbci	r27, 0xFF	; 255
     a18:	8c 91       	ld	r24, X
     a1a:	88 23       	and	r24, r24
     a1c:	19 f4       	brne	.+6      	; 0xa24 <nwkRouteFrameSent+0x3a>
  {
    rec->score = NWK_ROUTE_DEFAULT_SCORE;
     a1e:	83 e0       	ldi	r24, 0x03	; 3
     a20:	84 83       	std	Z+4, r24	; 0x04
     a22:	0a c0       	rjmp	.+20     	; 0xa38 <nwkRouteFrameSent+0x4e>
  }
  else
  {
    rec->score--;
     a24:	84 81       	ldd	r24, Z+4	; 0x04
     a26:	81 50       	subi	r24, 0x01	; 1
     a28:	84 83       	std	Z+4, r24	; 0x04
    if (0 == rec->score)
     a2a:	88 23       	and	r24, r24
     a2c:	29 f4       	brne	.+10     	; 0xa38 <nwkRouteFrameSent+0x4e>
    {
      rec->dst = NWK_ROUTE_UNKNOWN;
     a2e:	8f ef       	ldi	r24, 0xFF	; 255
     a30:	9f ef       	ldi	r25, 0xFF	; 255
     a32:	91 83       	std	Z+1, r25	; 0x01
     a34:	80 83       	st	Z, r24
      return;
     a36:	27 c0       	rjmp	.+78     	; 0xa86 <nwkRouteFrameSent+0x9c>
    }
  }

  if ((rec - &nwkRouteTable[0]) > 0)
     a38:	cf 01       	movw	r24, r30
     a3a:	8c 51       	subi	r24, 0x1C	; 28
     a3c:	94 40       	sbci	r25, 0x04	; 4
     a3e:	86 30       	cpi	r24, 0x06	; 6
     a40:	91 05       	cpc	r25, r1
     a42:	0c f1       	brlt	.+66     	; 0xa86 <nwkRouteFrameSent+0x9c>
  {
    NwkRouteTableRecord_t *prev = rec - 1;
    NwkRouteTableRecord_t tmp;

    tmp = *prev;
     a44:	ce 01       	movw	r24, r28
     a46:	01 96       	adiw	r24, 0x01	; 1
     a48:	af 01       	movw	r20, r30
     a4a:	46 50       	subi	r20, 0x06	; 6
     a4c:	50 40       	sbci	r21, 0x00	; 0
     a4e:	26 e0       	ldi	r18, 0x06	; 6
     a50:	da 01       	movw	r26, r20
     a52:	0d 90       	ld	r0, X+
     a54:	ad 01       	movw	r20, r26
     a56:	dc 01       	movw	r26, r24
     a58:	0d 92       	st	X+, r0
     a5a:	cd 01       	movw	r24, r26
     a5c:	21 50       	subi	r18, 0x01	; 1
     a5e:	c1 f7       	brne	.-16     	; 0xa50 <nwkRouteFrameSent+0x66>
    *prev = *rec;
     a60:	cf 01       	movw	r24, r30
     a62:	06 97       	sbiw	r24, 0x06	; 6
     a64:	af 01       	movw	r20, r30
     a66:	26 e0       	ldi	r18, 0x06	; 6
     a68:	da 01       	movw	r26, r20
     a6a:	0d 90       	ld	r0, X+
     a6c:	ad 01       	movw	r20, r26
     a6e:	dc 01       	movw	r26, r24
     a70:	0d 92       	st	X+, r0
     a72:	cd 01       	movw	r24, r26
     a74:	21 50       	subi	r18, 0x01	; 1
     a76:	c1 f7       	brne	.-16     	; 0xa68 <nwkRouteFrameSent+0x7e>
    *rec = tmp;
     a78:	de 01       	movw	r26, r28
     a7a:	11 96       	adiw	r26, 0x01	; 1
     a7c:	86 e0       	ldi	r24, 0x06	; 6
     a7e:	0d 90       	ld	r0, X+
     a80:	01 92       	st	Z+, r0
     a82:	81 50       	subi	r24, 0x01	; 1
     a84:	e1 f7       	brne	.-8      	; 0xa7e <nwkRouteFrameSent+0x94>
  }
}
     a86:	26 96       	adiw	r28, 0x06	; 6
     a88:	0f b6       	in	r0, 0x3f	; 63
     a8a:	f8 94       	cli
     a8c:	de bf       	out	0x3e, r29	; 62
     a8e:	0f be       	out	0x3f, r0	; 63
     a90:	cd bf       	out	0x3d, r28	; 61
     a92:	df 91       	pop	r29
     a94:	cf 91       	pop	r28
     a96:	1f 91       	pop	r17
     a98:	0f 91       	pop	r16
     a9a:	08 95       	ret

00000a9c <nwkRouteNextHop>:

/*****************************************************************************
*****************************************************************************/
uint16_t nwkRouteNextHop(uint16_t dst)
{
  if (0xffff == dst)
     a9c:	2f ef       	ldi	r18, 0xFF	; 255
     a9e:	8f 3f       	cpi	r24, 0xFF	; 255
     aa0:	92 07       	cpc	r25, r18
     aa2:	f1 f0       	breq	.+60     	; 0xae0 <nwkRouteNextHop+0x44>
     aa4:	ec e1       	ldi	r30, 0x1C	; 28
     aa6:	f4 e0       	ldi	r31, 0x04	; 4
     aa8:	40 e0       	ldi	r20, 0x00	; 0
     aaa:	50 e0       	ldi	r21, 0x00	; 0
    return NWK_ROUTE_UNKNOWN;

  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
    if (nwkRouteTable[i].dst == dst)
     aac:	20 81       	ld	r18, Z
     aae:	31 81       	ldd	r19, Z+1	; 0x01
     ab0:	28 17       	cp	r18, r24
     ab2:	39 07       	cpc	r19, r25
     ab4:	61 f4       	brne	.+24     	; 0xace <nwkRouteNextHop+0x32>
      return nwkRouteTable[i].nextHop;
     ab6:	fa 01       	movw	r30, r20
     ab8:	ee 0f       	add	r30, r30
     aba:	ff 1f       	adc	r31, r31
     abc:	e4 0f       	add	r30, r20
     abe:	f5 1f       	adc	r31, r21
     ac0:	ee 0f       	add	r30, r30
     ac2:	ff 1f       	adc	r31, r31
     ac4:	e4 5e       	subi	r30, 0xE4	; 228
     ac6:	fb 4f       	sbci	r31, 0xFB	; 251
     ac8:	82 81       	ldd	r24, Z+2	; 0x02
     aca:	93 81       	ldd	r25, Z+3	; 0x03
     acc:	08 95       	ret
     ace:	4f 5f       	subi	r20, 0xFF	; 255
     ad0:	5f 4f       	sbci	r21, 0xFF	; 255
     ad2:	36 96       	adiw	r30, 0x06	; 6
uint16_t nwkRouteNextHop(uint16_t dst)
{
  if (0xffff == dst)
    return NWK_ROUTE_UNKNOWN;

  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
     ad4:	44 36       	cpi	r20, 0x64	; 100
     ad6:	51 05       	cpc	r21, r1
     ad8:	49 f7       	brne	.-46     	; 0xaac <nwkRouteNextHop+0x10>
    if (nwkRouteTable[i].dst == dst)
      return nwkRouteTable[i].nextHop;

  return NWK_ROUTE_UNKNOWN;
     ada:	8f ef       	ldi	r24, 0xFF	; 255
     adc:	9f ef       	ldi	r25, 0xFF	; 255
     ade:	08 95       	ret
/*****************************************************************************
*****************************************************************************/
uint16_t nwkRouteNextHop(uint16_t dst)
{
  if (0xffff == dst)
    return NWK_ROUTE_UNKNOWN;
     ae0:	8f ef       	ldi	r24, 0xFF	; 255
     ae2:	9f ef       	ldi	r25, 0xFF	; 255
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
    if (nwkRouteTable[i].dst == dst)
      return nwkRouteTable[i].nextHop;

  return NWK_ROUTE_UNKNOWN;
}
     ae4:	08 95       	ret

00000ae6 <nwkRouteFrame>:

/*****************************************************************************
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
     ae6:	cf 92       	push	r12
     ae8:	df 92       	push	r13
     aea:	ef 92       	push	r14
     aec:	ff 92       	push	r15
     aee:	0f 93       	push	r16
     af0:	1f 93       	push	r17
     af2:	cf 93       	push	r28
     af4:	df 93       	push	r29
     af6:	8c 01       	movw	r16, r24
  if (NWK_ROUTE_UNKNOWN != nwkRouteNextHop(frame->data.header.nwkDstAddr))
     af8:	fc 01       	movw	r30, r24
     afa:	c7 84       	ldd	r12, Z+15	; 0x0f
     afc:	d0 88       	ldd	r13, Z+16	; 0x10
     afe:	c6 01       	movw	r24, r12
     b00:	0e 94 4e 05 	call	0xa9c	; 0xa9c <nwkRouteNextHop>
     b04:	ff ef       	ldi	r31, 0xFF	; 255
     b06:	8f 3f       	cpi	r24, 0xFF	; 255
     b08:	9f 07       	cpc	r25, r31
     b0a:	81 f0       	breq	.+32     	; 0xb2c <nwkRouteFrame+0x46>
  {
    frame->tx.confirm = nwkRouteTxFrameConf;
     b0c:	f8 01       	movw	r30, r16
     b0e:	ed 57       	subi	r30, 0x7D	; 125
     b10:	ff 4f       	sbci	r31, 0xFF	; 255
     b12:	8b e9       	ldi	r24, 0x9B	; 155
     b14:	94 e0       	ldi	r25, 0x04	; 4
     b16:	91 83       	std	Z+1, r25	; 0x01
     b18:	80 83       	st	Z, r24
    frame->tx.control = NWK_TX_CONTROL_ROUTING;
     b1a:	f8 01       	movw	r30, r16
     b1c:	ee 57       	subi	r30, 0x7E	; 126
     b1e:	ff 4f       	sbci	r31, 0xFF	; 255
     b20:	82 e0       	ldi	r24, 0x02	; 2
     b22:	80 83       	st	Z, r24
    nwkTxFrame(frame);
     b24:	c8 01       	movw	r24, r16
     b26:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <nwkTxFrame>
     b2a:	20 c0       	rjmp	.+64     	; 0xb6c <nwkRouteFrame+0x86>
  }
  else
  {
    nwkRouteSendRouteError(frame->data.header.nwkSrcAddr, frame->data.header.nwkDstAddr);
     b2c:	f8 01       	movw	r30, r16
     b2e:	e5 84       	ldd	r14, Z+13	; 0x0d
     b30:	f6 84       	ldd	r15, Z+14	; 0x0e
static void nwkRouteSendRouteError(uint16_t src, uint16_t dst)
{
  NwkFrame_t *frame;
  NwkRouteErrorCommand_t *command;

  if (NULL == (frame = nwkFrameAlloc(sizeof(NwkRouteErrorCommand_t))))
     b32:	85 e0       	ldi	r24, 0x05	; 5
     b34:	0e 94 1b 04 	call	0x836	; 0x836 <nwkFrameAlloc>
     b38:	ec 01       	movw	r28, r24
     b3a:	00 97       	sbiw	r24, 0x00	; 0
     b3c:	a1 f0       	breq	.+40     	; 0xb66 <nwkRouteFrame+0x80>
    return;

  nwkFrameCommandInit(frame);
     b3e:	0e 94 52 04 	call	0x8a4	; 0x8a4 <nwkFrameCommandInit>

  frame->tx.confirm = nwkRouteErrorConf;
     b42:	fe 01       	movw	r30, r28
     b44:	ed 57       	subi	r30, 0x7D	; 125
     b46:	ff 4f       	sbci	r31, 0xFF	; 255
     b48:	88 e9       	ldi	r24, 0x98	; 152
     b4a:	94 e0       	ldi	r25, 0x04	; 4
     b4c:	91 83       	std	Z+1, r25	; 0x01
     b4e:	80 83       	st	Z, r24

  frame->data.header.nwkDstAddr = src;
     b50:	f8 8a       	std	Y+16, r15	; 0x10
     b52:	ef 86       	std	Y+15, r14	; 0x0f

  command = (NwkRouteErrorCommand_t *)frame->data.payload;

  command->id = NWK_COMMAND_ROUTE_ERROR;
     b54:	81 e0       	ldi	r24, 0x01	; 1
     b56:	8a 8b       	std	Y+18, r24	; 0x12
  command->srcAddr = src;
     b58:	fc 8a       	std	Y+20, r15	; 0x14
     b5a:	eb 8a       	std	Y+19, r14	; 0x13
  command->dstAddr = dst;
     b5c:	de 8a       	std	Y+22, r13	; 0x16
     b5e:	cd 8a       	std	Y+21, r12	; 0x15

  nwkTxFrame(frame);
     b60:	ce 01       	movw	r24, r28
     b62:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <nwkTxFrame>
    nwkTxFrame(frame);
  }
  else
  {
    nwkRouteSendRouteError(frame->data.header.nwkSrcAddr, frame->data.header.nwkDstAddr);
    nwkFrameFree(frame);
     b66:	c8 01       	movw	r24, r16
     b68:	0e 94 41 04 	call	0x882	; 0x882 <nwkFrameFree>
  }
}
     b6c:	df 91       	pop	r29
     b6e:	cf 91       	pop	r28
     b70:	1f 91       	pop	r17
     b72:	0f 91       	pop	r16
     b74:	ff 90       	pop	r15
     b76:	ef 90       	pop	r14
     b78:	df 90       	pop	r13
     b7a:	cf 90       	pop	r12
     b7c:	08 95       	ret

00000b7e <nwkRouteErrorReceived>:
*****************************************************************************/
void nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkRouteErrorCommand_t *command = (NwkRouteErrorCommand_t *)ind->data;

  nwkRouteRemove(command->dstAddr);
     b7e:	dc 01       	movw	r26, r24
     b80:	15 96       	adiw	r26, 0x05	; 5
     b82:	ed 91       	ld	r30, X+
     b84:	fc 91       	ld	r31, X
     b86:	16 97       	sbiw	r26, 0x06	; 6
     b88:	83 81       	ldd	r24, Z+3	; 0x03
     b8a:	94 81       	ldd	r25, Z+4	; 0x04
     b8c:	0e 94 aa 04 	call	0x954	; 0x954 <nwkRouteRemove>
}
     b90:	08 95       	ret

00000b92 <NWK_RouteNextHop>:

/*****************************************************************************
*****************************************************************************/
uint16_t NWK_RouteNextHop(uint16_t dst)
{
  return nwkRouteNextHop(dst);
     b92:	0e 94 4e 05 	call	0xa9c	; 0xa9c <nwkRouteNextHop>
}
     b96:	08 95       	ret

00000b98 <nwkRxSendAckConf>:

/*****************************************************************************
*****************************************************************************/
static void nwkRxSendAckConf(NwkFrame_t *frame)
{
  nwkFrameFree(frame);
     b98:	0e 94 41 04 	call	0x882	; 0x882 <nwkFrameFree>
}
     b9c:	08 95       	ret

00000b9e <nwkRxDuplicateRejectionTimerHandler>:
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    if (nwkRxDuplicateRejectionTable[i].ttl)
    {
      nwkRxDuplicateRejectionTable[i].ttl--;
      restart = true;
     b9e:	e8 e7       	ldi	r30, 0x78	; 120
     ba0:	f6 e0       	ldi	r31, 0x06	; 6
#endif

/*****************************************************************************
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
     ba2:	4a e0       	ldi	r20, 0x0A	; 10
  bool restart = false;
     ba4:	50 e0       	ldi	r21, 0x00	; 0

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    if (nwkRxDuplicateRejectionTable[i].ttl)
     ba6:	20 81       	ld	r18, Z
     ba8:	31 81       	ldd	r19, Z+1	; 0x01
     baa:	21 15       	cp	r18, r1
     bac:	31 05       	cpc	r19, r1
     bae:	29 f0       	breq	.+10     	; 0xbba <nwkRxDuplicateRejectionTimerHandler+0x1c>
    {
      nwkRxDuplicateRejectionTable[i].ttl--;
     bb0:	21 50       	subi	r18, 0x01	; 1
     bb2:	30 40       	sbci	r19, 0x00	; 0
     bb4:	31 83       	std	Z+1, r19	; 0x01
     bb6:	20 83       	st	Z, r18
      restart = true;
     bb8:	51 e0       	ldi	r21, 0x01	; 1

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    if (nwkRxDuplicateRejectionTable[i].ttl)
    {
      nwkRxDuplicateRejectionTable[i].ttl--;
     bba:	41 50       	subi	r20, 0x01	; 1
     bbc:	35 96       	adiw	r30, 0x05	; 5
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
  bool restart = false;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
     bbe:	44 23       	and	r20, r20
     bc0:	91 f7       	brne	.-28     	; 0xba6 <nwkRxDuplicateRejectionTimerHandler+0x8>
      nwkRxDuplicateRejectionTable[i].ttl--;
      restart = true;
    }
  }

  if (restart)
     bc2:	55 23       	and	r21, r21
     bc4:	11 f0       	breq	.+4      	; 0xbca <nwkRxDuplicateRejectionTimerHandler+0x2c>
    SYS_TimerStart(timer);
     bc6:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <SYS_TimerStart>
     bca:	08 95       	ret

00000bcc <nwkRxSeriveDataInd>:

/*****************************************************************************
*****************************************************************************/
static bool nwkRxSeriveDataInd(NWK_DataInd_t *ind)
{
  uint8_t cmd = ind->data[0];
     bcc:	dc 01       	movw	r26, r24
     bce:	15 96       	adiw	r26, 0x05	; 5
     bd0:	ed 91       	ld	r30, X+
     bd2:	fc 91       	ld	r31, X
     bd4:	16 97       	sbiw	r26, 0x06	; 6
     bd6:	20 81       	ld	r18, Z

  if (NWK_COMMAND_ACK == cmd)
     bd8:	22 23       	and	r18, r18
     bda:	19 f4       	brne	.+6      	; 0xbe2 <nwkRxSeriveDataInd+0x16>
    nwkTxAckReceived(ind);
     bdc:	0e 94 01 09 	call	0x1202	; 0x1202 <nwkTxAckReceived>
     be0:	04 c0       	rjmp	.+8      	; 0xbea <nwkRxSeriveDataInd+0x1e>
#ifdef NWK_ENABLE_ROUTING
  else if (NWK_COMMAND_ROUTE_ERROR == cmd)
     be2:	21 30       	cpi	r18, 0x01	; 1
     be4:	21 f4       	brne	.+8      	; 0xbee <nwkRxSeriveDataInd+0x22>
    nwkRouteErrorReceived(ind);
     be6:	0e 94 bf 05 	call	0xb7e	; 0xb7e <nwkRouteErrorReceived>
#endif
  else
    return false;

  return true;
     bea:	81 e0       	ldi	r24, 0x01	; 1
     bec:	08 95       	ret
#ifdef NWK_ENABLE_ROUTING
  else if (NWK_COMMAND_ROUTE_ERROR == cmd)
    nwkRouteErrorReceived(ind);
#endif
  else
    return false;
     bee:	80 e0       	ldi	r24, 0x00	; 0

  return true;
}
     bf0:	08 95       	ret

00000bf2 <nwkRxInit>:
}

/*****************************************************************************
*****************************************************************************/
void nwkRxInit(void)
{
     bf2:	e8 e7       	ldi	r30, 0x78	; 120
     bf4:	f6 e0       	ldi	r31, 0x06	; 6
     bf6:	8a e0       	ldi	r24, 0x0A	; 10
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    nwkRxDuplicateRejectionTable[i].ttl = 0;
     bf8:	11 82       	std	Z+1, r1	; 0x01
     bfa:	10 82       	st	Z, r1
     bfc:	81 50       	subi	r24, 0x01	; 1
     bfe:	35 96       	adiw	r30, 0x05	; 5

/*****************************************************************************
*****************************************************************************/
void nwkRxInit(void)
{
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
     c00:	88 23       	and	r24, r24
     c02:	d1 f7       	brne	.-12     	; 0xbf8 <nwkRxInit+0x6>
    nwkRxDuplicateRejectionTable[i].ttl = 0;

  nwkRxActiveFrames = 0;
     c04:	10 92 a7 06 	sts	0x06A7, r1

  nwkRxDuplicateRejectionTimer.interval = NWK_RX_DUPLICATE_REJECTION_TIMER_INTERVAL;
     c08:	84 e1       	ldi	r24, 0x14	; 20
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	a0 e0       	ldi	r26, 0x00	; 0
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	80 93 ae 06 	sts	0x06AE, r24
     c14:	90 93 af 06 	sts	0x06AF, r25
     c18:	a0 93 b0 06 	sts	0x06B0, r26
     c1c:	b0 93 b1 06 	sts	0x06B1, r27
  nwkRxDuplicateRejectionTimer.mode = SYS_TIMER_INTERVAL_MODE;
     c20:	10 92 b2 06 	sts	0x06B2, r1
  nwkRxDuplicateRejectionTimer.handler = nwkRxDuplicateRejectionTimerHandler;
     c24:	8f ec       	ldi	r24, 0xCF	; 207
     c26:	95 e0       	ldi	r25, 0x05	; 5
     c28:	90 93 b4 06 	sts	0x06B4, r25
     c2c:	80 93 b3 06 	sts	0x06B3, r24

  NWK_OpenEndpoint(NWK_SERVICE_ENDPOINT_ID, nwkRxSeriveDataInd);
     c30:	80 e0       	ldi	r24, 0x00	; 0
     c32:	66 ee       	ldi	r22, 0xE6	; 230
     c34:	75 e0       	ldi	r23, 0x05	; 5
     c36:	0e 94 19 03 	call	0x632	; 0x632 <NWK_OpenEndpoint>
}
     c3a:	08 95       	ret

00000c3c <PHY_DataInd>:

/*****************************************************************************
*****************************************************************************/
void PHY_DataInd(PHY_DataInd_t *ind)
{
     c3c:	cf 93       	push	r28
     c3e:	df 93       	push	r29
     c40:	ec 01       	movw	r28, r24
  NwkFrame_t *frame;

  if (0x88 != ind->data[1] || (0x61 != ind->data[0] && 0x41 != ind->data[0]) ||
     c42:	e8 81       	ld	r30, Y
     c44:	f9 81       	ldd	r31, Y+1	; 0x01
     c46:	81 81       	ldd	r24, Z+1	; 0x01
     c48:	88 38       	cpi	r24, 0x88	; 136
     c4a:	29 f5       	brne	.+74     	; 0xc96 <PHY_DataInd+0x5a>
     c4c:	80 81       	ld	r24, Z
     c4e:	81 36       	cpi	r24, 0x61	; 97
     c50:	11 f0       	breq	.+4      	; 0xc56 <PHY_DataInd+0x1a>
     c52:	81 34       	cpi	r24, 0x41	; 65
     c54:	01 f5       	brne	.+64     	; 0xc96 <PHY_DataInd+0x5a>
      ind->size < sizeof(NwkFrameHeader_t))
     c56:	8a 81       	ldd	r24, Y+2	; 0x02
*****************************************************************************/
void PHY_DataInd(PHY_DataInd_t *ind)
{
  NwkFrame_t *frame;

  if (0x88 != ind->data[1] || (0x61 != ind->data[0] && 0x41 != ind->data[0]) ||
     c58:	80 31       	cpi	r24, 0x10	; 16
     c5a:	e8 f0       	brcs	.+58     	; 0xc96 <PHY_DataInd+0x5a>
      ind->size < sizeof(NwkFrameHeader_t))
    return;

  if (NULL == (frame = nwkFrameAlloc(ind->size - sizeof(NwkFrameHeader_t))))
     c5c:	80 51       	subi	r24, 0x10	; 16
     c5e:	0e 94 1b 04 	call	0x836	; 0x836 <nwkFrameAlloc>
     c62:	00 97       	sbiw	r24, 0x00	; 0
     c64:	c1 f0       	breq	.+48     	; 0xc96 <PHY_DataInd+0x5a>
    return;

  frame->state = NWK_RX_STATE_RECEIVED;
     c66:	20 e2       	ldi	r18, 0x20	; 32
     c68:	fc 01       	movw	r30, r24
     c6a:	20 83       	st	Z, r18
  frame->rx.lqi = ind->lqi;
     c6c:	2b 81       	ldd	r18, Y+3	; 0x03
     c6e:	e1 58       	subi	r30, 0x81	; 129
     c70:	ff 4f       	sbci	r31, 0xFF	; 255
     c72:	20 83       	st	Z, r18
  frame->rx.rssi = ind->rssi;
     c74:	2c 81       	ldd	r18, Y+4	; 0x04
     c76:	fc 01       	movw	r30, r24
     c78:	e0 58       	subi	r30, 0x80	; 128
     c7a:	ff 4f       	sbci	r31, 0xFF	; 255
     c7c:	20 83       	st	Z, r18

  memcpy((uint8_t *)&frame->data, ind->data, ind->size);
     c7e:	02 96       	adiw	r24, 0x02	; 2
     c80:	4a 81       	ldd	r20, Y+2	; 0x02
     c82:	68 81       	ld	r22, Y
     c84:	79 81       	ldd	r23, Y+1	; 0x01
     c86:	50 e0       	ldi	r21, 0x00	; 0
     c88:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <memcpy>

  ++nwkRxActiveFrames;
     c8c:	80 91 a7 06 	lds	r24, 0x06A7
     c90:	8f 5f       	subi	r24, 0xFF	; 255
     c92:	80 93 a7 06 	sts	0x06A7, r24
}
     c96:	df 91       	pop	r29
     c98:	cf 91       	pop	r28
     c9a:	08 95       	ret

00000c9c <nwkRxBusy>:

/*****************************************************************************
*****************************************************************************/
bool nwkRxBusy(void)
{
  return nwkRxActiveFrames > 0;
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	90 91 a7 06 	lds	r25, 0x06A7
     ca2:	99 23       	and	r25, r25
     ca4:	09 f4       	brne	.+2      	; 0xca8 <nwkRxBusy+0xc>
     ca6:	80 e0       	ldi	r24, 0x00	; 0
}
     ca8:	08 95       	ret

00000caa <nwkRxTaskHandler>:
}

/*****************************************************************************
*****************************************************************************/
void nwkRxTaskHandler(void)
{
     caa:	8f 92       	push	r8
     cac:	9f 92       	push	r9
     cae:	af 92       	push	r10
     cb0:	bf 92       	push	r11
     cb2:	cf 92       	push	r12
     cb4:	df 92       	push	r13
     cb6:	ef 92       	push	r14
     cb8:	ff 92       	push	r15
     cba:	0f 93       	push	r16
     cbc:	1f 93       	push	r17
     cbe:	cf 93       	push	r28
     cc0:	df 93       	push	r29
     cc2:	cd b7       	in	r28, 0x3d	; 61
     cc4:	de b7       	in	r29, 0x3e	; 62
     cc6:	2a 97       	sbiw	r28, 0x0a	; 10
     cc8:	0f b6       	in	r0, 0x3f	; 63
     cca:	f8 94       	cli
     ccc:	de bf       	out	0x3e, r29	; 62
     cce:	0f be       	out	0x3f, r0	; 63
     cd0:	cd bf       	out	0x3d, r28	; 61
  if (0 == nwkRxActiveFrames)
     cd2:	80 91 a7 06 	lds	r24, 0x06A7
     cd6:	88 23       	and	r24, r24
     cd8:	09 f4       	brne	.+2      	; 0xcdc <nwkRxTaskHandler+0x32>
     cda:	ad c1       	rjmp	.+858    	; 0x1036 <nwkRxTaskHandler+0x38c>
     cdc:	dd 24       	eor	r13, r13
        forceAck = (0xffff == header->macDstAddr && nwkIb.addr == header->nwkDstAddr);

        if ((header->nwkFcf.ackRequest && ack) || forceAck)
          nwkRxSendAck(frame);

        frame->state = NWK_RX_STATE_FINISH;
     cde:	44 e2       	ldi	r20, 0x24	; 36
     ce0:	c4 2e       	mov	r12, r20
  if (NULL == (ack = nwkFrameAlloc(sizeof(NwkAckCommand_t))))
    return;

  nwkFrameCommandInit(ack);

  ack->tx.confirm = nwkRxSendAckConf;
     ce2:	5c ec       	ldi	r21, 0xCC	; 204
     ce4:	85 2e       	mov	r8, r21
     ce6:	55 e0       	ldi	r21, 0x05	; 5
     ce8:	95 2e       	mov	r9, r21
#ifdef NWK_ENABLE_SECURITY
    if (header->nwkFcf.securityEnabled)
      frame->state = NWK_RX_STATE_DECRYPT;
    else
#endif
      frame->state = NWK_RX_STATE_INDICATE;
     cea:	62 e2       	ldi	r22, 0x22	; 34
     cec:	b6 2e       	mov	r11, r22
  }
#ifdef NWK_ENABLE_ROUTING
  else if (nwkIb.addr == header->macDstAddr && 0xffff != header->macDstPanId)
  {
    frame->state = NWK_RX_STATE_ROUTE;
     cee:	73 e2       	ldi	r23, 0x23	; 35
     cf0:	a7 2e       	mov	r10, r23
  if (0 == nwkRxActiveFrames)
    return;

  for (int i = 0; i < NWK_BUFFERS_AMOUNT; i++)
  {
    NwkFrame_t *frame = nwkFrameByIndex(i);
     cf2:	8d 2d       	mov	r24, r13
     cf4:	0e 94 44 04 	call	0x888	; 0x888 <nwkFrameByIndex>
     cf8:	7c 01       	movw	r14, r24

    switch (frame->state)
     cfa:	dc 01       	movw	r26, r24
     cfc:	8c 91       	ld	r24, X
     cfe:	82 32       	cpi	r24, 0x22	; 34
     d00:	09 f4       	brne	.+2      	; 0xd04 <nwkRxTaskHandler+0x5a>
     d02:	d9 c0       	rjmp	.+434    	; 0xeb6 <nwkRxTaskHandler+0x20c>
     d04:	83 32       	cpi	r24, 0x23	; 35
     d06:	20 f4       	brcc	.+8      	; 0xd10 <nwkRxTaskHandler+0x66>
     d08:	80 32       	cpi	r24, 0x20	; 32
     d0a:	09 f0       	breq	.+2      	; 0xd0e <nwkRxTaskHandler+0x64>
     d0c:	8f c1       	rjmp	.+798    	; 0x102c <nwkRxTaskHandler+0x382>
     d0e:	07 c0       	rjmp	.+14     	; 0xd1e <nwkRxTaskHandler+0x74>
     d10:	83 32       	cpi	r24, 0x23	; 35
     d12:	09 f4       	brne	.+2      	; 0xd16 <nwkRxTaskHandler+0x6c>
     d14:	7f c1       	rjmp	.+766    	; 0x1014 <nwkRxTaskHandler+0x36a>
     d16:	84 32       	cpi	r24, 0x24	; 36
     d18:	09 f0       	breq	.+2      	; 0xd1c <nwkRxTaskHandler+0x72>
     d1a:	88 c1       	rjmp	.+784    	; 0x102c <nwkRxTaskHandler+0x382>
     d1c:	7f c1       	rjmp	.+766    	; 0x101c <nwkRxTaskHandler+0x372>
*****************************************************************************/
static void nwkRxHandleReceivedFrame(NwkFrame_t *frame)
{
  NwkFrameHeader_t *header = &frame->data.header;

  frame->state = NWK_RX_STATE_FINISH;
     d1e:	f7 01       	movw	r30, r14
     d20:	c0 82       	st	Z, r12

  if ((0xffff == header->nwkDstAddr && header->nwkFcf.ackRequest) ||
     d22:	87 85       	ldd	r24, Z+15	; 0x0f
     d24:	90 89       	ldd	r25, Z+16	; 0x10
     d26:	ff ef       	ldi	r31, 0xFF	; 255
     d28:	8f 3f       	cpi	r24, 0xFF	; 255
     d2a:	9f 07       	cpc	r25, r31
     d2c:	31 f4       	brne	.+12     	; 0xd3a <nwkRxTaskHandler+0x90>
     d2e:	d7 01       	movw	r26, r14
     d30:	1b 96       	adiw	r26, 0x0b	; 11
     d32:	8c 91       	ld	r24, X
     d34:	1b 97       	sbiw	r26, 0x0b	; 11
     d36:	80 fd       	sbrc	r24, 0
     d38:	79 c1       	rjmp	.+754    	; 0x102c <nwkRxTaskHandler+0x382>
     d3a:	20 91 b1 07 	lds	r18, 0x07B1
     d3e:	30 91 b2 07 	lds	r19, 0x07B2
     d42:	f7 01       	movw	r30, r14
     d44:	85 85       	ldd	r24, Z+13	; 0x0d
     d46:	96 85       	ldd	r25, Z+14	; 0x0e
     d48:	28 17       	cp	r18, r24
     d4a:	39 07       	cpc	r19, r25
     d4c:	09 f4       	brne	.+2      	; 0xd50 <nwkRxTaskHandler+0xa6>
     d4e:	6e c1       	rjmp	.+732    	; 0x102c <nwkRxTaskHandler+0x382>
      (nwkIb.addr == header->nwkSrcAddr))
    return;

#ifndef NWK_ENABLE_SECURITY
  if (header->nwkFcf.securityEnabled)
     d50:	83 85       	ldd	r24, Z+11	; 0x0b
     d52:	81 fd       	sbrc	r24, 1
     d54:	6b c1       	rjmp	.+726    	; 0x102c <nwkRxTaskHandler+0x382>
    return;
#endif

#ifdef NWK_ENABLE_ROUTING
  nwkRouteFrameReceived(frame);
     d56:	c7 01       	movw	r24, r14
     d58:	0e 94 b4 04 	call	0x968	; 0x968 <nwkRouteFrameReceived>
     d5c:	e5 e7       	ldi	r30, 0x75	; 117
     d5e:	f6 e0       	ldi	r31, 0x06	; 6
     d60:	40 e0       	ldi	r20, 0x00	; 0
     d62:	50 e0       	ldi	r21, 0x00	; 0

/*****************************************************************************
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  int8_t free = -1;
     d64:	6f ef       	ldi	r22, 0xFF	; 255

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    if (nwkRxDuplicateRejectionTable[i].ttl)
     d66:	23 81       	ldd	r18, Z+3	; 0x03
     d68:	34 81       	ldd	r19, Z+4	; 0x04
     d6a:	21 15       	cp	r18, r1
     d6c:	31 05       	cpc	r19, r1
     d6e:	81 f1       	breq	.+96     	; 0xdd0 <nwkRxTaskHandler+0x126>
    {
      if (header->nwkSrcAddr == nwkRxDuplicateRejectionTable[i].src)
     d70:	d7 01       	movw	r26, r14
     d72:	1d 96       	adiw	r26, 0x0d	; 13
     d74:	8d 91       	ld	r24, X+
     d76:	9c 91       	ld	r25, X
     d78:	1e 97       	sbiw	r26, 0x0e	; 14
     d7a:	20 81       	ld	r18, Z
     d7c:	31 81       	ldd	r19, Z+1	; 0x01
     d7e:	82 17       	cp	r24, r18
     d80:	93 07       	cpc	r25, r19
     d82:	39 f5       	brne	.+78     	; 0xdd2 <nwkRxTaskHandler+0x128>
      {
        int8_t diff = (int8_t)header->nwkSeq - nwkRxDuplicateRejectionTable[i].seq;
     d84:	1c 96       	adiw	r26, 0x0c	; 12
     d86:	8c 91       	ld	r24, X
     d88:	fa 01       	movw	r30, r20
     d8a:	ee 0f       	add	r30, r30
     d8c:	ff 1f       	adc	r31, r31
     d8e:	ee 0f       	add	r30, r30
     d90:	ff 1f       	adc	r31, r31
     d92:	e4 0f       	add	r30, r20
     d94:	f5 1f       	adc	r31, r21
     d96:	eb 58       	subi	r30, 0x8B	; 139
     d98:	f9 4f       	sbci	r31, 0xF9	; 249
     d9a:	92 81       	ldd	r25, Z+2	; 0x02
     d9c:	b8 2f       	mov	r27, r24
     d9e:	b9 1b       	sub	r27, r25

        if (diff > 0)
     da0:	1b 16       	cp	r1, r27
     da2:	34 f4       	brge	.+12     	; 0xdb0 <nwkRxTaskHandler+0x106>
        {
          nwkRxDuplicateRejectionTable[i].seq = header->nwkSeq;
     da4:	82 83       	std	Z+2, r24	; 0x02
          nwkRxDuplicateRejectionTable[i].ttl = DUPLICATE_REJECTION_TTL;
     da6:	87 e9       	ldi	r24, 0x97	; 151
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	94 83       	std	Z+4, r25	; 0x04
     dac:	83 83       	std	Z+3, r24	; 0x03
     dae:	39 c0       	rjmp	.+114    	; 0xe22 <nwkRxTaskHandler+0x178>
          return false;
        }
        else
        {
#ifdef NWK_ENABLE_ROUTING
          if (nwkIb.addr == header->macDstAddr)
     db0:	20 91 b1 07 	lds	r18, 0x07B1
     db4:	30 91 b2 07 	lds	r19, 0x07B2
     db8:	f7 01       	movw	r30, r14
     dba:	87 81       	ldd	r24, Z+7	; 0x07
     dbc:	90 85       	ldd	r25, Z+8	; 0x08
     dbe:	28 17       	cp	r18, r24
     dc0:	39 07       	cpc	r19, r25
     dc2:	09 f0       	breq	.+2      	; 0xdc6 <nwkRxTaskHandler+0x11c>
     dc4:	33 c1       	rjmp	.+614    	; 0x102c <nwkRxTaskHandler+0x382>
            nwkRouteRemove(header->nwkDstAddr);
     dc6:	87 85       	ldd	r24, Z+15	; 0x0f
     dc8:	90 89       	ldd	r25, Z+16	; 0x10
     dca:	0e 94 aa 04 	call	0x954	; 0x954 <nwkRouteRemove>
     dce:	2e c1       	rjmp	.+604    	; 0x102c <nwkRxTaskHandler+0x382>
        }
      }
    }
    else // ttl == 0
    {
      free = i;
     dd0:	64 2f       	mov	r22, r20
     dd2:	4f 5f       	subi	r20, 0xFF	; 255
     dd4:	5f 4f       	sbci	r21, 0xFF	; 255
     dd6:	35 96       	adiw	r30, 0x05	; 5
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  int8_t free = -1;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
     dd8:	4a 30       	cpi	r20, 0x0A	; 10
     dda:	51 05       	cpc	r21, r1
     ddc:	21 f6       	brne	.-120    	; 0xd66 <nwkRxTaskHandler+0xbc>
    {
      free = i;
    }
  }

  if (-1 == free)
     dde:	6f 3f       	cpi	r22, 0xFF	; 255
     de0:	09 f4       	brne	.+2      	; 0xde4 <nwkRxTaskHandler+0x13a>
     de2:	24 c1       	rjmp	.+584    	; 0x102c <nwkRxTaskHandler+0x382>
    return true;

  nwkRxDuplicateRejectionTable[free].src = header->nwkSrcAddr;
     de4:	86 2f       	mov	r24, r22
     de6:	99 27       	eor	r25, r25
     de8:	87 fd       	sbrc	r24, 7
     dea:	90 95       	com	r25
     dec:	fc 01       	movw	r30, r24
     dee:	ee 0f       	add	r30, r30
     df0:	ff 1f       	adc	r31, r31
     df2:	ee 0f       	add	r30, r30
     df4:	ff 1f       	adc	r31, r31
     df6:	e8 0f       	add	r30, r24
     df8:	f9 1f       	adc	r31, r25
     dfa:	eb 58       	subi	r30, 0x8B	; 139
     dfc:	f9 4f       	sbci	r31, 0xF9	; 249
     dfe:	d7 01       	movw	r26, r14
     e00:	1d 96       	adiw	r26, 0x0d	; 13
     e02:	8d 91       	ld	r24, X+
     e04:	9c 91       	ld	r25, X
     e06:	1e 97       	sbiw	r26, 0x0e	; 14
     e08:	91 83       	std	Z+1, r25	; 0x01
     e0a:	80 83       	st	Z, r24
  nwkRxDuplicateRejectionTable[free].seq = header->nwkSeq;
     e0c:	1c 96       	adiw	r26, 0x0c	; 12
     e0e:	8c 91       	ld	r24, X
     e10:	82 83       	std	Z+2, r24	; 0x02
  nwkRxDuplicateRejectionTable[free].ttl = DUPLICATE_REJECTION_TTL;
     e12:	87 e9       	ldi	r24, 0x97	; 151
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	94 83       	std	Z+4, r25	; 0x04
     e18:	83 83       	std	Z+3, r24	; 0x03

  SYS_TimerStart(&nwkRxDuplicateRejectionTimer);
     e1a:	88 ea       	ldi	r24, 0xA8	; 168
     e1c:	96 e0       	ldi	r25, 0x06	; 6
     e1e:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <SYS_TimerStart>
#endif

  if (nwkRxRejectDuplicate(header))
    return;

  if (0xffff == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
     e22:	f7 01       	movw	r30, r14
     e24:	87 81       	ldd	r24, Z+7	; 0x07
     e26:	90 85       	ldd	r25, Z+8	; 0x08
     e28:	ff ef       	ldi	r31, 0xFF	; 255
     e2a:	8f 3f       	cpi	r24, 0xFF	; 255
     e2c:	9f 07       	cpc	r25, r31
     e2e:	d9 f4       	brne	.+54     	; 0xe66 <nwkRxTaskHandler+0x1bc>
     e30:	20 91 b1 07 	lds	r18, 0x07B1
     e34:	30 91 b2 07 	lds	r19, 0x07B2
     e38:	d7 01       	movw	r26, r14
     e3a:	1f 96       	adiw	r26, 0x0f	; 15
     e3c:	8d 91       	ld	r24, X+
     e3e:	9c 91       	ld	r25, X
     e40:	50 97       	sbiw	r26, 0x10	; 16
     e42:	28 17       	cp	r18, r24
     e44:	39 07       	cpc	r19, r25
     e46:	79 f0       	breq	.+30     	; 0xe66 <nwkRxTaskHandler+0x1bc>
     e48:	15 96       	adiw	r26, 0x05	; 5
     e4a:	8d 91       	ld	r24, X+
     e4c:	9c 91       	ld	r25, X
     e4e:	16 97       	sbiw	r26, 0x06	; 6
     e50:	bf ef       	ldi	r27, 0xFF	; 255
     e52:	8f 3f       	cpi	r24, 0xFF	; 255
     e54:	9b 07       	cpc	r25, r27
     e56:	39 f0       	breq	.+14     	; 0xe66 <nwkRxTaskHandler+0x1bc>
      0xffff != header->macDstPanId && 0 == header->nwkFcf.linkLocal)
     e58:	f7 01       	movw	r30, r14
     e5a:	83 85       	ldd	r24, Z+11	; 0x0b
     e5c:	82 fd       	sbrc	r24, 2
     e5e:	03 c0       	rjmp	.+6      	; 0xe66 <nwkRxTaskHandler+0x1bc>
    nwkTxBroadcastFrame(frame);
     e60:	c7 01       	movw	r24, r14
     e62:	0e 94 b9 08 	call	0x1172	; 0x1172 <nwkTxBroadcastFrame>

  if (nwkIb.addr == header->nwkDstAddr || 0xffff == header->nwkDstAddr)
     e66:	80 91 b1 07 	lds	r24, 0x07B1
     e6a:	90 91 b2 07 	lds	r25, 0x07B2
     e6e:	d7 01       	movw	r26, r14
     e70:	1f 96       	adiw	r26, 0x0f	; 15
     e72:	2d 91       	ld	r18, X+
     e74:	3c 91       	ld	r19, X
     e76:	50 97       	sbiw	r26, 0x10	; 16
     e78:	82 17       	cp	r24, r18
     e7a:	93 07       	cpc	r25, r19
     e7c:	21 f0       	breq	.+8      	; 0xe86 <nwkRxTaskHandler+0x1dc>
     e7e:	bf ef       	ldi	r27, 0xFF	; 255
     e80:	2f 3f       	cpi	r18, 0xFF	; 255
     e82:	3b 07       	cpc	r19, r27
     e84:	19 f4       	brne	.+6      	; 0xe8c <nwkRxTaskHandler+0x1e2>
#ifdef NWK_ENABLE_SECURITY
    if (header->nwkFcf.securityEnabled)
      frame->state = NWK_RX_STATE_DECRYPT;
    else
#endif
      frame->state = NWK_RX_STATE_INDICATE;
     e86:	f7 01       	movw	r30, r14
     e88:	b0 82       	st	Z, r11
     e8a:	d0 c0       	rjmp	.+416    	; 0x102c <nwkRxTaskHandler+0x382>
  }
#ifdef NWK_ENABLE_ROUTING
  else if (nwkIb.addr == header->macDstAddr && 0xffff != header->macDstPanId)
     e8c:	d7 01       	movw	r26, r14
     e8e:	17 96       	adiw	r26, 0x07	; 7
     e90:	2d 91       	ld	r18, X+
     e92:	3c 91       	ld	r19, X
     e94:	18 97       	sbiw	r26, 0x08	; 8
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	09 f0       	breq	.+2      	; 0xe9e <nwkRxTaskHandler+0x1f4>
     e9c:	c7 c0       	rjmp	.+398    	; 0x102c <nwkRxTaskHandler+0x382>
     e9e:	15 96       	adiw	r26, 0x05	; 5
     ea0:	8d 91       	ld	r24, X+
     ea2:	9c 91       	ld	r25, X
     ea4:	16 97       	sbiw	r26, 0x06	; 6
     ea6:	bf ef       	ldi	r27, 0xFF	; 255
     ea8:	8f 3f       	cpi	r24, 0xFF	; 255
     eaa:	9b 07       	cpc	r25, r27
     eac:	09 f4       	brne	.+2      	; 0xeb0 <nwkRxTaskHandler+0x206>
     eae:	be c0       	rjmp	.+380    	; 0x102c <nwkRxTaskHandler+0x382>
  {
    frame->state = NWK_RX_STATE_ROUTE;
     eb0:	f7 01       	movw	r30, r14
     eb2:	a0 82       	st	Z, r10
     eb4:	bb c0       	rjmp	.+374    	; 0x102c <nwkRxTaskHandler+0x382>
      case NWK_RX_STATE_INDICATE:
      {
        NwkFrameHeader_t *header = &frame->data.header;
        bool ack, forceAck;

        nwkRxAckControl = NWK_ACK_CONTROL_NONE;
     eb6:	10 92 74 06 	sts	0x0674, r1
static bool nwkRxIndicateFrame(NwkFrame_t *frame)
{
  NwkFrameHeader_t *header = &frame->data.header;
  NWK_DataInd_t ind;

  if (header->nwkDstEndpoint > NWK_MAX_ENDPOINTS_AMOUNT || 
     eba:	d7 01       	movw	r26, r14
     ebc:	51 96       	adiw	r26, 0x11	; 17
     ebe:	8c 91       	ld	r24, X
     ec0:	51 97       	sbiw	r26, 0x11	; 17
     ec2:	82 95       	swap	r24
     ec4:	8f 70       	andi	r24, 0x0F	; 15
     ec6:	e8 2f       	mov	r30, r24
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	e4 30       	cpi	r30, 0x04	; 4
     ecc:	f1 05       	cpc	r31, r1
     ece:	0c f0       	brlt	.+2      	; 0xed2 <nwkRxTaskHandler+0x228>
     ed0:	5e c0       	rjmp	.+188    	; 0xf8e <nwkRxTaskHandler+0x2e4>
      NULL == nwkIb.endpoint[header->nwkDstEndpoint])
     ed2:	ee 0f       	add	r30, r30
     ed4:	ff 1f       	adc	r31, r31
     ed6:	e9 54       	subi	r30, 0x49	; 73
     ed8:	f8 4f       	sbci	r31, 0xF8	; 248
     eda:	40 81       	ld	r20, Z
     edc:	51 81       	ldd	r21, Z+1	; 0x01
static bool nwkRxIndicateFrame(NwkFrame_t *frame)
{
  NwkFrameHeader_t *header = &frame->data.header;
  NWK_DataInd_t ind;

  if (header->nwkDstEndpoint > NWK_MAX_ENDPOINTS_AMOUNT || 
     ede:	41 15       	cp	r20, r1
     ee0:	51 05       	cpc	r21, r1
     ee2:	09 f4       	brne	.+2      	; 0xee6 <nwkRxTaskHandler+0x23c>
     ee4:	54 c0       	rjmp	.+168    	; 0xf8e <nwkRxTaskHandler+0x2e4>
      NULL == nwkIb.endpoint[header->nwkDstEndpoint])
    return false;

  ind.srcAddr = header->nwkSrcAddr;
     ee6:	1d 96       	adiw	r26, 0x0d	; 13
     ee8:	2d 91       	ld	r18, X+
     eea:	3c 91       	ld	r19, X
     eec:	1e 97       	sbiw	r26, 0x0e	; 14
     eee:	3a 83       	std	Y+2, r19	; 0x02
     ef0:	29 83       	std	Y+1, r18	; 0x01
  ind.srcEndpoint = header->nwkSrcEndpoint;
     ef2:	51 96       	adiw	r26, 0x11	; 17
     ef4:	9c 91       	ld	r25, X
     ef6:	51 97       	sbiw	r26, 0x11	; 17
     ef8:	9f 70       	andi	r25, 0x0F	; 15
     efa:	9b 83       	std	Y+3, r25	; 0x03
  ind.dstEndpoint = header->nwkDstEndpoint;
     efc:	8c 83       	std	Y+4, r24	; 0x04
  ind.data = frame->data.payload;
     efe:	c7 01       	movw	r24, r14
     f00:	42 96       	adiw	r24, 0x12	; 18
     f02:	9f 83       	std	Y+7, r25	; 0x07
     f04:	8e 83       	std	Y+6, r24	; 0x06
  ind.size = frame->size - sizeof(NwkFrameHeader_t);
     f06:	11 96       	adiw	r26, 0x01	; 1
     f08:	8c 91       	ld	r24, X
     f0a:	11 97       	sbiw	r26, 0x01	; 1
     f0c:	80 51       	subi	r24, 0x10	; 16
     f0e:	88 87       	std	Y+8, r24	; 0x08
  ind.lqi = frame->rx.lqi;
     f10:	f7 01       	movw	r30, r14
     f12:	e1 58       	subi	r30, 0x81	; 129
     f14:	ff 4f       	sbci	r31, 0xFF	; 255
     f16:	80 81       	ld	r24, Z
     f18:	89 87       	std	Y+9, r24	; 0x09
  ind.rssi = frame->rx.rssi;
     f1a:	f7 01       	movw	r30, r14
     f1c:	e0 58       	subi	r30, 0x80	; 128
     f1e:	ff 4f       	sbci	r31, 0xFF	; 255
     f20:	80 81       	ld	r24, Z
     f22:	8a 87       	std	Y+10, r24	; 0x0a

  ind.options  = (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
     f24:	f7 01       	movw	r30, r14
     f26:	73 85       	ldd	r23, Z+11	; 0x0b
  ind.options |= (header->nwkFcf.securityEnabled) ? NWK_IND_OPT_SECURED : 0;
     f28:	67 2f       	mov	r22, r23
     f2a:	63 70       	andi	r22, 0x03	; 3
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
     f2c:	72 ff       	sbrs	r23, 2
     f2e:	02 c0       	rjmp	.+4      	; 0xf34 <nwkRxTaskHandler+0x28a>
     f30:	80 e2       	ldi	r24, 0x20	; 32
     f32:	01 c0       	rjmp	.+2      	; 0xf36 <nwkRxTaskHandler+0x28c>
     f34:	80 e0       	ldi	r24, 0x00	; 0
     f36:	76 2f       	mov	r23, r22
     f38:	78 2b       	or	r23, r24
  ind.options |= (0xffff == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
     f3a:	d7 01       	movw	r26, r14
     f3c:	1f 96       	adiw	r26, 0x0f	; 15
     f3e:	8d 91       	ld	r24, X+
     f40:	9c 91       	ld	r25, X
     f42:	50 97       	sbiw	r26, 0x10	; 16
     f44:	bf ef       	ldi	r27, 0xFF	; 255
     f46:	8f 3f       	cpi	r24, 0xFF	; 255
     f48:	9b 07       	cpc	r25, r27
     f4a:	11 f4       	brne	.+4      	; 0xf50 <nwkRxTaskHandler+0x2a6>
     f4c:	64 e0       	ldi	r22, 0x04	; 4
     f4e:	01 c0       	rjmp	.+2      	; 0xf52 <nwkRxTaskHandler+0x2a8>
     f50:	60 e0       	ldi	r22, 0x00	; 0
     f52:	67 2b       	or	r22, r23
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
     f54:	f7 01       	movw	r30, r14
     f56:	81 85       	ldd	r24, Z+9	; 0x09
     f58:	92 85       	ldd	r25, Z+10	; 0x0a
     f5a:	28 17       	cp	r18, r24
     f5c:	39 07       	cpc	r19, r25
     f5e:	11 f4       	brne	.+4      	; 0xf64 <nwkRxTaskHandler+0x2ba>
     f60:	98 e0       	ldi	r25, 0x08	; 8
     f62:	01 c0       	rjmp	.+2      	; 0xf66 <nwkRxTaskHandler+0x2bc>
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	69 2b       	or	r22, r25
  ind.options |= (0xffff == header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
     f68:	d7 01       	movw	r26, r14
     f6a:	15 96       	adiw	r26, 0x05	; 5
     f6c:	8d 91       	ld	r24, X+
     f6e:	9c 91       	ld	r25, X
     f70:	16 97       	sbiw	r26, 0x06	; 6
     f72:	bf ef       	ldi	r27, 0xFF	; 255
     f74:	8f 3f       	cpi	r24, 0xFF	; 255
     f76:	9b 07       	cpc	r25, r27
     f78:	11 f4       	brne	.+4      	; 0xf7e <nwkRxTaskHandler+0x2d4>
     f7a:	80 e1       	ldi	r24, 0x10	; 16
     f7c:	01 c0       	rjmp	.+2      	; 0xf80 <nwkRxTaskHandler+0x2d6>
     f7e:	80 e0       	ldi	r24, 0x00	; 0
     f80:	86 2b       	or	r24, r22
     f82:	8d 83       	std	Y+5, r24	; 0x05

  return nwkIb.endpoint[header->nwkDstEndpoint](&ind);
     f84:	ce 01       	movw	r24, r28
     f86:	01 96       	adiw	r24, 0x01	; 1
     f88:	fa 01       	movw	r30, r20
     f8a:	09 95       	icall
     f8c:	01 c0       	rjmp	.+2      	; 0xf90 <nwkRxTaskHandler+0x2e6>
  NwkFrameHeader_t *header = &frame->data.header;
  NWK_DataInd_t ind;

  if (header->nwkDstEndpoint > NWK_MAX_ENDPOINTS_AMOUNT || 
      NULL == nwkIb.endpoint[header->nwkDstEndpoint])
    return false;
     f8e:	80 e0       	ldi	r24, 0x00	; 0
        NwkFrameHeader_t *header = &frame->data.header;
        bool ack, forceAck;

        nwkRxAckControl = NWK_ACK_CONTROL_NONE;
        ack = nwkRxIndicateFrame(frame);
        forceAck = (0xffff == header->macDstAddr && nwkIb.addr == header->nwkDstAddr);
     f90:	f7 01       	movw	r30, r14
     f92:	27 81       	ldd	r18, Z+7	; 0x07
     f94:	30 85       	ldd	r19, Z+8	; 0x08
     f96:	ff ef       	ldi	r31, 0xFF	; 255
     f98:	2f 3f       	cpi	r18, 0xFF	; 255
     f9a:	3f 07       	cpc	r19, r31
     f9c:	71 f4       	brne	.+28     	; 0xfba <nwkRxTaskHandler+0x310>
#endif
}

/*****************************************************************************
*****************************************************************************/
void nwkRxTaskHandler(void)
     f9e:	61 e0       	ldi	r22, 0x01	; 1
     fa0:	70 e0       	ldi	r23, 0x00	; 0
     fa2:	20 91 b1 07 	lds	r18, 0x07B1
     fa6:	30 91 b2 07 	lds	r19, 0x07B2
     faa:	d7 01       	movw	r26, r14
     fac:	1f 96       	adiw	r26, 0x0f	; 15
     fae:	4d 91       	ld	r20, X+
     fb0:	5c 91       	ld	r21, X
     fb2:	50 97       	sbiw	r26, 0x10	; 16
     fb4:	24 17       	cp	r18, r20
     fb6:	35 07       	cpc	r19, r21
     fb8:	11 f0       	breq	.+4      	; 0xfbe <nwkRxTaskHandler+0x314>
        NwkFrameHeader_t *header = &frame->data.header;
        bool ack, forceAck;

        nwkRxAckControl = NWK_ACK_CONTROL_NONE;
        ack = nwkRxIndicateFrame(frame);
        forceAck = (0xffff == header->macDstAddr && nwkIb.addr == header->nwkDstAddr);
     fba:	60 e0       	ldi	r22, 0x00	; 0
     fbc:	70 e0       	ldi	r23, 0x00	; 0

        if ((header->nwkFcf.ackRequest && ack) || forceAck)
     fbe:	f7 01       	movw	r30, r14
     fc0:	93 85       	ldd	r25, Z+11	; 0x0b
     fc2:	90 ff       	sbrs	r25, 0
     fc4:	02 c0       	rjmp	.+4      	; 0xfca <nwkRxTaskHandler+0x320>
     fc6:	88 23       	and	r24, r24
     fc8:	19 f4       	brne	.+6      	; 0xfd0 <nwkRxTaskHandler+0x326>
     fca:	61 15       	cp	r22, r1
     fcc:	71 05       	cpc	r23, r1
     fce:	f9 f0       	breq	.+62     	; 0x100e <nwkRxTaskHandler+0x364>
static void nwkRxSendAck(NwkFrame_t *frame)
{
  NwkFrame_t *ack;
  NwkAckCommand_t *command;

  if (NULL == (ack = nwkFrameAlloc(sizeof(NwkAckCommand_t))))
     fd0:	83 e0       	ldi	r24, 0x03	; 3
     fd2:	0e 94 1b 04 	call	0x836	; 0x836 <nwkFrameAlloc>
     fd6:	8c 01       	movw	r16, r24
     fd8:	00 97       	sbiw	r24, 0x00	; 0
     fda:	c9 f0       	breq	.+50     	; 0x100e <nwkRxTaskHandler+0x364>
    return;

  nwkFrameCommandInit(ack);
     fdc:	0e 94 52 04 	call	0x8a4	; 0x8a4 <nwkFrameCommandInit>

  ack->tx.confirm = nwkRxSendAckConf;
     fe0:	f8 01       	movw	r30, r16
     fe2:	ed 57       	subi	r30, 0x7D	; 125
     fe4:	ff 4f       	sbci	r31, 0xFF	; 255
     fe6:	91 82       	std	Z+1, r9	; 0x01
     fe8:	80 82       	st	Z, r8

  ack->data.header.nwkDstAddr = frame->data.header.nwkSrcAddr;
     fea:	d7 01       	movw	r26, r14
     fec:	1d 96       	adiw	r26, 0x0d	; 13
     fee:	8d 91       	ld	r24, X+
     ff0:	9c 91       	ld	r25, X
     ff2:	1e 97       	sbiw	r26, 0x0e	; 14
     ff4:	f8 01       	movw	r30, r16
     ff6:	90 8b       	std	Z+16, r25	; 0x10
     ff8:	87 87       	std	Z+15, r24	; 0x0f

  command = (NwkAckCommand_t *)ack->data.payload;

  command->id = NWK_COMMAND_ACK;
     ffa:	12 8a       	std	Z+18, r1	; 0x12
  command->control = nwkRxAckControl;
     ffc:	80 91 74 06 	lds	r24, 0x0674
    1000:	84 8b       	std	Z+20, r24	; 0x14
  command->seq = frame->data.header.nwkSeq;
    1002:	1c 96       	adiw	r26, 0x0c	; 12
    1004:	8c 91       	ld	r24, X
    1006:	83 8b       	std	Z+19, r24	; 0x13

  nwkTxFrame(ack);
    1008:	c8 01       	movw	r24, r16
    100a:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <nwkTxFrame>
        forceAck = (0xffff == header->macDstAddr && nwkIb.addr == header->nwkDstAddr);

        if ((header->nwkFcf.ackRequest && ack) || forceAck)
          nwkRxSendAck(frame);

        frame->state = NWK_RX_STATE_FINISH;
    100e:	d7 01       	movw	r26, r14
    1010:	cc 92       	st	X, r12
      } break;
    1012:	0c c0       	rjmp	.+24     	; 0x102c <nwkRxTaskHandler+0x382>

#ifdef NWK_ENABLE_ROUTING
      case NWK_RX_STATE_ROUTE:
      {
        nwkRouteFrame(frame);
    1014:	c7 01       	movw	r24, r14
    1016:	0e 94 73 05 	call	0xae6	; 0xae6 <nwkRouteFrame>
    101a:	03 c0       	rjmp	.+6      	; 0x1022 <nwkRxTaskHandler+0x378>
      } break;
#endif

      case NWK_RX_STATE_FINISH:
      {
        nwkFrameFree(frame);
    101c:	c7 01       	movw	r24, r14
    101e:	0e 94 41 04 	call	0x882	; 0x882 <nwkFrameFree>
        --nwkRxActiveFrames;
    1022:	80 91 a7 06 	lds	r24, 0x06A7
    1026:	81 50       	subi	r24, 0x01	; 1
    1028:	80 93 a7 06 	sts	0x06A7, r24
      } break;
    102c:	d3 94       	inc	r13
void nwkRxTaskHandler(void)
{
  if (0 == nwkRxActiveFrames)
    return;

  for (int i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    102e:	b3 e0       	ldi	r27, 0x03	; 3
    1030:	db 16       	cp	r13, r27
    1032:	09 f0       	breq	.+2      	; 0x1036 <nwkRxTaskHandler+0x38c>
    1034:	5e ce       	rjmp	.-836    	; 0xcf2 <nwkRxTaskHandler+0x48>
        nwkFrameFree(frame);
        --nwkRxActiveFrames;
      } break;
    }
  }
}
    1036:	2a 96       	adiw	r28, 0x0a	; 10
    1038:	0f b6       	in	r0, 0x3f	; 63
    103a:	f8 94       	cli
    103c:	de bf       	out	0x3e, r29	; 62
    103e:	0f be       	out	0x3f, r0	; 63
    1040:	cd bf       	out	0x3d, r28	; 61
    1042:	df 91       	pop	r29
    1044:	cf 91       	pop	r28
    1046:	1f 91       	pop	r17
    1048:	0f 91       	pop	r16
    104a:	ff 90       	pop	r15
    104c:	ef 90       	pop	r14
    104e:	df 90       	pop	r13
    1050:	cf 90       	pop	r12
    1052:	bf 90       	pop	r11
    1054:	af 90       	pop	r10
    1056:	9f 90       	pop	r9
    1058:	8f 90       	pop	r8
    105a:	08 95       	ret

0000105c <nwkTxBroadcastConf>:

/*****************************************************************************
*****************************************************************************/
static void nwkTxBroadcastConf(NwkFrame_t *frame)
{
  nwkFrameFree(frame);
    105c:	0e 94 41 04 	call	0x882	; 0x882 <nwkFrameFree>
}
    1060:	08 95       	ret

00001062 <nwkTxAckWaitTimerHandler>:
}

/*****************************************************************************
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
    1062:	ef 92       	push	r14
    1064:	ff 92       	push	r15
    1066:	1f 93       	push	r17
    1068:	cf 93       	push	r28
    106a:	df 93       	push	r29
    106c:	7c 01       	movw	r14, r24
  if (0 == nwkTxActiveFrames)
    106e:	80 91 b7 06 	lds	r24, 0x06B7
    1072:	88 23       	and	r24, r24
    1074:	01 f1       	breq	.+64     	; 0x10b6 <nwkTxAckWaitTimerHandler+0x54>
    1076:	c0 e0       	ldi	r28, 0x00	; 0
  {
    NwkFrame_t *frame = nwkFrameByIndex(i);

    if (NWK_TX_STATE_WAIT_ACK == frame->state && 0 == --frame->tx.timeout)
    {
      frame->state = NWK_TX_STATE_CONFIRM;
    1078:	d5 e1       	ldi	r29, 0x15	; 21
      frame->tx.status = NWK_NO_ACK_STATUS;
    107a:	10 e1       	ldi	r17, 0x10	; 16
  if (0 == nwkTxActiveFrames)
    return;

  for (int i = 0; i < NWK_BUFFERS_AMOUNT; i++)
  {
    NwkFrame_t *frame = nwkFrameByIndex(i);
    107c:	8c 2f       	mov	r24, r28
    107e:	0e 94 44 04 	call	0x888	; 0x888 <nwkFrameByIndex>
    1082:	dc 01       	movw	r26, r24

    if (NWK_TX_STATE_WAIT_ACK == frame->state && 0 == --frame->tx.timeout)
    1084:	8c 91       	ld	r24, X
    1086:	84 31       	cpi	r24, 0x14	; 20
    1088:	81 f4       	brne	.+32     	; 0x10aa <nwkTxAckWaitTimerHandler+0x48>
    108a:	fd 01       	movw	r30, r26
    108c:	e0 58       	subi	r30, 0x80	; 128
    108e:	ff 4f       	sbci	r31, 0xFF	; 255
    1090:	20 81       	ld	r18, Z
    1092:	31 81       	ldd	r19, Z+1	; 0x01
    1094:	21 50       	subi	r18, 0x01	; 1
    1096:	30 40       	sbci	r19, 0x00	; 0
    1098:	31 83       	std	Z+1, r19	; 0x01
    109a:	20 83       	st	Z, r18
    109c:	21 15       	cp	r18, r1
    109e:	31 05       	cpc	r19, r1
    10a0:	21 f4       	brne	.+8      	; 0x10aa <nwkTxAckWaitTimerHandler+0x48>
    {
      frame->state = NWK_TX_STATE_CONFIRM;
    10a2:	dc 93       	st	X, r29
      frame->tx.status = NWK_NO_ACK_STATUS;
    10a4:	a1 58       	subi	r26, 0x81	; 129
    10a6:	bf 4f       	sbci	r27, 0xFF	; 255
    10a8:	1c 93       	st	X, r17
    10aa:	cf 5f       	subi	r28, 0xFF	; 255
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
  if (0 == nwkTxActiveFrames)
    return;

  for (int i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    10ac:	c3 30       	cpi	r28, 0x03	; 3
    10ae:	31 f7       	brne	.-52     	; 0x107c <nwkTxAckWaitTimerHandler+0x1a>
      frame->state = NWK_TX_STATE_CONFIRM;
      frame->tx.status = NWK_NO_ACK_STATUS;
    }
  }

  SYS_TimerStart(timer);
    10b0:	c7 01       	movw	r24, r14
    10b2:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <SYS_TimerStart>
}
    10b6:	df 91       	pop	r29
    10b8:	cf 91       	pop	r28
    10ba:	1f 91       	pop	r17
    10bc:	ff 90       	pop	r15
    10be:	ef 90       	pop	r14
    10c0:	08 95       	ret

000010c2 <nwkTxInit>:

/*****************************************************************************
*****************************************************************************/
void nwkTxInit(void)
{
  nwkTxPhyActiveFrame = NULL;
    10c2:	10 92 b6 06 	sts	0x06B6, r1
    10c6:	10 92 b5 06 	sts	0x06B5, r1
  nwkTxActiveFrames = 0;
    10ca:	10 92 b7 06 	sts	0x06B7, r1

  nwkTxAckWaitTimer.interval = NWK_TX_ACK_WAIT_TIMER_INTERVAL;
    10ce:	82 e3       	ldi	r24, 0x32	; 50
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	a0 e0       	ldi	r26, 0x00	; 0
    10d4:	b0 e0       	ldi	r27, 0x00	; 0
    10d6:	80 93 be 06 	sts	0x06BE, r24
    10da:	90 93 bf 06 	sts	0x06BF, r25
    10de:	a0 93 c0 06 	sts	0x06C0, r26
    10e2:	b0 93 c1 06 	sts	0x06C1, r27
  nwkTxAckWaitTimer.mode = SYS_TIMER_INTERVAL_MODE;
    10e6:	10 92 c2 06 	sts	0x06C2, r1
  nwkTxAckWaitTimer.handler = nwkTxAckWaitTimerHandler;
    10ea:	81 e3       	ldi	r24, 0x31	; 49
    10ec:	98 e0       	ldi	r25, 0x08	; 8
    10ee:	90 93 c4 06 	sts	0x06C4, r25
    10f2:	80 93 c3 06 	sts	0x06C3, r24
}
    10f6:	08 95       	ret

000010f8 <nwkTxFrame>:

/*****************************************************************************
*****************************************************************************/
void nwkTxFrame(NwkFrame_t *frame)
{
    10f8:	cf 93       	push	r28
    10fa:	df 93       	push	r29
    10fc:	ec 01       	movw	r28, r24
  NwkFrameHeader_t *header = &frame->data.header;

  if (frame->tx.control & NWK_TX_CONTROL_ROUTING)
    10fe:	fc 01       	movw	r30, r24
    1100:	ee 57       	subi	r30, 0x7E	; 126
    1102:	ff 4f       	sbci	r31, 0xFF	; 255
    1104:	80 81       	ld	r24, Z
  {
    frame->state = NWK_TX_STATE_SEND;
    1106:	91 e1       	ldi	r25, 0x11	; 17
    1108:	98 83       	st	Y, r25
    else
#endif
      frame->state = NWK_TX_STATE_SEND;
  }

  frame->tx.status = NWK_SUCCESS_STATUS;
    110a:	fe 01       	movw	r30, r28
    110c:	e1 58       	subi	r30, 0x81	; 129
    110e:	ff 4f       	sbci	r31, 0xFF	; 255
    1110:	10 82       	st	Z, r1

  if (frame->tx.control & NWK_TX_CONTROL_BROADCAST_PAN_ID)
    1112:	80 ff       	sbrs	r24, 0
    1114:	03 c0       	rjmp	.+6      	; 0x111c <nwkTxFrame+0x24>
    frame->data.header.macDstPanId = 0xffff;
    1116:	8f ef       	ldi	r24, 0xFF	; 255
    1118:	9f ef       	ldi	r25, 0xFF	; 255
    111a:	04 c0       	rjmp	.+8      	; 0x1124 <nwkTxFrame+0x2c>
  else
    frame->data.header.macDstPanId = nwkIb.panId;
    111c:	80 91 b3 07 	lds	r24, 0x07B3
    1120:	90 91 b4 07 	lds	r25, 0x07B4
    1124:	9e 83       	std	Y+6, r25	; 0x06
    1126:	8d 83       	std	Y+5, r24	; 0x05

#ifdef NWK_ENABLE_ROUTING
  header->macDstAddr = nwkRouteNextHop(header->nwkDstAddr);
    1128:	8f 85       	ldd	r24, Y+15	; 0x0f
    112a:	98 89       	ldd	r25, Y+16	; 0x10
    112c:	0e 94 4e 05 	call	0xa9c	; 0xa9c <nwkRouteNextHop>
    1130:	98 87       	std	Y+8, r25	; 0x08
    1132:	8f 83       	std	Y+7, r24	; 0x07
#else
  header->macDstAddr = header->nwkDstAddr;
#endif
  header->macSrcAddr = nwkIb.addr;
    1134:	20 91 b1 07 	lds	r18, 0x07B1
    1138:	30 91 b2 07 	lds	r19, 0x07B2
    113c:	3a 87       	std	Y+10, r19	; 0x0a
    113e:	29 87       	std	Y+9, r18	; 0x09
  header->macSeq = ++nwkIb.macSeqNum;
    1140:	20 91 b6 07 	lds	r18, 0x07B6
    1144:	2f 5f       	subi	r18, 0xFF	; 255
    1146:	20 93 b6 07 	sts	0x07B6, r18
    114a:	2c 83       	std	Y+4, r18	; 0x04

  if (0xffff == header->macDstAddr)
    114c:	2f ef       	ldi	r18, 0xFF	; 255
    114e:	8f 3f       	cpi	r24, 0xFF	; 255
    1150:	92 07       	cpc	r25, r18
    1152:	19 f4       	brne	.+6      	; 0x115a <nwkTxFrame+0x62>
    header->macFcf = 0x8841;
    1154:	81 e4       	ldi	r24, 0x41	; 65
    1156:	98 e8       	ldi	r25, 0x88	; 136
    1158:	02 c0       	rjmp	.+4      	; 0x115e <nwkTxFrame+0x66>
  else
    header->macFcf = 0x8861;
    115a:	81 e6       	ldi	r24, 0x61	; 97
    115c:	98 e8       	ldi	r25, 0x88	; 136
    115e:	9b 83       	std	Y+3, r25	; 0x03
    1160:	8a 83       	std	Y+2, r24	; 0x02

  ++nwkTxActiveFrames;
    1162:	80 91 b7 06 	lds	r24, 0x06B7
    1166:	8f 5f       	subi	r24, 0xFF	; 255
    1168:	80 93 b7 06 	sts	0x06B7, r24
}
    116c:	df 91       	pop	r29
    116e:	cf 91       	pop	r28
    1170:	08 95       	ret

00001172 <nwkTxBroadcastFrame>:

/*****************************************************************************
*****************************************************************************/
void nwkTxBroadcastFrame(NwkFrame_t *frame)
{
    1172:	0f 93       	push	r16
    1174:	1f 93       	push	r17
    1176:	cf 93       	push	r28
    1178:	df 93       	push	r29
    117a:	8c 01       	movw	r16, r24
  NwkFrame_t *newFrame;

  if (NULL == (newFrame = nwkFrameAlloc(frame->size - sizeof(NwkFrameHeader_t))))
    117c:	fc 01       	movw	r30, r24
    117e:	81 81       	ldd	r24, Z+1	; 0x01
    1180:	80 51       	subi	r24, 0x10	; 16
    1182:	0e 94 1b 04 	call	0x836	; 0x836 <nwkFrameAlloc>
    1186:	ec 01       	movw	r28, r24
    1188:	00 97       	sbiw	r24, 0x00	; 0
    118a:	b1 f1       	breq	.+108    	; 0x11f8 <nwkTxBroadcastFrame+0x86>
    return;

  newFrame->tx.confirm = nwkTxBroadcastConf;
    118c:	fc 01       	movw	r30, r24
    118e:	ed 57       	subi	r30, 0x7D	; 125
    1190:	ff 4f       	sbci	r31, 0xFF	; 255
    1192:	8e e2       	ldi	r24, 0x2E	; 46
    1194:	98 e0       	ldi	r25, 0x08	; 8
    1196:	91 83       	std	Z+1, r25	; 0x01
    1198:	80 83       	st	Z, r24
  memcpy((uint8_t *)&newFrame->data, (uint8_t *)&frame->data, frame->size);
    119a:	ce 01       	movw	r24, r28
    119c:	02 96       	adiw	r24, 0x02	; 2
    119e:	f8 01       	movw	r30, r16
    11a0:	41 81       	ldd	r20, Z+1	; 0x01
    11a2:	b8 01       	movw	r22, r16
    11a4:	6e 5f       	subi	r22, 0xFE	; 254
    11a6:	7f 4f       	sbci	r23, 0xFF	; 255
    11a8:	50 e0       	ldi	r21, 0x00	; 0
    11aa:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <memcpy>

  newFrame->state = NWK_TX_STATE_SEND;
    11ae:	81 e1       	ldi	r24, 0x11	; 17
    11b0:	88 83       	st	Y, r24
  newFrame->tx.status = NWK_SUCCESS_STATUS;
    11b2:	fe 01       	movw	r30, r28
    11b4:	e1 58       	subi	r30, 0x81	; 129
    11b6:	ff 4f       	sbci	r31, 0xFF	; 255
    11b8:	10 82       	st	Z, r1

  newFrame->data.header.macFcf = 0x8841;
    11ba:	81 e4       	ldi	r24, 0x41	; 65
    11bc:	98 e8       	ldi	r25, 0x88	; 136
    11be:	9b 83       	std	Y+3, r25	; 0x03
    11c0:	8a 83       	std	Y+2, r24	; 0x02
  newFrame->data.header.macDstAddr = 0xffff;
    11c2:	8f ef       	ldi	r24, 0xFF	; 255
    11c4:	9f ef       	ldi	r25, 0xFF	; 255
    11c6:	98 87       	std	Y+8, r25	; 0x08
    11c8:	8f 83       	std	Y+7, r24	; 0x07
  newFrame->data.header.macDstPanId = nwkIb.panId;
    11ca:	80 91 b3 07 	lds	r24, 0x07B3
    11ce:	90 91 b4 07 	lds	r25, 0x07B4
    11d2:	9e 83       	std	Y+6, r25	; 0x06
    11d4:	8d 83       	std	Y+5, r24	; 0x05
  newFrame->data.header.macSrcAddr = nwkIb.addr;
    11d6:	80 91 b1 07 	lds	r24, 0x07B1
    11da:	90 91 b2 07 	lds	r25, 0x07B2
    11de:	9a 87       	std	Y+10, r25	; 0x0a
    11e0:	89 87       	std	Y+9, r24	; 0x09
  newFrame->data.header.macSeq = ++nwkIb.macSeqNum;
    11e2:	80 91 b6 07 	lds	r24, 0x07B6
    11e6:	8f 5f       	subi	r24, 0xFF	; 255
    11e8:	80 93 b6 07 	sts	0x07B6, r24
    11ec:	8c 83       	std	Y+4, r24	; 0x04

  ++nwkTxActiveFrames;
    11ee:	80 91 b7 06 	lds	r24, 0x06B7
    11f2:	8f 5f       	subi	r24, 0xFF	; 255
    11f4:	80 93 b7 06 	sts	0x06B7, r24
}
    11f8:	df 91       	pop	r29
    11fa:	cf 91       	pop	r28
    11fc:	1f 91       	pop	r17
    11fe:	0f 91       	pop	r16
    1200:	08 95       	ret

00001202 <nwkTxAckReceived>:
}

/*****************************************************************************
*****************************************************************************/
void nwkTxAckReceived(NWK_DataInd_t *ind)
{
    1202:	1f 93       	push	r17
    1204:	cf 93       	push	r28
    1206:	df 93       	push	r29
  NwkAckCommand_t *command = (NwkAckCommand_t *)ind->data;
    1208:	fc 01       	movw	r30, r24
    120a:	c5 81       	ldd	r28, Z+5	; 0x05
    120c:	d6 81       	ldd	r29, Z+6	; 0x06

  if (0 == nwkTxActiveFrames)
    120e:	80 91 b7 06 	lds	r24, 0x06B7
    1212:	88 23       	and	r24, r24
    1214:	b1 f0       	breq	.+44     	; 0x1242 <nwkTxAckReceived+0x40>
    1216:	10 e0       	ldi	r17, 0x00	; 0
    return;

  for (int i = 0; i < NWK_BUFFERS_AMOUNT; i++)
  {
    NwkFrame_t *frame = nwkFrameByIndex(i);
    1218:	81 2f       	mov	r24, r17
    121a:	0e 94 44 04 	call	0x888	; 0x888 <nwkFrameByIndex>
    121e:	fc 01       	movw	r30, r24

    if (NWK_TX_STATE_WAIT_ACK == frame->state && frame->data.header.nwkSeq == command->seq)
    1220:	80 81       	ld	r24, Z
    1222:	84 31       	cpi	r24, 0x14	; 20
    1224:	59 f4       	brne	.+22     	; 0x123c <nwkTxAckReceived+0x3a>
    1226:	94 85       	ldd	r25, Z+12	; 0x0c
    1228:	89 81       	ldd	r24, Y+1	; 0x01
    122a:	98 17       	cp	r25, r24
    122c:	39 f4       	brne	.+14     	; 0x123c <nwkTxAckReceived+0x3a>
    {
      frame->state = NWK_TX_STATE_CONFIRM;
    122e:	85 e1       	ldi	r24, 0x15	; 21
    1230:	80 83       	st	Z, r24
      frame->tx.control = command->control;
    1232:	8a 81       	ldd	r24, Y+2	; 0x02
    1234:	ee 57       	subi	r30, 0x7E	; 126
    1236:	ff 4f       	sbci	r31, 0xFF	; 255
    1238:	80 83       	st	Z, r24
      return;
    123a:	03 c0       	rjmp	.+6      	; 0x1242 <nwkTxAckReceived+0x40>
    123c:	1f 5f       	subi	r17, 0xFF	; 255
  NwkAckCommand_t *command = (NwkAckCommand_t *)ind->data;

  if (0 == nwkTxActiveFrames)
    return;

  for (int i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    123e:	13 30       	cpi	r17, 0x03	; 3
    1240:	59 f7       	brne	.-42     	; 0x1218 <nwkTxAckReceived+0x16>
      frame->state = NWK_TX_STATE_CONFIRM;
      frame->tx.control = command->control;
      return;
    }
  }
}
    1242:	df 91       	pop	r29
    1244:	cf 91       	pop	r28
    1246:	1f 91       	pop	r17
    1248:	08 95       	ret

0000124a <nwkTxBusy>:

/*****************************************************************************
*****************************************************************************/
bool nwkTxBusy(void)
{
  return nwkTxActiveFrames > 0;
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	90 91 b7 06 	lds	r25, 0x06B7
    1250:	99 23       	and	r25, r25
    1252:	09 f4       	brne	.+2      	; 0x1256 <nwkTxBusy+0xc>
    1254:	80 e0       	ldi	r24, 0x00	; 0
}
    1256:	08 95       	ret

00001258 <PHY_DataConf>:

/*****************************************************************************
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
  nwkTxPhyActiveFrame->tx.status = convertPhyStatus(status);
    1258:	e0 91 b5 06 	lds	r30, 0x06B5
    125c:	f0 91 b6 06 	lds	r31, 0x06B6

/*****************************************************************************
*****************************************************************************/
static uint8_t convertPhyStatus(uint8_t status)
{
  if (TRAC_STATUS_SUCCESS == status ||
    1260:	83 30       	cpi	r24, 0x03	; 3
    1262:	30 f0       	brcs	.+12     	; 0x1270 <PHY_DataConf+0x18>
      TRAC_STATUS_SUCCESS_DATA_PENDING == status ||
      TRAC_STATUS_SUCCESS_WAIT_FOR_ACK == status)
    return NWK_SUCCESS_STATUS;

  else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
    1264:	83 30       	cpi	r24, 0x03	; 3
    1266:	31 f0       	breq	.+12     	; 0x1274 <PHY_DataConf+0x1c>
    return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;

  else if (TRAC_STATUS_NO_ACK == status)
    1268:	85 30       	cpi	r24, 0x05	; 5
    126a:	31 f4       	brne	.+12     	; 0x1278 <PHY_DataConf+0x20>
    return NWK_PHY_NO_ACK_STATUS;
    126c:	81 e2       	ldi	r24, 0x21	; 33
    126e:	05 c0       	rjmp	.+10     	; 0x127a <PHY_DataConf+0x22>
static uint8_t convertPhyStatus(uint8_t status)
{
  if (TRAC_STATUS_SUCCESS == status ||
      TRAC_STATUS_SUCCESS_DATA_PENDING == status ||
      TRAC_STATUS_SUCCESS_WAIT_FOR_ACK == status)
    return NWK_SUCCESS_STATUS;
    1270:	80 e0       	ldi	r24, 0x00	; 0
    1272:	03 c0       	rjmp	.+6      	; 0x127a <PHY_DataConf+0x22>

  else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
    return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;
    1274:	80 e2       	ldi	r24, 0x20	; 32
    1276:	01 c0       	rjmp	.+2      	; 0x127a <PHY_DataConf+0x22>

  else if (TRAC_STATUS_NO_ACK == status)
    return NWK_PHY_NO_ACK_STATUS;

  else
    return NWK_ERROR_STATUS;
    1278:	81 e0       	ldi	r24, 0x01	; 1

/*****************************************************************************
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
  nwkTxPhyActiveFrame->tx.status = convertPhyStatus(status);
    127a:	df 01       	movw	r26, r30
    127c:	a1 58       	subi	r26, 0x81	; 129
    127e:	bf 4f       	sbci	r27, 0xFF	; 255
    1280:	8c 93       	st	X, r24
  nwkTxPhyActiveFrame->state = NWK_TX_STATE_SENT;
    1282:	83 e1       	ldi	r24, 0x13	; 19
    1284:	80 83       	st	Z, r24
  nwkTxPhyActiveFrame = NULL;
    1286:	10 92 b6 06 	sts	0x06B6, r1
    128a:	10 92 b5 06 	sts	0x06B5, r1
}
    128e:	08 95       	ret

00001290 <nwkTxTaskHandler>:

/*****************************************************************************
*****************************************************************************/
void nwkTxTaskHandler(void)
{
    1290:	cf 92       	push	r12
    1292:	df 92       	push	r13
    1294:	ef 92       	push	r14
    1296:	ff 92       	push	r15
    1298:	0f 93       	push	r16
    129a:	1f 93       	push	r17
    129c:	cf 93       	push	r28
    129e:	df 93       	push	r29
  if (0 == nwkTxActiveFrames)
    12a0:	80 91 b7 06 	lds	r24, 0x06B7
    12a4:	88 23       	and	r24, r24
    12a6:	09 f4       	brne	.+2      	; 0x12aa <nwkTxTaskHandler+0x1a>
    12a8:	55 c0       	rjmp	.+170    	; 0x1354 <nwkTxTaskHandler+0xc4>
    12aa:	10 e0       	ldi	r17, 0x00	; 0
            frame->state = NWK_TX_STATE_CONFIRM;
          }
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
    12ac:	05 e1       	ldi	r16, 0x15	; 21
        if (NWK_SUCCESS_STATUS == frame->tx.status)
        {
          if (frame->data.header.nwkSrcAddr == nwkIb.addr &&
              frame->data.header.nwkFcf.ackRequest)
          {
            frame->state = NWK_TX_STATE_WAIT_ACK;
    12ae:	84 e1       	ldi	r24, 0x14	; 20
    12b0:	f8 2e       	mov	r15, r24
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
    12b2:	95 e1       	ldi	r25, 0x15	; 21
    12b4:	c9 2e       	mov	r12, r25
    12b6:	d1 2c       	mov	r13, r1
      case NWK_TX_STATE_SEND:
      {
        if (!PHY_Busy())
        {
          nwkTxPhyActiveFrame = frame;
          frame->state = NWK_TX_STATE_WAIT_CONF;
    12b8:	22 e1       	ldi	r18, 0x12	; 18
    12ba:	e2 2e       	mov	r14, r18
  if (0 == nwkTxActiveFrames)
    return;

  for (int i = 0; i < NWK_BUFFERS_AMOUNT; i++)
  {
    NwkFrame_t *frame = nwkFrameByIndex(i);
    12bc:	81 2f       	mov	r24, r17
    12be:	0e 94 44 04 	call	0x888	; 0x888 <nwkFrameByIndex>
    12c2:	ec 01       	movw	r28, r24

    switch (frame->state)
    12c4:	88 81       	ld	r24, Y
    12c6:	83 31       	cpi	r24, 0x13	; 19
    12c8:	99 f0       	breq	.+38     	; 0x12f0 <nwkTxTaskHandler+0x60>
    12ca:	85 31       	cpi	r24, 0x15	; 21
    12cc:	79 f1       	breq	.+94     	; 0x132c <nwkTxTaskHandler+0x9c>
    12ce:	81 31       	cpi	r24, 0x11	; 17
    12d0:	e9 f5       	brne	.+122    	; 0x134c <nwkTxTaskHandler+0xbc>
      } break;
#endif

      case NWK_TX_STATE_SEND:
      {
        if (!PHY_Busy())
    12d2:	0e 94 17 0a 	call	0x142e	; 0x142e <PHY_Busy>
    12d6:	88 23       	and	r24, r24
    12d8:	c9 f5       	brne	.+114    	; 0x134c <nwkTxTaskHandler+0xbc>
        {
          nwkTxPhyActiveFrame = frame;
    12da:	d0 93 b6 06 	sts	0x06B6, r29
    12de:	c0 93 b5 06 	sts	0x06B5, r28
          frame->state = NWK_TX_STATE_WAIT_CONF;
    12e2:	e8 82       	st	Y, r14
          PHY_DataReq((uint8_t *)&frame->data, frame->size);
    12e4:	ce 01       	movw	r24, r28
    12e6:	02 96       	adiw	r24, 0x02	; 2
    12e8:	69 81       	ldd	r22, Y+1	; 0x01
    12ea:	0e 94 3e 0a 	call	0x147c	; 0x147c <PHY_DataReq>
    12ee:	2e c0       	rjmp	.+92     	; 0x134c <nwkTxTaskHandler+0xbc>
      case NWK_TX_STATE_WAIT_CONF:
        break;

      case NWK_TX_STATE_SENT:
      {
        if (NWK_SUCCESS_STATUS == frame->tx.status)
    12f0:	fe 01       	movw	r30, r28
    12f2:	e1 58       	subi	r30, 0x81	; 129
    12f4:	ff 4f       	sbci	r31, 0xFF	; 255
    12f6:	80 81       	ld	r24, Z
    12f8:	88 23       	and	r24, r24
    12fa:	b1 f4       	brne	.+44     	; 0x1328 <nwkTxTaskHandler+0x98>
        {
          if (frame->data.header.nwkSrcAddr == nwkIb.addr &&
    12fc:	2d 85       	ldd	r18, Y+13	; 0x0d
    12fe:	3e 85       	ldd	r19, Y+14	; 0x0e
    1300:	80 91 b1 07 	lds	r24, 0x07B1
    1304:	90 91 b2 07 	lds	r25, 0x07B2
    1308:	28 17       	cp	r18, r24
    130a:	39 07       	cpc	r19, r25
    130c:	69 f4       	brne	.+26     	; 0x1328 <nwkTxTaskHandler+0x98>
    130e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1310:	80 ff       	sbrs	r24, 0
    1312:	0a c0       	rjmp	.+20     	; 0x1328 <nwkTxTaskHandler+0x98>
              frame->data.header.nwkFcf.ackRequest)
          {
            frame->state = NWK_TX_STATE_WAIT_ACK;
    1314:	f8 82       	st	Y, r15
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
    1316:	c0 58       	subi	r28, 0x80	; 128
    1318:	df 4f       	sbci	r29, 0xFF	; 255
    131a:	d9 82       	std	Y+1, r13	; 0x01
    131c:	c8 82       	st	Y, r12
            SYS_TimerStart(&nwkTxAckWaitTimer);
    131e:	88 eb       	ldi	r24, 0xB8	; 184
    1320:	96 e0       	ldi	r25, 0x06	; 6
    1322:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <SYS_TimerStart>
    1326:	12 c0       	rjmp	.+36     	; 0x134c <nwkTxTaskHandler+0xbc>
            frame->state = NWK_TX_STATE_CONFIRM;
          }
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
    1328:	08 83       	st	Y, r16
    132a:	10 c0       	rjmp	.+32     	; 0x134c <nwkTxTaskHandler+0xbc>
        break;

      case NWK_TX_STATE_CONFIRM:
      {
#ifdef NWK_ENABLE_ROUTING
        nwkRouteFrameSent(frame);
    132c:	ce 01       	movw	r24, r28
    132e:	0e 94 f5 04 	call	0x9ea	; 0x9ea <nwkRouteFrameSent>
#endif
        frame->tx.confirm(frame);
    1332:	fe 01       	movw	r30, r28
    1334:	ed 57       	subi	r30, 0x7D	; 125
    1336:	ff 4f       	sbci	r31, 0xFF	; 255
    1338:	01 90       	ld	r0, Z+
    133a:	f0 81       	ld	r31, Z
    133c:	e0 2d       	mov	r30, r0
    133e:	ce 01       	movw	r24, r28
    1340:	09 95       	icall
        --nwkTxActiveFrames;
    1342:	80 91 b7 06 	lds	r24, 0x06B7
    1346:	81 50       	subi	r24, 0x01	; 1
    1348:	80 93 b7 06 	sts	0x06B7, r24
      } break;
    134c:	1f 5f       	subi	r17, 0xFF	; 255
void nwkTxTaskHandler(void)
{
  if (0 == nwkTxActiveFrames)
    return;

  for (int i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    134e:	13 30       	cpi	r17, 0x03	; 3
    1350:	09 f0       	breq	.+2      	; 0x1354 <nwkTxTaskHandler+0xc4>
    1352:	b4 cf       	rjmp	.-152    	; 0x12bc <nwkTxTaskHandler+0x2c>

      default:
        break;
    };
  }
}
    1354:	df 91       	pop	r29
    1356:	cf 91       	pop	r28
    1358:	1f 91       	pop	r17
    135a:	0f 91       	pop	r16
    135c:	ff 90       	pop	r15
    135e:	ef 90       	pop	r14
    1360:	df 90       	pop	r13
    1362:	cf 90       	pop	r12
    1364:	08 95       	ret

00001366 <phyTrxSetState>:

/*****************************************************************************
*****************************************************************************/
static inline void phyTrxSetState(uint8_t state)
{
  TRX_STATE_REG = TRX_CMD_FORCE_TRX_OFF;
    1366:	93 e0       	ldi	r25, 0x03	; 3
    1368:	90 93 42 01 	sts	0x0142, r25
  TRX_STATE_REG = state;
    136c:	80 93 42 01 	sts	0x0142, r24
  while (state != TRX_STATUS_REG_s.trxStatus);
    1370:	90 91 41 01 	lds	r25, 0x0141
    1374:	9f 71       	andi	r25, 0x1F	; 31
    1376:	89 17       	cp	r24, r25
    1378:	d9 f7       	brne	.-10     	; 0x1370 <phyTrxSetState+0xa>
}
    137a:	08 95       	ret

0000137c <phySetRxState>:

/*****************************************************************************
*****************************************************************************/
static void phySetRxState(void)
{
  if (phyIb.rx)
    137c:	80 91 cf 06 	lds	r24, 0x06CF
    1380:	88 23       	and	r24, r24
    1382:	11 f0       	breq	.+4      	; 0x1388 <phySetRxState+0xc>
    phyTrxSetState(TRX_CMD_RX_AACK_ON);
    1384:	86 e1       	ldi	r24, 0x16	; 22
    1386:	01 c0       	rjmp	.+2      	; 0x138a <phySetRxState+0xe>
  else
    phyTrxSetState(TRX_CMD_TRX_OFF);
    1388:	88 e0       	ldi	r24, 0x08	; 8
    138a:	0e 94 b3 09 	call	0x1366	; 0x1366 <phyTrxSetState>
    138e:	08 95       	ret

00001390 <PHY_Init>:

/*****************************************************************************
*****************************************************************************/
void PHY_Init(void)
{
  TRXPR_REG_s.trxrst = 1;
    1390:	e9 e3       	ldi	r30, 0x39	; 57
    1392:	f1 e0       	ldi	r31, 0x01	; 1
    1394:	80 81       	ld	r24, Z
    1396:	81 60       	ori	r24, 0x01	; 1
    1398:	80 83       	st	Z, r24

  phyTrxSetState(TRX_CMD_TRX_OFF);
    139a:	88 e0       	ldi	r24, 0x08	; 8
    139c:	0e 94 b3 09 	call	0x1366	; 0x1366 <phyTrxSetState>

  CSMA_SEED_1_REG_s.aackSetPd = 1;
    13a0:	ee e6       	ldi	r30, 0x6E	; 110
    13a2:	f1 e0       	ldi	r31, 0x01	; 1
    13a4:	80 81       	ld	r24, Z
    13a6:	80 62       	ori	r24, 0x20	; 32
    13a8:	80 83       	st	Z, r24
  CSMA_SEED_1_REG_s.aackDisAck = 0;
    13aa:	80 81       	ld	r24, Z
    13ac:	8f 7e       	andi	r24, 0xEF	; 239
    13ae:	80 83       	st	Z, r24

  IRQ_STATUS_REG = IRQ_STATUS_CLEAR_VALUE;
    13b0:	8f ef       	ldi	r24, 0xFF	; 255
    13b2:	80 93 4f 01 	sts	0x014F, r24
  IRQ_MASK_REG_s.rxEndEn = 1;
    13b6:	ee e4       	ldi	r30, 0x4E	; 78
    13b8:	f1 e0       	ldi	r31, 0x01	; 1
    13ba:	80 81       	ld	r24, Z
    13bc:	88 60       	ori	r24, 0x08	; 8
    13be:	80 83       	st	Z, r24
  IRQ_MASK_REG_s.txEndEn = 1;
    13c0:	80 81       	ld	r24, Z
    13c2:	80 64       	ori	r24, 0x40	; 64
    13c4:	80 83       	st	Z, r24

  TRX_CTRL_2_REG_s.rxSafeMode = 1;
    13c6:	ec e4       	ldi	r30, 0x4C	; 76
    13c8:	f1 e0       	ldi	r31, 0x01	; 1
    13ca:	80 81       	ld	r24, Z
    13cc:	80 68       	ori	r24, 0x80	; 128
    13ce:	80 83       	st	Z, r24

#ifdef PHY_ENABLE_RANDOM_NUMBER_GENERATOR
  CSMA_SEED_0_REG = (uint8_t)phyGetRandomNumber();
#else
  CSMA_SEED_0_REG = 0x11;
    13d0:	81 e1       	ldi	r24, 0x11	; 17
    13d2:	80 93 6d 01 	sts	0x016D, r24
#endif

  phyIb.request = PHY_REQ_NONE;
    13d6:	10 92 c9 06 	sts	0x06C9, r1
  phyIb.rx = false;
    13da:	10 92 cf 06 	sts	0x06CF, r1
  phyState = PHY_STATE_IDLE;
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	80 93 c8 06 	sts	0x06C8, r24
}
    13e4:	08 95       	ret

000013e6 <PHY_SetRxState>:

/*****************************************************************************
*****************************************************************************/
void PHY_SetRxState(bool rx)
{
  phyIb.request |= PHY_REQ_RX;
    13e6:	90 91 c9 06 	lds	r25, 0x06C9
    13ea:	98 60       	ori	r25, 0x08	; 8
    13ec:	90 93 c9 06 	sts	0x06C9, r25
  phyIb.rx = rx;
    13f0:	80 93 cf 06 	sts	0x06CF, r24
}
    13f4:	08 95       	ret

000013f6 <PHY_SetChannel>:

/*****************************************************************************
*****************************************************************************/
void PHY_SetChannel(uint8_t channel)
{
  phyIb.request |= PHY_REQ_CHANNEL;
    13f6:	90 91 c9 06 	lds	r25, 0x06C9
    13fa:	91 60       	ori	r25, 0x01	; 1
    13fc:	90 93 c9 06 	sts	0x06C9, r25
  phyIb.channel = channel;
    1400:	80 93 ca 06 	sts	0x06CA, r24
}
    1404:	08 95       	ret

00001406 <PHY_SetPanId>:

/*****************************************************************************
*****************************************************************************/
void PHY_SetPanId(uint16_t panId)
{
  phyIb.request |= PHY_REQ_PANID;
    1406:	20 91 c9 06 	lds	r18, 0x06C9
    140a:	22 60       	ori	r18, 0x02	; 2
    140c:	20 93 c9 06 	sts	0x06C9, r18
  phyIb.panId = panId;
    1410:	90 93 cc 06 	sts	0x06CC, r25
    1414:	80 93 cb 06 	sts	0x06CB, r24
}
    1418:	08 95       	ret

0000141a <PHY_SetShortAddr>:

/*****************************************************************************
*****************************************************************************/
void PHY_SetShortAddr(uint16_t addr)
{
  phyIb.request |= PHY_REQ_ADDR;
    141a:	20 91 c9 06 	lds	r18, 0x06C9
    141e:	24 60       	ori	r18, 0x04	; 4
    1420:	20 93 c9 06 	sts	0x06C9, r18
  phyIb.addr = addr;
    1424:	90 93 ce 06 	sts	0x06CE, r25
    1428:	80 93 cd 06 	sts	0x06CD, r24
}
    142c:	08 95       	ret

0000142e <PHY_Busy>:

/*****************************************************************************
*****************************************************************************/
bool PHY_Busy(void)
{
  return PHY_STATE_IDLE != phyState || PHY_REQ_NONE != phyIb.request;
    142e:	80 91 c8 06 	lds	r24, 0x06C8
    1432:	81 30       	cpi	r24, 0x01	; 1
    1434:	49 f4       	brne	.+18     	; 0x1448 <PHY_Busy+0x1a>
    1436:	81 e0       	ldi	r24, 0x01	; 1
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	20 91 c9 06 	lds	r18, 0x06C9
    143e:	22 23       	and	r18, r18
    1440:	29 f4       	brne	.+10     	; 0x144c <PHY_Busy+0x1e>
    1442:	80 e0       	ldi	r24, 0x00	; 0
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	08 95       	ret
    1448:	81 e0       	ldi	r24, 0x01	; 1
    144a:	90 e0       	ldi	r25, 0x00	; 0
}
    144c:	08 95       	ret

0000144e <PHY_Sleep>:

/*****************************************************************************
*****************************************************************************/
void PHY_Sleep(void)
{
  phyTrxSetState(TRX_CMD_TRX_OFF);
    144e:	88 e0       	ldi	r24, 0x08	; 8
    1450:	0e 94 b3 09 	call	0x1366	; 0x1366 <phyTrxSetState>
  TRXPR_REG_s.slptr = 1;
    1454:	e9 e3       	ldi	r30, 0x39	; 57
    1456:	f1 e0       	ldi	r31, 0x01	; 1
    1458:	80 81       	ld	r24, Z
    145a:	82 60       	ori	r24, 0x02	; 2
    145c:	80 83       	st	Z, r24
  phyState = PHY_STATE_SLEEP;
    145e:	82 e0       	ldi	r24, 0x02	; 2
    1460:	80 93 c8 06 	sts	0x06C8, r24
}
    1464:	08 95       	ret

00001466 <PHY_Wakeup>:

/*****************************************************************************
*****************************************************************************/
void PHY_Wakeup(void)
{
  TRXPR_REG_s.slptr = 0;
    1466:	e9 e3       	ldi	r30, 0x39	; 57
    1468:	f1 e0       	ldi	r31, 0x01	; 1
    146a:	80 81       	ld	r24, Z
    146c:	8d 7f       	andi	r24, 0xFD	; 253
    146e:	80 83       	st	Z, r24
  phySetRxState();
    1470:	0e 94 be 09 	call	0x137c	; 0x137c <phySetRxState>
  phyState = PHY_STATE_IDLE;
    1474:	81 e0       	ldi	r24, 0x01	; 1
    1476:	80 93 c8 06 	sts	0x06C8, r24
}
    147a:	08 95       	ret

0000147c <PHY_DataReq>:

/*****************************************************************************
*****************************************************************************/
void PHY_DataReq(uint8_t *data, uint8_t size)
{
    147c:	1f 93       	push	r17
    147e:	cf 93       	push	r28
    1480:	df 93       	push	r29
    1482:	00 d0       	rcall	.+0      	; 0x1484 <PHY_DataReq+0x8>
    1484:	cd b7       	in	r28, 0x3d	; 61
    1486:	de b7       	in	r29, 0x3e	; 62
    1488:	18 2f       	mov	r17, r24
  phyTrxSetState(TRX_CMD_TX_ARET_ON);
    148a:	89 e1       	ldi	r24, 0x19	; 25
    148c:	69 83       	std	Y+1, r22	; 0x01
    148e:	9a 83       	std	Y+2, r25	; 0x02
    1490:	0e 94 b3 09 	call	0x1366	; 0x1366 <phyTrxSetState>

  TRX_FRAME_BUFFER(0) = size + 2/*crc*/;
    1494:	69 81       	ldd	r22, Y+1	; 0x01
    1496:	86 2f       	mov	r24, r22
    1498:	8e 5f       	subi	r24, 0xFE	; 254
    149a:	80 93 80 01 	sts	0x0180, r24
  for (uint8_t i = 0; i < size; i++)
    149e:	e1 2f       	mov	r30, r17
    14a0:	9a 81       	ldd	r25, Y+2	; 0x02
    14a2:	f9 2f       	mov	r31, r25
    14a4:	a1 e8       	ldi	r26, 0x81	; 129
    14a6:	b1 e0       	ldi	r27, 0x01	; 1
    14a8:	02 c0       	rjmp	.+4      	; 0x14ae <PHY_DataReq+0x32>
    TRX_FRAME_BUFFER(i+1) = data[i];
    14aa:	81 91       	ld	r24, Z+
    14ac:	8d 93       	st	X+, r24
void PHY_DataReq(uint8_t *data, uint8_t size)
{
  phyTrxSetState(TRX_CMD_TX_ARET_ON);

  TRX_FRAME_BUFFER(0) = size + 2/*crc*/;
  for (uint8_t i = 0; i < size; i++)
    14ae:	8e 2f       	mov	r24, r30
    14b0:	81 1b       	sub	r24, r17
    14b2:	86 17       	cp	r24, r22
    14b4:	d0 f3       	brcs	.-12     	; 0x14aa <PHY_DataReq+0x2e>
    TRX_FRAME_BUFFER(i+1) = data[i];

  TRX_STATE_REG = TRX_CMD_TX_START;
    14b6:	82 e0       	ldi	r24, 0x02	; 2
    14b8:	80 93 42 01 	sts	0x0142, r24

  phyState = PHY_STATE_TX_WAIT_END;
    14bc:	83 e0       	ldi	r24, 0x03	; 3
    14be:	80 93 c8 06 	sts	0x06C8, r24
}
    14c2:	0f 90       	pop	r0
    14c4:	0f 90       	pop	r0
    14c6:	df 91       	pop	r29
    14c8:	cf 91       	pop	r28
    14ca:	1f 91       	pop	r17
    14cc:	08 95       	ret

000014ce <__vector_63>:
#endif

/*****************************************************************************
*****************************************************************************/
ISR(TRX24_TX_END_vect)
{
    14ce:	1f 92       	push	r1
    14d0:	0f 92       	push	r0
    14d2:	0f b6       	in	r0, 0x3f	; 63
    14d4:	0f 92       	push	r0
    14d6:	0b b6       	in	r0, 0x3b	; 59
    14d8:	0f 92       	push	r0
    14da:	11 24       	eor	r1, r1
    14dc:	2f 93       	push	r18
    14de:	3f 93       	push	r19
    14e0:	4f 93       	push	r20
    14e2:	5f 93       	push	r21
    14e4:	6f 93       	push	r22
    14e6:	7f 93       	push	r23
    14e8:	8f 93       	push	r24
    14ea:	9f 93       	push	r25
    14ec:	af 93       	push	r26
    14ee:	bf 93       	push	r27
    14f0:	ef 93       	push	r30
    14f2:	ff 93       	push	r31
  if (TRX_STATUS_TX_ARET_ON == TRX_STATUS_REG_s.trxStatus)
    14f4:	80 91 41 01 	lds	r24, 0x0141
    14f8:	8f 71       	andi	r24, 0x1F	; 31
    14fa:	89 31       	cpi	r24, 0x19	; 25
    14fc:	69 f4       	brne	.+26     	; 0x1518 <__vector_63+0x4a>
  {
    //TRX_STATE_REG = TRX_CMD_PLL_ON; // Don't wait for this to complete
    phyTrxSetState(TRX_CMD_PLL_ON);
    14fe:	89 e0       	ldi	r24, 0x09	; 9
    1500:	0e 94 b3 09 	call	0x1366	; 0x1366 <phyTrxSetState>

    phyState = PHY_STATE_TX_CONFIRM;
    1504:	84 e0       	ldi	r24, 0x04	; 4
    1506:	80 93 c8 06 	sts	0x06C8, r24
    phyTxStatus = TRX_STATE_REG_s.tracStatus;
    150a:	80 91 42 01 	lds	r24, 0x0142
    150e:	82 95       	swap	r24
    1510:	86 95       	lsr	r24
    1512:	87 70       	andi	r24, 0x07	; 7
    1514:	80 93 c7 06 	sts	0x06C7, r24
  }
  else
  {
    // Auto ACK transmission completed
  }
}
    1518:	ff 91       	pop	r31
    151a:	ef 91       	pop	r30
    151c:	bf 91       	pop	r27
    151e:	af 91       	pop	r26
    1520:	9f 91       	pop	r25
    1522:	8f 91       	pop	r24
    1524:	7f 91       	pop	r23
    1526:	6f 91       	pop	r22
    1528:	5f 91       	pop	r21
    152a:	4f 91       	pop	r20
    152c:	3f 91       	pop	r19
    152e:	2f 91       	pop	r18
    1530:	0f 90       	pop	r0
    1532:	0b be       	out	0x3b, r0	; 59
    1534:	0f 90       	pop	r0
    1536:	0f be       	out	0x3f, r0	; 63
    1538:	0f 90       	pop	r0
    153a:	1f 90       	pop	r1
    153c:	18 95       	reti

0000153e <__vector_60>:
#endif

/*****************************************************************************
*****************************************************************************/
ISR(TRX24_RX_END_vect)
{
    153e:	1f 92       	push	r1
    1540:	0f 92       	push	r0
    1542:	0f b6       	in	r0, 0x3f	; 63
    1544:	0f 92       	push	r0
    1546:	11 24       	eor	r1, r1
    1548:	8f 93       	push	r24
  TRX_STATE_REG = TRX_CMD_PLL_ON; // Don't wait for this to complete
    154a:	89 e0       	ldi	r24, 0x09	; 9
    154c:	80 93 42 01 	sts	0x0142, r24
  phyRxRssi = (int8_t)PHY_ED_LEVEL_REG;
    1550:	80 91 47 01 	lds	r24, 0x0147
    1554:	80 93 c6 06 	sts	0x06C6, r24
  phyRxSize = TST_RX_LENGTH_REG;
    1558:	80 91 7b 01 	lds	r24, 0x017B
    155c:	80 93 c5 06 	sts	0x06C5, r24
  phyState = PHY_STATE_RX_IND;
    1560:	85 e0       	ldi	r24, 0x05	; 5
    1562:	80 93 c8 06 	sts	0x06C8, r24
}
    1566:	8f 91       	pop	r24
    1568:	0f 90       	pop	r0
    156a:	0f be       	out	0x3f, r0	; 63
    156c:	0f 90       	pop	r0
    156e:	1f 90       	pop	r1
    1570:	18 95       	reti

00001572 <PHY_TaskHandler>:
}

/*****************************************************************************
*****************************************************************************/
void PHY_TaskHandler(void)
{
    1572:	1f 93       	push	r17
    1574:	cf 93       	push	r28
    1576:	df 93       	push	r29
    1578:	00 d0       	rcall	.+0      	; 0x157a <PHY_TaskHandler+0x8>
    157a:	00 d0       	rcall	.+0      	; 0x157c <PHY_TaskHandler+0xa>
    157c:	0f 92       	push	r0
    157e:	cd b7       	in	r28, 0x3d	; 61
    1580:	de b7       	in	r29, 0x3e	; 62
  switch (phyState)
    1582:	80 91 c8 06 	lds	r24, 0x06C8
    1586:	84 30       	cpi	r24, 0x04	; 4
    1588:	b1 f1       	breq	.+108    	; 0x15f6 <PHY_TaskHandler+0x84>
    158a:	85 30       	cpi	r24, 0x05	; 5
    158c:	09 f4       	brne	.+2      	; 0x1590 <PHY_TaskHandler+0x1e>
    158e:	47 c0       	rjmp	.+142    	; 0x161e <PHY_TaskHandler+0xac>
    1590:	81 30       	cpi	r24, 0x01	; 1
    1592:	09 f0       	breq	.+2      	; 0x1596 <PHY_TaskHandler+0x24>
    1594:	6e c0       	rjmp	.+220    	; 0x1672 <PHY_TaskHandler+0x100>
  {
    case PHY_STATE_IDLE:
    {
      if (phyIb.request)
    1596:	10 91 c9 06 	lds	r17, 0x06C9
    159a:	11 23       	and	r17, r17
    159c:	09 f4       	brne	.+2      	; 0x15a0 <PHY_TaskHandler+0x2e>
    159e:	69 c0       	rjmp	.+210    	; 0x1672 <PHY_TaskHandler+0x100>

/*****************************************************************************
*****************************************************************************/
static void phyHandleSetRequests(void)
{
  phyTrxSetState(TRX_CMD_TRX_OFF);
    15a0:	88 e0       	ldi	r24, 0x08	; 8
    15a2:	0e 94 b3 09 	call	0x1366	; 0x1366 <phyTrxSetState>

  if (phyIb.request & PHY_REQ_CHANNEL)
    15a6:	10 ff       	sbrs	r17, 0
    15a8:	09 c0       	rjmp	.+18     	; 0x15bc <PHY_TaskHandler+0x4a>
  {
    PHY_CC_CCA_REG_s.channel = phyIb.channel;
    15aa:	90 91 ca 06 	lds	r25, 0x06CA
    15ae:	9f 71       	andi	r25, 0x1F	; 31
    15b0:	80 91 48 01 	lds	r24, 0x0148
    15b4:	80 7e       	andi	r24, 0xE0	; 224
    15b6:	89 2b       	or	r24, r25
    15b8:	80 93 48 01 	sts	0x0148, r24
  }

  if (phyIb.request & PHY_REQ_PANID)
    15bc:	80 91 c9 06 	lds	r24, 0x06C9
    15c0:	81 ff       	sbrs	r24, 1
    15c2:	08 c0       	rjmp	.+16     	; 0x15d4 <PHY_TaskHandler+0x62>
  {
    uint8_t *d = (uint8_t *)&phyIb.panId;
    PAN_ID_0_REG = d[0];
    15c4:	80 91 cb 06 	lds	r24, 0x06CB
    15c8:	80 93 62 01 	sts	0x0162, r24
    PAN_ID_1_REG = d[1];
    15cc:	80 91 cc 06 	lds	r24, 0x06CC
    15d0:	80 93 63 01 	sts	0x0163, r24
  }

  if (phyIb.request & PHY_REQ_ADDR)
    15d4:	80 91 c9 06 	lds	r24, 0x06C9
    15d8:	82 ff       	sbrs	r24, 2
    15da:	08 c0       	rjmp	.+16     	; 0x15ec <PHY_TaskHandler+0x7a>
  {
    uint8_t *d = (uint8_t *)&phyIb.addr;
    SHORT_ADDR_0_REG = d[0];
    15dc:	80 91 cd 06 	lds	r24, 0x06CD
    15e0:	80 93 60 01 	sts	0x0160, r24
    SHORT_ADDR_1_REG = d[1];
    15e4:	80 91 ce 06 	lds	r24, 0x06CE
    15e8:	80 93 61 01 	sts	0x0161, r24

#ifdef PHY_ENABLE_ENERGY_DETECTION
  if (!(phyIb.request & PHY_REQ_ED))
    phySetRxState();
#else
  phySetRxState();
    15ec:	0e 94 be 09 	call	0x137c	; 0x137c <phySetRxState>
#endif

  phyIb.request = PHY_REQ_NONE;
    15f0:	10 92 c9 06 	sts	0x06C9, r1
    15f4:	3e c0       	rjmp	.+124    	; 0x1672 <PHY_TaskHandler+0x100>
        phyHandleSetRequests();
    } break;

    case PHY_STATE_TX_CONFIRM:
    {
      PHY_DataConf(phyTxStatus);
    15f6:	80 91 c7 06 	lds	r24, 0x06C7
    15fa:	0e 94 2c 09 	call	0x1258	; 0x1258 <PHY_DataConf>

      while (TRX_CMD_PLL_ON != TRX_STATUS_REG_s.trxStatus);
    15fe:	80 91 41 01 	lds	r24, 0x0141
    1602:	8f 71       	andi	r24, 0x1F	; 31
    1604:	89 30       	cpi	r24, 0x09	; 9
    1606:	d9 f7       	brne	.-10     	; 0x15fe <PHY_TaskHandler+0x8c>
    1608:	2f c0       	rjmp	.+94     	; 0x1668 <PHY_TaskHandler+0xf6>
    case PHY_STATE_RX_IND:
    {
      PHY_DataInd_t ind;

      for (uint8_t i = 0; i < phyRxSize + 1/*lqi*/; i++)
        phyRxBuffer[i] = TRX_FRAME_BUFFER(i);
    160a:	fc 01       	movw	r30, r24
    160c:	e0 58       	subi	r30, 0x80	; 128
    160e:	fe 4f       	sbci	r31, 0xFE	; 254
    1610:	20 81       	ld	r18, Z
    1612:	80 53       	subi	r24, 0x30	; 48
    1614:	99 4f       	sbci	r25, 0xF9	; 249
    1616:	fc 01       	movw	r30, r24
    1618:	20 83       	st	Z, r18

    case PHY_STATE_RX_IND:
    {
      PHY_DataInd_t ind;

      for (uint8_t i = 0; i < phyRxSize + 1/*lqi*/; i++)
    161a:	4f 5f       	subi	r20, 0xFF	; 255
    161c:	01 c0       	rjmp	.+2      	; 0x1620 <PHY_TaskHandler+0xae>

/*****************************************************************************
*****************************************************************************/
void PHY_TaskHandler(void)
{
  switch (phyState)
    161e:	40 e0       	ldi	r20, 0x00	; 0

    case PHY_STATE_RX_IND:
    {
      PHY_DataInd_t ind;

      for (uint8_t i = 0; i < phyRxSize + 1/*lqi*/; i++)
    1620:	20 91 c5 06 	lds	r18, 0x06C5
    1624:	84 2f       	mov	r24, r20
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	28 17       	cp	r18, r24
    162c:	39 07       	cpc	r19, r25
    162e:	6c f7       	brge	.-38     	; 0x160a <PHY_TaskHandler+0x98>
        phyRxBuffer[i] = TRX_FRAME_BUFFER(i);

      ind.data = phyRxBuffer;
    1630:	80 ed       	ldi	r24, 0xD0	; 208
    1632:	96 e0       	ldi	r25, 0x06	; 6
    1634:	9a 83       	std	Y+2, r25	; 0x02
    1636:	89 83       	std	Y+1, r24	; 0x01
      ind.size = phyRxSize - 2/*crc*/;
    1638:	80 91 c5 06 	lds	r24, 0x06C5
    163c:	82 50       	subi	r24, 0x02	; 2
    163e:	8b 83       	std	Y+3, r24	; 0x03
      ind.lqi  = phyRxBuffer[phyRxSize];
    1640:	e0 91 c5 06 	lds	r30, 0x06C5
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	e0 53       	subi	r30, 0x30	; 48
    1648:	f9 4f       	sbci	r31, 0xF9	; 249
    164a:	80 81       	ld	r24, Z
    164c:	8c 83       	std	Y+4, r24	; 0x04
      ind.rssi = phyRxRssi + PHY_RSSI_BASE_VAL;
    164e:	80 91 c6 06 	lds	r24, 0x06C6
    1652:	8a 55       	subi	r24, 0x5A	; 90
    1654:	8d 83       	std	Y+5, r24	; 0x05
      PHY_DataInd(&ind);
    1656:	ce 01       	movw	r24, r28
    1658:	01 96       	adiw	r24, 0x01	; 1
    165a:	0e 94 1e 06 	call	0xc3c	; 0xc3c <PHY_DataInd>

      while (TRX_CMD_PLL_ON != TRX_STATUS_REG_s.trxStatus);
    165e:	80 91 41 01 	lds	r24, 0x0141
    1662:	8f 71       	andi	r24, 0x1F	; 31
    1664:	89 30       	cpi	r24, 0x09	; 9
    1666:	d9 f7       	brne	.-10     	; 0x165e <PHY_TaskHandler+0xec>
      phyState = PHY_STATE_IDLE;
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	80 93 c8 06 	sts	0x06C8, r24
      phySetRxState();
    166e:	0e 94 be 09 	call	0x137c	; 0x137c <phySetRxState>
#endif

    default:
      break;
  }
}
    1672:	0f 90       	pop	r0
    1674:	0f 90       	pop	r0
    1676:	0f 90       	pop	r0
    1678:	0f 90       	pop	r0
    167a:	0f 90       	pop	r0
    167c:	df 91       	pop	r29
    167e:	cf 91       	pop	r28
    1680:	1f 91       	pop	r17
    1682:	08 95       	ret

00001684 <SYS_Init>:

/*****************************************************************************
*****************************************************************************/
void SYS_Init(void)
{
  HAL_Init();
    1684:	0e 94 b1 00 	call	0x162	; 0x162 <HAL_Init>
  SYS_TimerInit();
    1688:	0e 94 a9 0b 	call	0x1752	; 0x1752 <SYS_TimerInit>
  PHY_Init();
    168c:	0e 94 c8 09 	call	0x1390	; 0x1390 <PHY_Init>
  NWK_Init();
    1690:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <NWK_Init>
}
    1694:	08 95       	ret

00001696 <SYS_TaskHandler>:

/*****************************************************************************
*****************************************************************************/
void SYS_TaskHandler(void)
{
  PHY_TaskHandler();
    1696:	0e 94 b9 0a 	call	0x1572	; 0x1572 <PHY_TaskHandler>
  NWK_TaskHandler();
    169a:	0e 94 3d 03 	call	0x67a	; 0x67a <NWK_TaskHandler>
  SYS_TimerTaskHandler();
    169e:	0e 94 05 0c 	call	0x180a	; 0x180a <SYS_TimerTaskHandler>
}
    16a2:	08 95       	ret

000016a4 <placeTimer>:
}

/*****************************************************************************
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    16a4:	0f 93       	push	r16
    16a6:	1f 93       	push	r17
    16a8:	cf 93       	push	r28
    16aa:	df 93       	push	r29
    16ac:	fc 01       	movw	r30, r24
  if (timers)
    16ae:	00 91 50 07 	lds	r16, 0x0750
    16b2:	10 91 51 07 	lds	r17, 0x0751
    16b6:	36 81       	ldd	r19, Z+6	; 0x06
    16b8:	27 81       	ldd	r18, Z+7	; 0x07
    16ba:	90 85       	ldd	r25, Z+8	; 0x08
    16bc:	81 85       	ldd	r24, Z+9	; 0x09
    16be:	01 15       	cp	r16, r1
    16c0:	11 05       	cpc	r17, r1
    16c2:	c1 f1       	breq	.+112    	; 0x1734 <placeTimer+0x90>
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;
    16c4:	43 2f       	mov	r20, r19
    16c6:	52 2f       	mov	r21, r18
    16c8:	69 2f       	mov	r22, r25
    16ca:	78 2f       	mov	r23, r24
    16cc:	e8 01       	movw	r28, r16
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    16ce:	20 e0       	ldi	r18, 0x00	; 0
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	01 c0       	rjmp	.+2      	; 0x16d6 <placeTimer+0x32>
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    16d4:	ec 01       	movw	r28, r24
    {
      if (timeout < t->timeout)
    16d6:	8a 81       	ldd	r24, Y+2	; 0x02
    16d8:	9b 81       	ldd	r25, Y+3	; 0x03
    16da:	ac 81       	ldd	r26, Y+4	; 0x04
    16dc:	bd 81       	ldd	r27, Y+5	; 0x05
    16de:	48 17       	cp	r20, r24
    16e0:	59 07       	cpc	r21, r25
    16e2:	6a 07       	cpc	r22, r26
    16e4:	7b 07       	cpc	r23, r27
    16e6:	48 f4       	brcc	.+18     	; 0x16fa <placeTimer+0x56>
      {
         t->timeout -= timeout;
    16e8:	84 1b       	sub	r24, r20
    16ea:	95 0b       	sbc	r25, r21
    16ec:	a6 0b       	sbc	r26, r22
    16ee:	b7 0b       	sbc	r27, r23
    16f0:	8a 83       	std	Y+2, r24	; 0x02
    16f2:	9b 83       	std	Y+3, r25	; 0x03
    16f4:	ac 83       	std	Y+4, r26	; 0x04
    16f6:	bd 83       	std	Y+5, r27	; 0x05
         break;
    16f8:	09 c0       	rjmp	.+18     	; 0x170c <placeTimer+0x68>
      }
      else
        timeout -= t->timeout;
    16fa:	48 1b       	sub	r20, r24
    16fc:	59 0b       	sbc	r21, r25
    16fe:	6a 0b       	sbc	r22, r26
    1700:	7b 0b       	sbc	r23, r27
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    1702:	88 81       	ld	r24, Y
    1704:	99 81       	ldd	r25, Y+1	; 0x01
    1706:	9e 01       	movw	r18, r28
    1708:	00 97       	sbiw	r24, 0x00	; 0
    170a:	21 f7       	brne	.-56     	; 0x16d4 <placeTimer+0x30>
        timeout -= t->timeout;

      prev = t;
    }

    timer->timeout = timeout;
    170c:	42 83       	std	Z+2, r20	; 0x02
    170e:	53 83       	std	Z+3, r21	; 0x03
    1710:	64 83       	std	Z+4, r22	; 0x04
    1712:	75 83       	std	Z+5, r23	; 0x05

    if (prev)
    1714:	21 15       	cp	r18, r1
    1716:	31 05       	cpc	r19, r1
    1718:	51 f0       	breq	.+20     	; 0x172e <placeTimer+0x8a>
    {
      timer->next = prev->next;
    171a:	d9 01       	movw	r26, r18
    171c:	8d 91       	ld	r24, X+
    171e:	9c 91       	ld	r25, X
    1720:	11 97       	sbiw	r26, 0x01	; 1
    1722:	91 83       	std	Z+1, r25	; 0x01
    1724:	80 83       	st	Z, r24
      prev->next = timer;
    1726:	11 96       	adiw	r26, 0x01	; 1
    1728:	fc 93       	st	X, r31
    172a:	ee 93       	st	-X, r30
    172c:	0d c0       	rjmp	.+26     	; 0x1748 <placeTimer+0xa4>
    }
    else
    {
      timer->next = timers;
    172e:	11 83       	std	Z+1, r17	; 0x01
    1730:	00 83       	st	Z, r16
    1732:	06 c0       	rjmp	.+12     	; 0x1740 <placeTimer+0x9c>
      timers = timer;
    }
  }
  else
  {
    timer->next = NULL;
    1734:	11 82       	std	Z+1, r1	; 0x01
    1736:	10 82       	st	Z, r1
    timer->timeout = timer->interval;
    1738:	32 83       	std	Z+2, r19	; 0x02
    173a:	23 83       	std	Z+3, r18	; 0x03
    173c:	94 83       	std	Z+4, r25	; 0x04
    173e:	85 83       	std	Z+5, r24	; 0x05
    timers = timer;
    1740:	f0 93 51 07 	sts	0x0751, r31
    1744:	e0 93 50 07 	sts	0x0750, r30
  }
}
    1748:	df 91       	pop	r29
    174a:	cf 91       	pop	r28
    174c:	1f 91       	pop	r17
    174e:	0f 91       	pop	r16
    1750:	08 95       	ret

00001752 <SYS_TimerInit>:

/*****************************************************************************
*****************************************************************************/
void SYS_TimerInit(void)
{
  timers = NULL;
    1752:	10 92 51 07 	sts	0x0751, r1
    1756:	10 92 50 07 	sts	0x0750, r1
}
    175a:	08 95       	ret

0000175c <SYS_TimerStop>:
}

/*****************************************************************************
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
    175c:	cf 93       	push	r28
    175e:	df 93       	push	r29
    1760:	ec 01       	movw	r28, r24
  SYS_Timer_t *prev = NULL;

  for (SYS_Timer_t *t = timers; t; t = t->next)
    1762:	e0 91 50 07 	lds	r30, 0x0750
    1766:	f0 91 51 07 	lds	r31, 0x0751

/*****************************************************************************
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
  SYS_Timer_t *prev = NULL;
    176a:	a0 e0       	ldi	r26, 0x00	; 0
    176c:	b0 e0       	ldi	r27, 0x00	; 0

  for (SYS_Timer_t *t = timers; t; t = t->next)
    176e:	2a c0       	rjmp	.+84     	; 0x17c4 <SYS_TimerStop+0x68>
  {
    if (t == timer)
    1770:	ec 17       	cp	r30, r28
    1772:	fd 07       	cpc	r31, r29
    1774:	11 f5       	brne	.+68     	; 0x17ba <SYS_TimerStop+0x5e>
    1776:	80 81       	ld	r24, Z
    1778:	91 81       	ldd	r25, Z+1	; 0x01
    {
      if (prev)
    177a:	10 97       	sbiw	r26, 0x00	; 0
    177c:	21 f0       	breq	.+8      	; 0x1786 <SYS_TimerStop+0x2a>
        prev->next = t->next;
    177e:	11 96       	adiw	r26, 0x01	; 1
    1780:	9c 93       	st	X, r25
    1782:	8e 93       	st	-X, r24
    1784:	04 c0       	rjmp	.+8      	; 0x178e <SYS_TimerStop+0x32>
      else
        timers = t->next;
    1786:	90 93 51 07 	sts	0x0751, r25
    178a:	80 93 50 07 	sts	0x0750, r24

      if (t->next)
    178e:	01 90       	ld	r0, Z+
    1790:	f0 81       	ld	r31, Z
    1792:	e0 2d       	mov	r30, r0
    1794:	30 97       	sbiw	r30, 0x00	; 0
    1796:	c1 f0       	breq	.+48     	; 0x17c8 <SYS_TimerStop+0x6c>
        t->next->timeout += timer->timeout;
    1798:	82 81       	ldd	r24, Z+2	; 0x02
    179a:	93 81       	ldd	r25, Z+3	; 0x03
    179c:	a4 81       	ldd	r26, Z+4	; 0x04
    179e:	b5 81       	ldd	r27, Z+5	; 0x05
    17a0:	4a 81       	ldd	r20, Y+2	; 0x02
    17a2:	5b 81       	ldd	r21, Y+3	; 0x03
    17a4:	6c 81       	ldd	r22, Y+4	; 0x04
    17a6:	7d 81       	ldd	r23, Y+5	; 0x05
    17a8:	84 0f       	add	r24, r20
    17aa:	95 1f       	adc	r25, r21
    17ac:	a6 1f       	adc	r26, r22
    17ae:	b7 1f       	adc	r27, r23
    17b0:	82 83       	std	Z+2, r24	; 0x02
    17b2:	93 83       	std	Z+3, r25	; 0x03
    17b4:	a4 83       	std	Z+4, r26	; 0x04
    17b6:	b5 83       	std	Z+5, r27	; 0x05
    17b8:	07 c0       	rjmp	.+14     	; 0x17c8 <SYS_TimerStop+0x6c>
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
  SYS_Timer_t *prev = NULL;

  for (SYS_Timer_t *t = timers; t; t = t->next)
    17ba:	90 81       	ld	r25, Z
    17bc:	81 81       	ldd	r24, Z+1	; 0x01
    17be:	df 01       	movw	r26, r30
    17c0:	e9 2f       	mov	r30, r25
    17c2:	f8 2f       	mov	r31, r24
    17c4:	30 97       	sbiw	r30, 0x00	; 0
    17c6:	a1 f6       	brne	.-88     	; 0x1770 <SYS_TimerStop+0x14>

      break;
    }
    prev = t;
  }
}
    17c8:	df 91       	pop	r29
    17ca:	cf 91       	pop	r28
    17cc:	08 95       	ret

000017ce <SYS_TimerStarted>:

/*****************************************************************************
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    17ce:	e0 91 50 07 	lds	r30, 0x0750
    17d2:	f0 91 51 07 	lds	r31, 0x0751
    17d6:	06 c0       	rjmp	.+12     	; 0x17e4 <SYS_TimerStarted+0x16>
    if (t == timer)
    17d8:	e8 17       	cp	r30, r24
    17da:	f9 07       	cpc	r31, r25
    17dc:	39 f0       	breq	.+14     	; 0x17ec <SYS_TimerStarted+0x1e>

/*****************************************************************************
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    17de:	01 90       	ld	r0, Z+
    17e0:	f0 81       	ld	r31, Z
    17e2:	e0 2d       	mov	r30, r0
    17e4:	30 97       	sbiw	r30, 0x00	; 0
    17e6:	c1 f7       	brne	.-16     	; 0x17d8 <SYS_TimerStarted+0xa>
    if (t == timer)
      return true;
  return false;
    17e8:	80 e0       	ldi	r24, 0x00	; 0
    17ea:	08 95       	ret
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    if (t == timer)
      return true;
    17ec:	81 e0       	ldi	r24, 0x01	; 1
  return false;
}
    17ee:	08 95       	ret

000017f0 <SYS_TimerStart>:
}

/*****************************************************************************
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
    17f0:	cf 93       	push	r28
    17f2:	df 93       	push	r29
    17f4:	ec 01       	movw	r28, r24
  if (!SYS_TimerStarted(timer))
    17f6:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <SYS_TimerStarted>
    17fa:	88 23       	and	r24, r24
    17fc:	19 f4       	brne	.+6      	; 0x1804 <SYS_TimerStart+0x14>
    placeTimer(timer);
    17fe:	ce 01       	movw	r24, r28
    1800:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <placeTimer>
}
    1804:	df 91       	pop	r29
    1806:	cf 91       	pop	r28
    1808:	08 95       	ret

0000180a <SYS_TimerTaskHandler>:
}

/*****************************************************************************
*****************************************************************************/
void SYS_TimerTaskHandler(void)
{
    180a:	cf 92       	push	r12
    180c:	df 92       	push	r13
    180e:	ef 92       	push	r14
    1810:	ff 92       	push	r15
    1812:	cf 93       	push	r28
    1814:	df 93       	push	r29
  uint32_t elapsed;
  uint8_t cnt;

  if (0 == halTimerIrqCount)
    1816:	80 91 b0 07 	lds	r24, 0x07B0
    181a:	88 23       	and	r24, r24
    181c:	09 f4       	brne	.+2      	; 0x1820 <SYS_TimerTaskHandler+0x16>
    181e:	3e c0       	rjmp	.+124    	; 0x189c <SYS_TimerTaskHandler+0x92>
    return;

  ATOMIC_SECTION_ENTER
    1820:	8f b7       	in	r24, 0x3f	; 63
    1822:	f8 94       	cli
    cnt = halTimerIrqCount;
    1824:	60 91 b0 07 	lds	r22, 0x07B0
    halTimerIrqCount = 0;
    1828:	10 92 b0 07 	sts	0x07B0, r1
  ATOMIC_SECTION_LEAVE
    182c:	8f bf       	out	0x3f, r24	; 63

  elapsed = cnt * HAL_TIMER_INTERVAL;
    182e:	70 e0       	ldi	r23, 0x00	; 0
    1830:	80 e0       	ldi	r24, 0x00	; 0
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	2a e0       	ldi	r18, 0x0A	; 10
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	40 e0       	ldi	r20, 0x00	; 0
    183a:	50 e0       	ldi	r21, 0x00	; 0
    183c:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <__mulsi3>
    1840:	6b 01       	movw	r12, r22
    1842:	7c 01       	movw	r14, r24

  while (timers && (timers->timeout <= elapsed))
    1844:	14 c0       	rjmp	.+40     	; 0x186e <SYS_TimerTaskHandler+0x64>
  {
    SYS_Timer_t *timer = timers;

    elapsed -= timers->timeout;
    1846:	c8 1a       	sub	r12, r24
    1848:	d9 0a       	sbc	r13, r25
    184a:	ea 0a       	sbc	r14, r26
    184c:	fb 0a       	sbc	r15, r27
    timers = timers->next;
    184e:	88 81       	ld	r24, Y
    1850:	99 81       	ldd	r25, Y+1	; 0x01
    1852:	90 93 51 07 	sts	0x0751, r25
    1856:	80 93 50 07 	sts	0x0750, r24
    if (SYS_TIMER_PERIODIC_MODE == timer->mode)
    185a:	8a 85       	ldd	r24, Y+10	; 0x0a
    185c:	81 30       	cpi	r24, 0x01	; 1
    185e:	19 f4       	brne	.+6      	; 0x1866 <SYS_TimerTaskHandler+0x5c>
      placeTimer(timer);
    1860:	ce 01       	movw	r24, r28
    1862:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <placeTimer>
    timer->handler(timer);
    1866:	eb 85       	ldd	r30, Y+11	; 0x0b
    1868:	fc 85       	ldd	r31, Y+12	; 0x0c
    186a:	ce 01       	movw	r24, r28
    186c:	09 95       	icall
    halTimerIrqCount = 0;
  ATOMIC_SECTION_LEAVE

  elapsed = cnt * HAL_TIMER_INTERVAL;

  while (timers && (timers->timeout <= elapsed))
    186e:	c0 91 50 07 	lds	r28, 0x0750
    1872:	d0 91 51 07 	lds	r29, 0x0751
    1876:	20 97       	sbiw	r28, 0x00	; 0
    1878:	89 f0       	breq	.+34     	; 0x189c <SYS_TimerTaskHandler+0x92>
    187a:	8a 81       	ldd	r24, Y+2	; 0x02
    187c:	9b 81       	ldd	r25, Y+3	; 0x03
    187e:	ac 81       	ldd	r26, Y+4	; 0x04
    1880:	bd 81       	ldd	r27, Y+5	; 0x05
    1882:	c8 16       	cp	r12, r24
    1884:	d9 06       	cpc	r13, r25
    1886:	ea 06       	cpc	r14, r26
    1888:	fb 06       	cpc	r15, r27
    188a:	e8 f6       	brcc	.-70     	; 0x1846 <SYS_TimerTaskHandler+0x3c>
      placeTimer(timer);
    timer->handler(timer);
  }

  if (timers)
    timers->timeout -= elapsed;
    188c:	8c 19       	sub	r24, r12
    188e:	9d 09       	sbc	r25, r13
    1890:	ae 09       	sbc	r26, r14
    1892:	bf 09       	sbc	r27, r15
    1894:	8a 83       	std	Y+2, r24	; 0x02
    1896:	9b 83       	std	Y+3, r25	; 0x03
    1898:	ac 83       	std	Y+4, r26	; 0x04
    189a:	bd 83       	std	Y+5, r27	; 0x05
}
    189c:	df 91       	pop	r29
    189e:	cf 91       	pop	r28
    18a0:	ff 90       	pop	r15
    18a2:	ef 90       	pop	r14
    18a4:	df 90       	pop	r13
    18a6:	cf 90       	pop	r12
    18a8:	08 95       	ret

000018aa <appNetworkStatusTimerHandler>:
#define __INVERT_ON_OFF

#include "hal.h"
#include "halGpio.h"

HAL_GPIO_PIN(LED0, B, 4);
    18aa:	85 b1       	in	r24, 0x05	; 5
    18ac:	90 e1       	ldi	r25, 0x10	; 16
    18ae:	89 27       	eor	r24, r25
    18b0:	85 b9       	out	0x05, r24	; 5
static void appNetworkStatusTimerHandler(SYS_Timer_t *timer)
{
	
  ledToggle(LED_NETWORK);
  (void)timer;
}
    18b2:	08 95       	ret

000018b4 <appDataSendingTimerHandler>:

/*****************************************************************************
*****************************************************************************/
static void appDataSendingTimerHandler(SYS_Timer_t *timer)
{
  if (APP_STATE_WAIT_SEND_TIMER == appState)
    18b4:	80 91 52 07 	lds	r24, 0x0752
    18b8:	84 30       	cpi	r24, 0x04	; 4
    18ba:	21 f4       	brne	.+8      	; 0x18c4 <appDataSendingTimerHandler+0x10>
    appState = APP_STATE_SEND;
    18bc:	81 e0       	ldi	r24, 0x01	; 1
    18be:	80 93 52 07 	sts	0x0752, r24
    18c2:	08 95       	ret
  else
    SYS_TimerStart(&appDataSendingTimer);
    18c4:	85 e9       	ldi	r24, 0x95	; 149
    18c6:	97 e0       	ldi	r25, 0x07	; 7
    18c8:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <SYS_TimerStart>
    18cc:	08 95       	ret

000018ce <appDataInd>:
}

/*****************************************************************************
*****************************************************************************/
static bool appDataInd(NWK_DataInd_t *ind)
{
    18ce:	df 92       	push	r13
    18d0:	ef 92       	push	r14
    18d2:	ff 92       	push	r15
    18d4:	0f 93       	push	r16
    18d6:	1f 93       	push	r17
    18d8:	cf 93       	push	r28
    18da:	df 93       	push	r29
    18dc:	fc 01       	movw	r30, r24
  AppMessage_t *msg = (AppMessage_t *)ind->data;
    18de:	a5 81       	ldd	r26, Z+5	; 0x05
    18e0:	b6 81       	ldd	r27, Z+6	; 0x06
    18e2:	85 b1       	in	r24, 0x05	; 5
    18e4:	90 e1       	ldi	r25, 0x10	; 16
    18e6:	89 27       	eor	r24, r25
    18e8:	85 b9       	out	0x05, r24	; 5

  ledToggle(LED_DATA);

  msg->lqi = ind->lqi;
    18ea:	80 85       	ldd	r24, Z+8	; 0x08
    18ec:	59 96       	adiw	r26, 0x19	; 25
    18ee:	8c 93       	st	X, r24
    18f0:	59 97       	sbiw	r26, 0x19	; 25
  msg->rssi = ind->rssi;
    18f2:	81 85       	ldd	r24, Z+9	; 0x09
    18f4:	5a 96       	adiw	r26, 0x1a	; 26
    18f6:	8c 93       	st	X, r24

  appSendMessage(ind->data, ind->size);
    18f8:	e5 80       	ldd	r14, Z+5	; 0x05
    18fa:	c6 81       	ldd	r28, Z+6	; 0x06
    18fc:	d7 80       	ldd	r13, Z+7	; 0x07
*****************************************************************************/
static void appSendMessage(uint8_t *data, uint8_t size)
{
  uint8_t cs = 0;

  HAL_UartWriteByte(0x10);
    18fe:	80 e1       	ldi	r24, 0x10	; 16
    1900:	0e 94 df 01 	call	0x3be	; 0x3be <HAL_UartWriteByte>
  HAL_UartWriteByte(0x02);
    1904:	82 e0       	ldi	r24, 0x02	; 2
    1906:	0e 94 df 01 	call	0x3be	; 0x3be <HAL_UartWriteByte>
    190a:	0e 2d       	mov	r16, r14
    190c:	1c 2f       	mov	r17, r28

/*****************************************************************************
*****************************************************************************/
static void appSendMessage(uint8_t *data, uint8_t size)
{
  uint8_t cs = 0;
    190e:	ff 24       	eor	r15, r15
    1910:	0f c0       	rjmp	.+30     	; 0x1930 <appDataInd+0x62>
  HAL_UartWriteByte(cs);
}

/*****************************************************************************
*****************************************************************************/
static bool appDataInd(NWK_DataInd_t *ind)
    1912:	e8 01       	movw	r28, r16
  HAL_UartWriteByte(0x10);
  HAL_UartWriteByte(0x02);

  for (uint8_t i = 0; i < size; i++)
  {
    if (data[i] == 0x10)
    1914:	88 81       	ld	r24, Y
    1916:	80 31       	cpi	r24, 0x10	; 16
    1918:	21 f4       	brne	.+8      	; 0x1922 <appDataInd+0x54>
    {
      HAL_UartWriteByte(0x10);
    191a:	0e 94 df 01 	call	0x3be	; 0x3be <HAL_UartWriteByte>
      cs += 0x10;
    191e:	80 e1       	ldi	r24, 0x10	; 16
    1920:	f8 0e       	add	r15, r24
    }
    HAL_UartWriteByte(data[i]);
    1922:	f8 01       	movw	r30, r16
    1924:	81 91       	ld	r24, Z+
    1926:	8f 01       	movw	r16, r30
    1928:	0e 94 df 01 	call	0x3be	; 0x3be <HAL_UartWriteByte>
    cs += data[i];
    192c:	88 81       	ld	r24, Y
    192e:	f8 0e       	add	r15, r24
  uint8_t cs = 0;

  HAL_UartWriteByte(0x10);
  HAL_UartWriteByte(0x02);

  for (uint8_t i = 0; i < size; i++)
    1930:	80 2f       	mov	r24, r16
    1932:	8e 19       	sub	r24, r14
    1934:	8d 15       	cp	r24, r13
    1936:	68 f3       	brcs	.-38     	; 0x1912 <appDataInd+0x44>
    }
    HAL_UartWriteByte(data[i]);
    cs += data[i];
  }

  HAL_UartWriteByte(0x10);
    1938:	80 e1       	ldi	r24, 0x10	; 16
    193a:	0e 94 df 01 	call	0x3be	; 0x3be <HAL_UartWriteByte>
  HAL_UartWriteByte(0x03);
    193e:	83 e0       	ldi	r24, 0x03	; 3
    1940:	0e 94 df 01 	call	0x3be	; 0x3be <HAL_UartWriteByte>
  cs += 0x10 + 0x02 + 0x10 + 0x03;

  HAL_UartWriteByte(cs);
    1944:	8f 2d       	mov	r24, r15
    1946:	8b 5d       	subi	r24, 0xDB	; 219
    1948:	0e 94 df 01 	call	0x3be	; 0x3be <HAL_UartWriteByte>
  msg->lqi = ind->lqi;
  msg->rssi = ind->rssi;

  appSendMessage(ind->data, ind->size);
  return true;
}
    194c:	81 e0       	ldi	r24, 0x01	; 1
    194e:	df 91       	pop	r29
    1950:	cf 91       	pop	r28
    1952:	1f 91       	pop	r17
    1954:	0f 91       	pop	r16
    1956:	ff 90       	pop	r15
    1958:	ef 90       	pop	r14
    195a:	df 90       	pop	r13
    195c:	08 95       	ret

0000195e <appDataConf>:
    195e:	2c 98       	cbi	0x05, 4	; 5
#if APP_ROUTER || APP_ENDDEVICE
static void appDataConf(NWK_DataReq_t *req)
{
  ledOff(LED_DATA);

  if (NWK_SUCCESS_STATUS == req->status)
    1960:	fc 01       	movw	r30, r24
    1962:	87 85       	ldd	r24, Z+15	; 0x0f
    1964:	88 23       	and	r24, r24
    1966:	c9 f4       	brne	.+50     	; 0x199a <appDataConf+0x3c>
  {
	HAL_UartWriteByte('s');
    1968:	83 e7       	ldi	r24, 0x73	; 115
    196a:	0e 94 df 01 	call	0x3be	; 0x3be <HAL_UartWriteByte>
	HAL_UartWriteByte('e');
    196e:	85 e6       	ldi	r24, 0x65	; 101
    1970:	0e 94 df 01 	call	0x3be	; 0x3be <HAL_UartWriteByte>
	HAL_UartWriteByte('n');
    1974:	8e e6       	ldi	r24, 0x6E	; 110
    1976:	0e 94 df 01 	call	0x3be	; 0x3be <HAL_UartWriteByte>
	HAL_UartWriteByte('d');
    197a:	84 e6       	ldi	r24, 0x64	; 100
    197c:	0e 94 df 01 	call	0x3be	; 0x3be <HAL_UartWriteByte>
	
	
    if (!appNetworkStatus)
    1980:	80 91 a2 07 	lds	r24, 0x07A2
    1984:	88 23       	and	r24, r24
    1986:	39 f5       	brne	.+78     	; 0x19d6 <appDataConf+0x78>
    1988:	2c 9a       	sbi	0x05, 4	; 5
    {
      ledOn(LED_NETWORK);
      SYS_TimerStop(&appNetworkStatusTimer);
    198a:	83 ea       	ldi	r24, 0xA3	; 163
    198c:	97 e0       	ldi	r25, 0x07	; 7
    198e:	0e 94 ae 0b 	call	0x175c	; 0x175c <SYS_TimerStop>
      appNetworkStatus = true;
    1992:	81 e0       	ldi	r24, 0x01	; 1
    1994:	80 93 a2 07 	sts	0x07A2, r24
    1998:	1e c0       	rjmp	.+60     	; 0x19d6 <appDataConf+0x78>
    }
  }
  else
  {
    msg.sensors.light++;
    199a:	80 91 78 07 	lds	r24, 0x0778
    199e:	90 91 79 07 	lds	r25, 0x0779
    19a2:	a0 91 7a 07 	lds	r26, 0x077A
    19a6:	b0 91 7b 07 	lds	r27, 0x077B
    19aa:	01 96       	adiw	r24, 0x01	; 1
    19ac:	a1 1d       	adc	r26, r1
    19ae:	b1 1d       	adc	r27, r1
    19b0:	80 93 78 07 	sts	0x0778, r24
    19b4:	90 93 79 07 	sts	0x0779, r25
    19b8:	a0 93 7a 07 	sts	0x077A, r26
    19bc:	b0 93 7b 07 	sts	0x077B, r27

    if (appNetworkStatus)
    19c0:	80 91 a2 07 	lds	r24, 0x07A2
    19c4:	88 23       	and	r24, r24
    19c6:	39 f0       	breq	.+14     	; 0x19d6 <appDataConf+0x78>
    19c8:	2c 98       	cbi	0x05, 4	; 5
    {
      ledOff(LED_NETWORK);
      SYS_TimerStart(&appNetworkStatusTimer);
    19ca:	83 ea       	ldi	r24, 0xA3	; 163
    19cc:	97 e0       	ldi	r25, 0x07	; 7
    19ce:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <SYS_TimerStart>
      appNetworkStatus = false;
    19d2:	10 92 a2 07 	sts	0x07A2, r1
    }
  }

  appState = APP_STATE_SENDING_DONE;
    19d6:	83 e0       	ldi	r24, 0x03	; 3
    19d8:	80 93 52 07 	sts	0x0752, r24
}
    19dc:	08 95       	ret

000019de <HAL_UartBytesReceived>:
static SYS_Timer_t appDataSendingTimer;

/*****************************************************************************
*****************************************************************************/
void HAL_UartBytesReceived(uint16_t bytes)
{
    19de:	0f 93       	push	r16
    19e0:	1f 93       	push	r17
    19e2:	cf 93       	push	r28
    19e4:	df 93       	push	r29
    19e6:	8c 01       	movw	r16, r24
  for (uint16_t i = 0; i < bytes; i++)
    19e8:	c0 e0       	ldi	r28, 0x00	; 0
    19ea:	d0 e0       	ldi	r29, 0x00	; 0
    19ec:	03 c0       	rjmp	.+6      	; 0x19f4 <HAL_UartBytesReceived+0x16>
    HAL_UartReadByte();
    19ee:	0e 94 09 02 	call	0x412	; 0x412 <HAL_UartReadByte>

/*****************************************************************************
*****************************************************************************/
void HAL_UartBytesReceived(uint16_t bytes)
{
  for (uint16_t i = 0; i < bytes; i++)
    19f2:	21 96       	adiw	r28, 0x01	; 1
    19f4:	c0 17       	cp	r28, r16
    19f6:	d1 07       	cpc	r29, r17
    19f8:	d1 f7       	brne	.-12     	; 0x19ee <HAL_UartBytesReceived+0x10>
    19fa:	85 b1       	in	r24, 0x05	; 5
    19fc:	90 e1       	ldi	r25, 0x10	; 16
    19fe:	89 27       	eor	r24, r25
    1a00:	85 b9       	out	0x05, r24	; 5
    HAL_UartReadByte();
  ledToggle(2);
}
    1a02:	df 91       	pop	r29
    1a04:	cf 91       	pop	r28
    1a06:	1f 91       	pop	r17
    1a08:	0f 91       	pop	r16
    1a0a:	08 95       	ret

00001a0c <main>:

/*****************************************************************************
*****************************************************************************/
int main(void)
{
  SYS_Init();
    1a0c:	0e 94 42 0b 	call	0x1684	; 0x1684 <SYS_Init>
 
  HAL_UartInit(38400);
    1a10:	60 e0       	ldi	r22, 0x00	; 0
    1a12:	76 e9       	ldi	r23, 0x96	; 150
    1a14:	80 e0       	ldi	r24, 0x00	; 0
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	0e 94 81 01 	call	0x302	; 0x302 <HAL_UartInit>
      ledsClose();

      PHY_SetRxState(false);

      HAL_Sleep(APP_SENDING_INTERVAL);
      appState = APP_STATE_WAKEUP;
    1a1c:	27 e0       	ldi	r18, 0x07	; 7
    1a1e:	f2 2e       	mov	r15, r18
    case APP_STATE_PREPARE_TO_SLEEP:
    {
      if (!NWK_Busy())
      {
        NWK_SleepReq();
        appState = APP_STATE_SLEEP;
    1a20:	d6 e0       	ldi	r29, 0x06	; 6
*****************************************************************************/
static void appInit(void)
{
  msg.messageType          = 1;
  msg.nodeType             = APP_NODE_TYPE;
  msg.extAddr              = APP_ADDR;
    1a22:	05 e5       	ldi	r16, 0x55	; 85
    1a24:	17 e0       	ldi	r17, 0x07	; 7

  NWK_OpenEndpoint(APP_ENDPOINT, appDataInd);

  appDataSendingTimer.interval = APP_SENDING_INTERVAL;
  appDataSendingTimer.mode = SYS_TIMER_INTERVAL_MODE;
  appDataSendingTimer.handler = appDataSendingTimerHandler;
    1a26:	3a e5       	ldi	r19, 0x5A	; 90
    1a28:	c3 2e       	mov	r12, r19
    1a2a:	3c e0       	ldi	r19, 0x0C	; 12
    1a2c:	d3 2e       	mov	r13, r19

#if APP_ROUTER || APP_ENDDEVICE
  appNetworkStatus = false;
  appNetworkStatusTimer.interval = 500;
  appNetworkStatusTimer.mode = SYS_TIMER_PERIODIC_MODE;
  appNetworkStatusTimer.handler = appNetworkStatusTimerHandler;
    1a2e:	45 e5       	ldi	r20, 0x55	; 85
    1a30:	a4 2e       	mov	r10, r20
    1a32:	4c e0       	ldi	r20, 0x0C	; 12
    1a34:	b4 2e       	mov	r11, r20
#else
  nwkDataReq.dstAddr = 0;
  nwkDataReq.dstEndpoint = APP_ENDPOINT;
  nwkDataReq.srcEndpoint = APP_ENDPOINT;
  nwkDataReq.options = NWK_OPT_ACK_REQUEST | NWK_OPT_ENABLE_SECURITY;
  nwkDataReq.data = (uint8_t *)&msg;
    1a36:	5e ef       	ldi	r21, 0xFE	; 254
    1a38:	85 2e       	mov	r8, r21
    1a3a:	5f ef       	ldi	r21, 0xFF	; 255
    1a3c:	95 2e       	mov	r9, r21
    1a3e:	80 0e       	add	r8, r16
    1a40:	91 1e       	adc	r9, r17
  nwkDataReq.size = sizeof(msg);
  nwkDataReq.confirm = appDataConf;
    1a42:	ef ea       	ldi	r30, 0xAF	; 175
    1a44:	6e 2e       	mov	r6, r30
    1a46:	ec e0       	ldi	r30, 0x0C	; 12
    1a48:	7e 2e       	mov	r7, r30
  OTA_ClientInit();
#endif

  while (1)
  {
    SYS_TaskHandler();
    1a4a:	0e 94 4b 0b 	call	0x1696	; 0x1696 <SYS_TaskHandler>
    HAL_UartTaskHandler();
    1a4e:	0e 94 ab 02 	call	0x556	; 0x556 <HAL_UartTaskHandler>

/*****************************************************************************
*****************************************************************************/
static void APP_TaskHandler(void)
{
  switch (appState)
    1a52:	c0 91 52 07 	lds	r28, 0x0752
    1a56:	c3 30       	cpi	r28, 0x03	; 3
    1a58:	09 f4       	brne	.+2      	; 0x1a5c <main+0x50>
    1a5a:	02 c1       	rjmp	.+516    	; 0x1c60 <main+0x254>
    1a5c:	c4 30       	cpi	r28, 0x04	; 4
    1a5e:	28 f4       	brcc	.+10     	; 0x1a6a <main+0x5e>
    1a60:	cc 23       	and	r28, r28
    1a62:	61 f0       	breq	.+24     	; 0x1a7c <main+0x70>
    1a64:	c1 30       	cpi	r28, 0x01	; 1
    1a66:	89 f7       	brne	.-30     	; 0x1a4a <main+0x3e>
    1a68:	b6 c0       	rjmp	.+364    	; 0x1bd6 <main+0x1ca>
    1a6a:	c6 30       	cpi	r28, 0x06	; 6
    1a6c:	09 f4       	brne	.+2      	; 0x1a70 <main+0x64>
    1a6e:	0a c1       	rjmp	.+532    	; 0x1c84 <main+0x278>
    1a70:	c7 30       	cpi	r28, 0x07	; 7
    1a72:	09 f4       	brne	.+2      	; 0x1a76 <main+0x6a>
    1a74:	15 c1       	rjmp	.+554    	; 0x1ca0 <main+0x294>
    1a76:	c5 30       	cpi	r28, 0x05	; 5
    1a78:	41 f7       	brne	.-48     	; 0x1a4a <main+0x3e>
    1a7a:	fa c0       	rjmp	.+500    	; 0x1c70 <main+0x264>

/*****************************************************************************
*****************************************************************************/
static void appInit(void)
{
  msg.messageType          = 1;
    1a7c:	21 e0       	ldi	r18, 0x01	; 1
    1a7e:	20 93 53 07 	sts	0x0753, r18
  msg.nodeType             = APP_NODE_TYPE;
    1a82:	20 93 54 07 	sts	0x0754, r18
  msg.extAddr              = APP_ADDR;
    1a86:	10 92 55 07 	sts	0x0755, r1
    1a8a:	80 e4       	ldi	r24, 0x40	; 64
    1a8c:	f8 01       	movw	r30, r16
    1a8e:	81 83       	std	Z+1, r24	; 0x01
    1a90:	12 82       	std	Z+2, r1	; 0x02
    1a92:	13 82       	std	Z+3, r1	; 0x03
    1a94:	14 82       	std	Z+4, r1	; 0x04
    1a96:	15 82       	std	Z+5, r1	; 0x05
    1a98:	16 82       	std	Z+6, r1	; 0x06
    1a9a:	17 82       	std	Z+7, r1	; 0x07
  msg.shortAddr            = APP_ADDR;
    1a9c:	80 e0       	ldi	r24, 0x00	; 0
    1a9e:	90 e4       	ldi	r25, 0x40	; 64
    1aa0:	90 93 5e 07 	sts	0x075E, r25
    1aa4:	80 93 5d 07 	sts	0x075D, r24
  msg.softVersion          = 0x01010100;
    1aa8:	80 e0       	ldi	r24, 0x00	; 0
    1aaa:	91 e0       	ldi	r25, 0x01	; 1
    1aac:	a1 e0       	ldi	r26, 0x01	; 1
    1aae:	b1 e0       	ldi	r27, 0x01	; 1
    1ab0:	80 93 5f 07 	sts	0x075F, r24
    1ab4:	90 93 60 07 	sts	0x0760, r25
    1ab8:	a0 93 61 07 	sts	0x0761, r26
    1abc:	b0 93 62 07 	sts	0x0762, r27
  msg.channelMask          = (1L << APP_CHANNEL);
    1ac0:	80 e0       	ldi	r24, 0x00	; 0
    1ac2:	90 e8       	ldi	r25, 0x80	; 128
    1ac4:	a0 e0       	ldi	r26, 0x00	; 0
    1ac6:	b0 e0       	ldi	r27, 0x00	; 0
    1ac8:	80 93 63 07 	sts	0x0763, r24
    1acc:	90 93 64 07 	sts	0x0764, r25
    1ad0:	a0 93 65 07 	sts	0x0765, r26
    1ad4:	b0 93 66 07 	sts	0x0766, r27
  msg.panId                = APP_PANID;
    1ad8:	84 e3       	ldi	r24, 0x34	; 52
    1ada:	92 e1       	ldi	r25, 0x12	; 18
    1adc:	90 93 68 07 	sts	0x0768, r25
    1ae0:	80 93 67 07 	sts	0x0767, r24
  msg.workingChannel       = APP_CHANNEL;
    1ae4:	8f e0       	ldi	r24, 0x0F	; 15
    1ae6:	80 93 69 07 	sts	0x0769, r24
  msg.parentShortAddr      = 0;
    1aea:	10 92 6b 07 	sts	0x076B, r1
    1aee:	10 92 6a 07 	sts	0x076A, r1
  msg.lqi                  = 0;
    1af2:	10 92 6c 07 	sts	0x076C, r1
  msg.rssi                 = 0;
    1af6:	10 92 6d 07 	sts	0x076D, r1

  msg.sensors.type        = 1;
    1afa:	20 93 6e 07 	sts	0x076E, r18
  msg.sensors.size        = sizeof(int32_t) * 3;
    1afe:	8c e0       	ldi	r24, 0x0C	; 12
    1b00:	80 93 6f 07 	sts	0x076F, r24
  msg.sensors.battery     = 0;
    1b04:	10 92 70 07 	sts	0x0770, r1
    1b08:	10 92 71 07 	sts	0x0771, r1
    1b0c:	10 92 72 07 	sts	0x0772, r1
    1b10:	10 92 73 07 	sts	0x0773, r1
  msg.sensors.temperature = 0;
    1b14:	10 92 74 07 	sts	0x0774, r1
    1b18:	10 92 75 07 	sts	0x0775, r1
    1b1c:	10 92 76 07 	sts	0x0776, r1
    1b20:	10 92 77 07 	sts	0x0777, r1
  msg.sensors.light       = 0;
    1b24:	10 92 78 07 	sts	0x0778, r1
    1b28:	10 92 79 07 	sts	0x0779, r1
    1b2c:	10 92 7a 07 	sts	0x077A, r1
    1b30:	10 92 7b 07 	sts	0x077B, r1

  msg.caption.type         = 32;
    1b34:	80 e2       	ldi	r24, 0x20	; 32
    1b36:	80 93 7c 07 	sts	0x077C, r24
  msg.caption.size         = APP_CAPTION_SIZE;
    1b3a:	d0 93 7d 07 	sts	0x077D, r29
  memcpy(msg.caption.text, APP_CAPTION, APP_CAPTION_SIZE);
    1b3e:	ee e7       	ldi	r30, 0x7E	; 126
    1b40:	f7 e0       	ldi	r31, 0x07	; 7
    1b42:	a0 e0       	ldi	r26, 0x00	; 0
    1b44:	b2 e0       	ldi	r27, 0x02	; 2
    1b46:	86 e0       	ldi	r24, 0x06	; 6
    1b48:	0d 90       	ld	r0, X+
    1b4a:	01 92       	st	Z+, r0
    1b4c:	81 50       	subi	r24, 0x01	; 1
    1b4e:	e1 f7       	brne	.-8      	; 0x1b48 <main+0x13c>
    1b50:	24 9a       	sbi	0x04, 4	; 4
    1b52:	2c 9a       	sbi	0x05, 4	; 5
  #endif
#endif

  ledsInit();

  NWK_SetAddr(APP_ADDR);
    1b54:	80 e0       	ldi	r24, 0x00	; 0
    1b56:	90 e4       	ldi	r25, 0x40	; 64
    1b58:	0e 94 0b 03 	call	0x616	; 0x616 <NWK_SetAddr>
  NWK_SetPanId(APP_PANID);
    1b5c:	84 e3       	ldi	r24, 0x34	; 52
    1b5e:	92 e1       	ldi	r25, 0x12	; 18
    1b60:	0e 94 12 03 	call	0x624	; 0x624 <NWK_SetPanId>
  PHY_SetChannel(APP_CHANNEL);
    1b64:	8f e0       	ldi	r24, 0x0F	; 15
    1b66:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <PHY_SetChannel>
  PHY_SetRxState(true);
    1b6a:	81 e0       	ldi	r24, 0x01	; 1
    1b6c:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <PHY_SetRxState>

#ifdef NWK_ENABLE_SECURITY
  NWK_SetSecurityKey((uint8_t *)APP_SECURITY_KEY);
#endif

  NWK_OpenEndpoint(APP_ENDPOINT, appDataInd);
    1b70:	81 e0       	ldi	r24, 0x01	; 1
    1b72:	67 e6       	ldi	r22, 0x67	; 103
    1b74:	7c e0       	ldi	r23, 0x0C	; 12
    1b76:	0e 94 19 03 	call	0x632	; 0x632 <NWK_OpenEndpoint>

  appDataSendingTimer.interval = APP_SENDING_INTERVAL;
    1b7a:	80 ed       	ldi	r24, 0xD0	; 208
    1b7c:	97 e0       	ldi	r25, 0x07	; 7
    1b7e:	a0 e0       	ldi	r26, 0x00	; 0
    1b80:	b0 e0       	ldi	r27, 0x00	; 0
    1b82:	80 93 9b 07 	sts	0x079B, r24
    1b86:	90 93 9c 07 	sts	0x079C, r25
    1b8a:	a0 93 9d 07 	sts	0x079D, r26
    1b8e:	b0 93 9e 07 	sts	0x079E, r27
  appDataSendingTimer.mode = SYS_TIMER_INTERVAL_MODE;
    1b92:	10 92 9f 07 	sts	0x079F, r1
  appDataSendingTimer.handler = appDataSendingTimerHandler;
    1b96:	d0 92 a1 07 	sts	0x07A1, r13
    1b9a:	c0 92 a0 07 	sts	0x07A0, r12

#if APP_ROUTER || APP_ENDDEVICE
  appNetworkStatus = false;
    1b9e:	10 92 a2 07 	sts	0x07A2, r1
  appNetworkStatusTimer.interval = 500;
    1ba2:	84 ef       	ldi	r24, 0xF4	; 244
    1ba4:	91 e0       	ldi	r25, 0x01	; 1
    1ba6:	a0 e0       	ldi	r26, 0x00	; 0
    1ba8:	b0 e0       	ldi	r27, 0x00	; 0
    1baa:	80 93 a9 07 	sts	0x07A9, r24
    1bae:	90 93 aa 07 	sts	0x07AA, r25
    1bb2:	a0 93 ab 07 	sts	0x07AB, r26
    1bb6:	b0 93 ac 07 	sts	0x07AC, r27
  appNetworkStatusTimer.mode = SYS_TIMER_PERIODIC_MODE;
    1bba:	c1 e0       	ldi	r28, 0x01	; 1
    1bbc:	c0 93 ad 07 	sts	0x07AD, r28
  appNetworkStatusTimer.handler = appNetworkStatusTimerHandler;
    1bc0:	b0 92 af 07 	sts	0x07AF, r11
    1bc4:	a0 92 ae 07 	sts	0x07AE, r10
  SYS_TimerStart(&appNetworkStatusTimer);
    1bc8:	83 ea       	ldi	r24, 0xA3	; 163
    1bca:	97 e0       	ldi	r25, 0x07	; 7
    1bcc:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <SYS_TimerStart>

#ifdef PHY_ENABLE_RANDOM_NUMBER_GENERATOR
  PHY_RandomReq();
#endif

  appState = APP_STATE_SEND;
    1bd0:	c0 93 52 07 	sts	0x0752, r28
    1bd4:	3a cf       	rjmp	.-396    	; 0x1a4a <main+0x3e>
/*****************************************************************************
*****************************************************************************/
static void appSendData(void)
{
#ifdef NWK_ENABLE_ROUTING
  msg.parentShortAddr = NWK_RouteNextHop(0);
    1bd6:	80 e0       	ldi	r24, 0x00	; 0
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	0e 94 c9 05 	call	0xb92	; 0xb92 <NWK_RouteNextHop>
    1bde:	90 93 6b 07 	sts	0x076B, r25
    1be2:	80 93 6a 07 	sts	0x076A, r24
#else
  msg.parentShortAddr = 0;
#endif

  msg.sensors.battery     = rand();
    1be6:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <rand>
    1bea:	aa 27       	eor	r26, r26
    1bec:	97 fd       	sbrc	r25, 7
    1bee:	a0 95       	com	r26
    1bf0:	ba 2f       	mov	r27, r26
    1bf2:	80 93 70 07 	sts	0x0770, r24
    1bf6:	90 93 71 07 	sts	0x0771, r25
    1bfa:	a0 93 72 07 	sts	0x0772, r26
    1bfe:	b0 93 73 07 	sts	0x0773, r27
  msg.sensors.temperature = rand() & 0x7f;
    1c02:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <rand>
    1c06:	aa 27       	eor	r26, r26
    1c08:	97 fd       	sbrc	r25, 7
    1c0a:	a0 95       	com	r26
    1c0c:	ba 2f       	mov	r27, r26
    1c0e:	8f 77       	andi	r24, 0x7F	; 127
    1c10:	90 70       	andi	r25, 0x00	; 0
    1c12:	a0 70       	andi	r26, 0x00	; 0
    1c14:	b0 70       	andi	r27, 0x00	; 0
    1c16:	80 93 74 07 	sts	0x0774, r24
    1c1a:	90 93 75 07 	sts	0x0775, r25
    1c1e:	a0 93 76 07 	sts	0x0776, r26
    1c22:	b0 93 77 07 	sts	0x0777, r27
#if APP_COORDINATOR
  appSendMessage((uint8_t *)&msg, sizeof(msg));
  SYS_TimerStart(&appDataSendingTimer);
  appState = APP_STATE_WAIT_SEND_TIMER;
#else
  nwkDataReq.dstAddr = 0;
    1c26:	10 92 8a 07 	sts	0x078A, r1
    1c2a:	10 92 89 07 	sts	0x0789, r1
  nwkDataReq.dstEndpoint = APP_ENDPOINT;
    1c2e:	c0 93 8b 07 	sts	0x078B, r28
  nwkDataReq.srcEndpoint = APP_ENDPOINT;
    1c32:	c0 93 8c 07 	sts	0x078C, r28
  nwkDataReq.options = NWK_OPT_ACK_REQUEST | NWK_OPT_ENABLE_SECURITY;
    1c36:	83 e0       	ldi	r24, 0x03	; 3
    1c38:	80 93 8d 07 	sts	0x078D, r24
  nwkDataReq.data = (uint8_t *)&msg;
    1c3c:	90 92 8f 07 	sts	0x078F, r9
    1c40:	80 92 8e 07 	sts	0x078E, r8
  nwkDataReq.size = sizeof(msg);
    1c44:	81 e3       	ldi	r24, 0x31	; 49
    1c46:	80 93 90 07 	sts	0x0790, r24
  nwkDataReq.confirm = appDataConf;
    1c4a:	70 92 92 07 	sts	0x0792, r7
    1c4e:	60 92 91 07 	sts	0x0791, r6
    1c52:	2c 9a       	sbi	0x05, 4	; 5

  ledOn(LED_DATA);
  NWK_DataReq(&nwkDataReq);
    1c54:	84 e8       	ldi	r24, 0x84	; 132
    1c56:	97 e0       	ldi	r25, 0x07	; 7
    1c58:	0e 94 68 03 	call	0x6d0	; 0x6d0 <NWK_DataReq>

  appState = APP_STATE_WAIT_CONF;
    1c5c:	82 e0       	ldi	r24, 0x02	; 2
    1c5e:	05 c0       	rjmp	.+10     	; 0x1c6a <main+0x25e>
    case APP_STATE_SENDING_DONE:
    {
#if APP_ENDDEVICE
      appState = APP_STATE_PREPARE_TO_SLEEP;
#else
      SYS_TimerStart(&appDataSendingTimer);
    1c60:	85 e9       	ldi	r24, 0x95	; 149
    1c62:	97 e0       	ldi	r25, 0x07	; 7
    1c64:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <SYS_TimerStart>
      appState = APP_STATE_WAIT_SEND_TIMER;
    1c68:	84 e0       	ldi	r24, 0x04	; 4
    1c6a:	80 93 52 07 	sts	0x0752, r24
    1c6e:	ed ce       	rjmp	.-550    	; 0x1a4a <main+0x3e>
#endif
    } break;

    case APP_STATE_PREPARE_TO_SLEEP:
    {
      if (!NWK_Busy())
    1c70:	0e 94 22 03 	call	0x644	; 0x644 <NWK_Busy>
    1c74:	88 23       	and	r24, r24
    1c76:	09 f0       	breq	.+2      	; 0x1c7a <main+0x26e>
    1c78:	e8 ce       	rjmp	.-560    	; 0x1a4a <main+0x3e>
      {
        NWK_SleepReq();
    1c7a:	0e 94 37 03 	call	0x66e	; 0x66e <NWK_SleepReq>
        appState = APP_STATE_SLEEP;
    1c7e:	d0 93 52 07 	sts	0x0752, r29
    1c82:	e3 ce       	rjmp	.-570    	; 0x1a4a <main+0x3e>
    1c84:	24 98       	cbi	0x04, 4	; 4
    1c86:	2c 98       	cbi	0x05, 4	; 5

    case APP_STATE_SLEEP:
    {
      ledsClose();

      PHY_SetRxState(false);
    1c88:	80 e0       	ldi	r24, 0x00	; 0
    1c8a:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <PHY_SetRxState>

      HAL_Sleep(APP_SENDING_INTERVAL);
    1c8e:	60 ed       	ldi	r22, 0xD0	; 208
    1c90:	77 e0       	ldi	r23, 0x07	; 7
    1c92:	80 e0       	ldi	r24, 0x00	; 0
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	0e 94 be 00 	call	0x17c	; 0x17c <HAL_Sleep>
      appState = APP_STATE_WAKEUP;
    1c9a:	f0 92 52 07 	sts	0x0752, r15
    1c9e:	d5 ce       	rjmp	.-598    	; 0x1a4a <main+0x3e>
    } break;

    case APP_STATE_WAKEUP:
    {
      NWK_WakeupReq();
    1ca0:	0e 94 3a 03 	call	0x674	; 0x674 <NWK_WakeupReq>
    1ca4:	24 9a       	sbi	0x04, 4	; 4
    1ca6:	2c 9a       	sbi	0x05, 4	; 5
    1ca8:	2c 9a       	sbi	0x05, 4	; 5

      ledsInit();
      ledOn(LED_NETWORK);

      PHY_SetRxState(true);
    1caa:	81 e0       	ldi	r24, 0x01	; 1
    1cac:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <PHY_SetRxState>

      appState = APP_STATE_SEND;
    1cb0:	81 e0       	ldi	r24, 0x01	; 1
    1cb2:	db cf       	rjmp	.-74     	; 0x1c6a <main+0x25e>

00001cb4 <__mulsi3>:
    1cb4:	62 9f       	mul	r22, r18
    1cb6:	d0 01       	movw	r26, r0
    1cb8:	73 9f       	mul	r23, r19
    1cba:	f0 01       	movw	r30, r0
    1cbc:	82 9f       	mul	r24, r18
    1cbe:	e0 0d       	add	r30, r0
    1cc0:	f1 1d       	adc	r31, r1
    1cc2:	64 9f       	mul	r22, r20
    1cc4:	e0 0d       	add	r30, r0
    1cc6:	f1 1d       	adc	r31, r1
    1cc8:	92 9f       	mul	r25, r18
    1cca:	f0 0d       	add	r31, r0
    1ccc:	83 9f       	mul	r24, r19
    1cce:	f0 0d       	add	r31, r0
    1cd0:	74 9f       	mul	r23, r20
    1cd2:	f0 0d       	add	r31, r0
    1cd4:	65 9f       	mul	r22, r21
    1cd6:	f0 0d       	add	r31, r0
    1cd8:	99 27       	eor	r25, r25
    1cda:	72 9f       	mul	r23, r18
    1cdc:	b0 0d       	add	r27, r0
    1cde:	e1 1d       	adc	r30, r1
    1ce0:	f9 1f       	adc	r31, r25
    1ce2:	63 9f       	mul	r22, r19
    1ce4:	b0 0d       	add	r27, r0
    1ce6:	e1 1d       	adc	r30, r1
    1ce8:	f9 1f       	adc	r31, r25
    1cea:	bd 01       	movw	r22, r26
    1cec:	cf 01       	movw	r24, r30
    1cee:	11 24       	eor	r1, r1
    1cf0:	08 95       	ret

00001cf2 <__udivmodsi4>:
    1cf2:	a1 e2       	ldi	r26, 0x21	; 33
    1cf4:	1a 2e       	mov	r1, r26
    1cf6:	aa 1b       	sub	r26, r26
    1cf8:	bb 1b       	sub	r27, r27
    1cfa:	fd 01       	movw	r30, r26
    1cfc:	0d c0       	rjmp	.+26     	; 0x1d18 <__udivmodsi4_ep>

00001cfe <__udivmodsi4_loop>:
    1cfe:	aa 1f       	adc	r26, r26
    1d00:	bb 1f       	adc	r27, r27
    1d02:	ee 1f       	adc	r30, r30
    1d04:	ff 1f       	adc	r31, r31
    1d06:	a2 17       	cp	r26, r18
    1d08:	b3 07       	cpc	r27, r19
    1d0a:	e4 07       	cpc	r30, r20
    1d0c:	f5 07       	cpc	r31, r21
    1d0e:	20 f0       	brcs	.+8      	; 0x1d18 <__udivmodsi4_ep>
    1d10:	a2 1b       	sub	r26, r18
    1d12:	b3 0b       	sbc	r27, r19
    1d14:	e4 0b       	sbc	r30, r20
    1d16:	f5 0b       	sbc	r31, r21

00001d18 <__udivmodsi4_ep>:
    1d18:	66 1f       	adc	r22, r22
    1d1a:	77 1f       	adc	r23, r23
    1d1c:	88 1f       	adc	r24, r24
    1d1e:	99 1f       	adc	r25, r25
    1d20:	1a 94       	dec	r1
    1d22:	69 f7       	brne	.-38     	; 0x1cfe <__udivmodsi4_loop>
    1d24:	60 95       	com	r22
    1d26:	70 95       	com	r23
    1d28:	80 95       	com	r24
    1d2a:	90 95       	com	r25
    1d2c:	9b 01       	movw	r18, r22
    1d2e:	ac 01       	movw	r20, r24
    1d30:	bd 01       	movw	r22, r26
    1d32:	cf 01       	movw	r24, r30
    1d34:	08 95       	ret

00001d36 <do_rand>:
    1d36:	8f 92       	push	r8
    1d38:	9f 92       	push	r9
    1d3a:	af 92       	push	r10
    1d3c:	bf 92       	push	r11
    1d3e:	cf 92       	push	r12
    1d40:	df 92       	push	r13
    1d42:	ef 92       	push	r14
    1d44:	ff 92       	push	r15
    1d46:	cf 93       	push	r28
    1d48:	df 93       	push	r29
    1d4a:	ec 01       	movw	r28, r24
    1d4c:	88 81       	ld	r24, Y
    1d4e:	99 81       	ldd	r25, Y+1	; 0x01
    1d50:	aa 81       	ldd	r26, Y+2	; 0x02
    1d52:	bb 81       	ldd	r27, Y+3	; 0x03
    1d54:	00 97       	sbiw	r24, 0x00	; 0
    1d56:	a1 05       	cpc	r26, r1
    1d58:	b1 05       	cpc	r27, r1
    1d5a:	21 f4       	brne	.+8      	; 0x1d64 <do_rand+0x2e>
    1d5c:	84 e2       	ldi	r24, 0x24	; 36
    1d5e:	99 ed       	ldi	r25, 0xD9	; 217
    1d60:	ab e5       	ldi	r26, 0x5B	; 91
    1d62:	b7 e0       	ldi	r27, 0x07	; 7
    1d64:	bc 01       	movw	r22, r24
    1d66:	cd 01       	movw	r24, r26
    1d68:	2d e1       	ldi	r18, 0x1D	; 29
    1d6a:	33 ef       	ldi	r19, 0xF3	; 243
    1d6c:	41 e0       	ldi	r20, 0x01	; 1
    1d6e:	50 e0       	ldi	r21, 0x00	; 0
    1d70:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <__divmodsi4>
    1d74:	49 01       	movw	r8, r18
    1d76:	5a 01       	movw	r10, r20
    1d78:	27 ea       	ldi	r18, 0xA7	; 167
    1d7a:	31 e4       	ldi	r19, 0x41	; 65
    1d7c:	40 e0       	ldi	r20, 0x00	; 0
    1d7e:	50 e0       	ldi	r21, 0x00	; 0
    1d80:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <__mulsi3>
    1d84:	6b 01       	movw	r12, r22
    1d86:	7c 01       	movw	r14, r24
    1d88:	c5 01       	movw	r24, r10
    1d8a:	b4 01       	movw	r22, r8
    1d8c:	2c ee       	ldi	r18, 0xEC	; 236
    1d8e:	34 ef       	ldi	r19, 0xF4	; 244
    1d90:	4f ef       	ldi	r20, 0xFF	; 255
    1d92:	5f ef       	ldi	r21, 0xFF	; 255
    1d94:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <__mulsi3>
    1d98:	dc 01       	movw	r26, r24
    1d9a:	cb 01       	movw	r24, r22
    1d9c:	c8 0e       	add	r12, r24
    1d9e:	d9 1e       	adc	r13, r25
    1da0:	ea 1e       	adc	r14, r26
    1da2:	fb 1e       	adc	r15, r27
    1da4:	f7 fe       	sbrs	r15, 7
    1da6:	08 c0       	rjmp	.+16     	; 0x1db8 <do_rand+0x82>
    1da8:	8f ef       	ldi	r24, 0xFF	; 255
    1daa:	9f ef       	ldi	r25, 0xFF	; 255
    1dac:	af ef       	ldi	r26, 0xFF	; 255
    1dae:	bf e7       	ldi	r27, 0x7F	; 127
    1db0:	c8 0e       	add	r12, r24
    1db2:	d9 1e       	adc	r13, r25
    1db4:	ea 1e       	adc	r14, r26
    1db6:	fb 1e       	adc	r15, r27
    1db8:	c8 82       	st	Y, r12
    1dba:	d9 82       	std	Y+1, r13	; 0x01
    1dbc:	ea 82       	std	Y+2, r14	; 0x02
    1dbe:	fb 82       	std	Y+3, r15	; 0x03
    1dc0:	c6 01       	movw	r24, r12
    1dc2:	9f 77       	andi	r25, 0x7F	; 127
    1dc4:	df 91       	pop	r29
    1dc6:	cf 91       	pop	r28
    1dc8:	ff 90       	pop	r15
    1dca:	ef 90       	pop	r14
    1dcc:	df 90       	pop	r13
    1dce:	cf 90       	pop	r12
    1dd0:	bf 90       	pop	r11
    1dd2:	af 90       	pop	r10
    1dd4:	9f 90       	pop	r9
    1dd6:	8f 90       	pop	r8
    1dd8:	08 95       	ret

00001dda <rand_r>:
    1dda:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <do_rand>
    1dde:	08 95       	ret

00001de0 <rand>:
    1de0:	87 e0       	ldi	r24, 0x07	; 7
    1de2:	92 e0       	ldi	r25, 0x02	; 2
    1de4:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <do_rand>
    1de8:	08 95       	ret

00001dea <srand>:
    1dea:	a0 e0       	ldi	r26, 0x00	; 0
    1dec:	b0 e0       	ldi	r27, 0x00	; 0
    1dee:	80 93 07 02 	sts	0x0207, r24
    1df2:	90 93 08 02 	sts	0x0208, r25
    1df6:	a0 93 09 02 	sts	0x0209, r26
    1dfa:	b0 93 0a 02 	sts	0x020A, r27
    1dfe:	08 95       	ret

00001e00 <memcpy>:
    1e00:	fb 01       	movw	r30, r22
    1e02:	dc 01       	movw	r26, r24
    1e04:	02 c0       	rjmp	.+4      	; 0x1e0a <memcpy+0xa>
    1e06:	01 90       	ld	r0, Z+
    1e08:	0d 92       	st	X+, r0
    1e0a:	41 50       	subi	r20, 0x01	; 1
    1e0c:	50 40       	sbci	r21, 0x00	; 0
    1e0e:	d8 f7       	brcc	.-10     	; 0x1e06 <memcpy+0x6>
    1e10:	08 95       	ret

00001e12 <__divmodsi4>:
    1e12:	97 fb       	bst	r25, 7
    1e14:	09 2e       	mov	r0, r25
    1e16:	05 26       	eor	r0, r21
    1e18:	0e d0       	rcall	.+28     	; 0x1e36 <__divmodsi4_neg1>
    1e1a:	57 fd       	sbrc	r21, 7
    1e1c:	04 d0       	rcall	.+8      	; 0x1e26 <__divmodsi4_neg2>
    1e1e:	69 df       	rcall	.-302    	; 0x1cf2 <__udivmodsi4>
    1e20:	0a d0       	rcall	.+20     	; 0x1e36 <__divmodsi4_neg1>
    1e22:	00 1c       	adc	r0, r0
    1e24:	38 f4       	brcc	.+14     	; 0x1e34 <__divmodsi4_exit>

00001e26 <__divmodsi4_neg2>:
    1e26:	50 95       	com	r21
    1e28:	40 95       	com	r20
    1e2a:	30 95       	com	r19
    1e2c:	21 95       	neg	r18
    1e2e:	3f 4f       	sbci	r19, 0xFF	; 255
    1e30:	4f 4f       	sbci	r20, 0xFF	; 255
    1e32:	5f 4f       	sbci	r21, 0xFF	; 255

00001e34 <__divmodsi4_exit>:
    1e34:	08 95       	ret

00001e36 <__divmodsi4_neg1>:
    1e36:	f6 f7       	brtc	.-4      	; 0x1e34 <__divmodsi4_exit>
    1e38:	90 95       	com	r25
    1e3a:	80 95       	com	r24
    1e3c:	70 95       	com	r23
    1e3e:	61 95       	neg	r22
    1e40:	7f 4f       	sbci	r23, 0xFF	; 255
    1e42:	8f 4f       	sbci	r24, 0xFF	; 255
    1e44:	9f 4f       	sbci	r25, 0xFF	; 255
    1e46:	08 95       	ret

00001e48 <_exit>:
    1e48:	f8 94       	cli

00001e4a <__stop_program>:
    1e4a:	ff cf       	rjmp	.-2      	; 0x1e4a <__stop_program>
